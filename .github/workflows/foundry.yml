name: Foundry

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "dev"

env:
  FOUNDRY_PROFILE: ci
  RPC_MAINNET: ${{ secrets.RPC_MAINNET }}
  RPC_HOLESKY: ${{ secrets.RPC_HOLESKY }}
  CHAIN_ID: ${{ secrets.CHAIN_ID }}

jobs:
  # -----------------------------------------------------------------------
  # Prepare Environment and Cache
  # -----------------------------------------------------------------------
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Cache Foundry dependencies
      - name: Cache Foundry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/forge
            out/
            cache/
          key: foundry-${{ runner.os }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('lib/') }}
          restore-keys: |
            foundry-${{ runner.os }}-
      
      # Install the Foundry toolchain with caching
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true
          cache-key: foundry-${{ github.job }}-${{ github.sha }}
          cache-restore-keys: |
            foundry-${{ github.job }}-
            foundry-

      # Cache NPM dependencies
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      # Install Bun
      - name: Install Bun
        uses: oven-sh/setup-bun@v1

      # Install NPM packages
      - name: Install NPM Packages
        run: bun install

      # Build the project
      - name: Forge Build
        run: |
          forge --version
          forge build --sizes
          echo "## Build result"
          echo "✅ Passed"
        id: build

      # Cache the build artifacts
      - name: Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            out/
            cache/
          key: build-${{ github.sha }}

  # -----------------------------------------------------------------------
  # Forge Test
  # -----------------------------------------------------------------------
  test:
    name: Test
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Restore cached dependencies and build
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/forge
            out/
            cache/
            node_modules
          key: foundry-${{ runner.os }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('lib/') }}

      # Install Foundry with caching
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true
          cache-key: foundry-${{ github.job }}-${{ github.sha }}
          cache-restore-keys: |
            foundry-${{ github.job }}-
            foundry-

      - name: Install Bun
        uses: oven-sh/setup-bun@v1

      # Run Forge's formatting checker
      - name: Forge Fmt
        run: forge fmt --check
        id: fmt

      # Run Solhint linter
      - name: Solhint
        run: bun run hint

      # Run local tests
      - name: Forge Test (Local)
        run: forge test

      # Run integration tests using mainnet fork
      - name: Forge Test Integration (Fork)
        run: FOUNDRY_PROFILE=forktest forge test --match-contract Integration

  # -----------------------------------------------------------------------
  # Forge Test (Intense)
  # -----------------------------------------------------------------------
  continuous-fuzzing:
    name: Test (Intense)
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Restore cached dependencies and build
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/forge
            out/
            cache/
          key: foundry-${{ runner.os }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('lib/') }}

      # Install Foundry with caching
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true
          cache-key: foundry-${{ github.job }}-${{ github.sha }}
          cache-restore-keys: |
            foundry-${{ github.job }}-
            foundry-

      # Run Forge Test (Intense)
      - name: Forge Test (Intense)
        run: FOUNDRY_PROFILE=intense forge test

  # -----------------------------------------------------------------------
  # Forge Storage Diff
  # -----------------------------------------------------------------------
  storage-diff:
    name: Test (Storage)
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Restore cached dependencies and build
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/forge
            out/
            cache/
          key: foundry-${{ runner.os }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('lib/') }}

      # Install Foundry with caching
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true
          cache-key: foundry-${{ github.job }}-${{ github.sha }}
          cache-restore-keys: |
            foundry-${{ github.job }}-
            foundry-

      # Run storage diff check
      - name: Mainnet Storage Diff
        run: |
          bash bin/storage-diff.sh --rpc-url ${{ secrets.RPC_MAINNET }} --etherscan-key ${{ secrets.ETHERSCAN_API_KEY }} --input .github//storage-diff.json
        id: storage-diff

  # -----------------------------------------------------------------------
  # Forge Coverage
  # -----------------------------------------------------------------------
  run-coverage:
    name: Coverage
    needs: prepare
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/dev' ||
      github.ref == 'refs/heads/testnet-holesky' ||
      github.ref == 'refs/heads/mainnet' ||
      github.base_ref == 'dev' ||
      github.base_ref == 'testnet-holesky' ||
      github.base_ref == 'mainnet'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Restore cached dependencies and build
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ~/.cache/forge
            out/
            cache/
          key: foundry-${{ runner.os }}-${{ hashFiles('foundry.toml') }}-${{ hashFiles('lib/') }}

      # Install Foundry with caching
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true
          cache-key: foundry-${{ github.job }}-${{ github.sha }}
          cache-restore-keys: |
            foundry-${{ github.job }}-
            foundry-

      # Install LCOV
      - name: Install LCOV
        run: sudo apt-get install lcov
        id: lcov

      # Run Forge coverage
      - name: Forge Coverage
        run: |
          FOUNDRY_PROFILE=ci forge coverage --report lcov --no-match-coverage "src/test/*","script/*","*Storage" 
          genhtml -q -o report ./lcov.info

      # Upload coverage report
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: report/*

      # Check coverage threshold
      - name: Check Coverage Threshold
        run: |
          LINES_PCT=$(lcov --summary lcov.info | grep "lines" | cut -d ':' -f 2 | cut -d '%' -f 1 | tr -d '[:space:]')
          FUNCTIONS_PCT=$(lcov --summary lcov.info | grep "functions" | cut -d ':' -f 2 | cut -d '%' -f 1 | tr -d '[:space:]')          
          FAILED=0
          
          if (( $(echo "$LINES_PCT < 90" | bc -l) )); then
            echo -e "\033[1;31m❌ Lines coverage ($LINES_PCT%) is below minimum threshold of 90%\033[0m"
            FAILED=1
          else
            echo -e "\033[1;32m✅ Lines coverage ($LINES_PCT%) meets minimum threshold of 90%\033[0m"
          fi
          
          if (( $(echo "$FUNCTIONS_PCT < 90" | bc -l) )); then
            echo -e "\033[1;31m❌ Functions coverage ($FUNCTIONS_PCT%) is below minimum threshold of 90%\033[0m"
            FAILED=1
          else
            echo -e "\033[1;32m✅ Functions coverage ($FUNCTIONS_PCT%) meets minimum threshold of 90%\033[0m"
          fi
          
          [ $FAILED -eq 1 ] && exit 1