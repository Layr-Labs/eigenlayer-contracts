name: Foundry

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "dev"

env:
  FOUNDRY_PROFILE: ci
  RPC_MAINNET: ${{ secrets.RPC_MAINNET }}
  RPC_HOLESKY: ${{ secrets.RPC_HOLESKY }}
  CHAIN_ID: ${{ secrets.CHAIN_ID }}

jobs:
  # -----------------------------------------------------------------------
  # Forge Test
  # -----------------------------------------------------------------------

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      # Check out repository with all submodules for complete codebase access.
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install the Foundry toolchain.
      - name: "Install Foundry"
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      # Run Forge's formatting checker to ensure consistent code style.
      - name: "Forge Fmt"
        run: |
          forge fmt --check
        id: fmt

      # Install Bun package manager for JavaScript dependencies (faster than npm).
      - name: "Install Bun"
        uses: "oven-sh/setup-bun@v1"

      # Install NPM packages.
      - name: "Install NPM Packages"
        run: bun install

      # Run Solhint linter to check for Solidity code quality issues.
      - name: "Solhint"
        run: bun run hint

      # Build the project and display contract sizes, then add summary.
      - name: "Forge Build"
        run: |
          forge --version
          forge build --sizes
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY
        id: build

      # Run local tests (unit and integration).
      - name: "Forge Test (Local)"
        run: forge test

      # Run integration tests using a mainnet fork.
      - name: "Forge Test Integration (Fork)"
        run: FOUNDRY_PROFILE=forktest forge test --match-contract Integration

  # -----------------------------------------------------------------------
  # Forge Test (Intense)
  # -----------------------------------------------------------------------

  continuous-fuzzing:
    name: Test (Intense)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      # Check out repository with all submodules for complete codebase access.
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install the Foundry toolchain.
      - name: "Install Foundry"
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      # Build the project and display contract sizes, then add summary.
      - name: "Forge Build"
        run: |
          forge --version
          forge build --sizes
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY
        id: build

      # Run Forge Test (Intense)
      - name: Forge Test (Intense)
        run: FOUNDRY_PROFILE=intense forge test
  
  # -----------------------------------------------------------------------
  # Forge Coverage
  # -----------------------------------------------------------------------

  run-coverage:
    name: Coverage
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      # Check out repository with all submodules for complete codebase access.
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install the Foundry toolchain.
      - name: "Install Foundry"
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      # Install LCOV for coverage report generation.
      - name: Install LCOV
        run: |
          sudo apt-get install lcov
        id: lcov

      # Build the project and display contract sizes, then add summary.
      - name: "Forge Build"
        run: |
          forge --version
          forge build --sizes
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY
        id: build

      # Run Forge coverage with LCOV report format, excluding test and script files
      - name: Forge Coverage
        run: |
          FOUNDRY_PROFILE=ci forge coverage --report lcov --no-match-coverage "src/test/*","script/*","*Storage" >> $GITHUB_STEP_SUMMARY
          COVERAGE_PCT=$(lcov --summary lcov.info | grep "lines" | cut -d ':' -f 2 | cut -d '%' -f 1 | tr -d '[:space:]')

          echo "Minimum Coverage: 90%"
          echo "Coverage: $COVERAGE_PCT%"
          
          # Generate HTML reports from LCOV data before potential failure
          genhtml -q -o report ./lcov.info

      # Upload coverage report as artifact before potential failure
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: report/*

      # Check coverage threshold after uploading report
      - name: Check Coverage Threshold
        run: |
          COVERAGE_PCT=$(lcov --summary lcov.info | grep "lines" | cut -d ':' -f 2 | cut -d '%' -f 1 | tr -d '[:space:]')
          if (( $(echo "$COVERAGE_PCT < 90" | bc -l) )); then
            echo "❌ Code coverage ($COVERAGE_PCT%) is below minimum threshold of 90%"
            exit 1
          else
            echo "✅ Code coverage ($COVERAGE_PCT%) meets minimum threshold of 90%"
          fi