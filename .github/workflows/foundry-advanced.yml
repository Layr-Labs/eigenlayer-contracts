name: Foundry

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main


env:
  FOUNDRY_PROFILE: medium

jobs:
  # -----------------------------------------------------------------------
  # Forge Test
  # -----------------------------------------------------------------------

  test-suite:
    name: Test
    runs-on: protocol-x64-16core
    strategy:
      matrix:
        suite: [Fork]
      max-parallel: 1
    
    steps:
      # Check out repository with all submodules for complete codebase access.
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Restore Forge cache
      - name: Cache Forge Build
        uses: actions/cache@v3
        with:
          path: |
            cache/
            out/
          key: ${{ runner.os }}-forge-${{ hashFiles('**/foundry.toml', '**/remappings.txt', 'src/**/*.sol', 'lib/**/*.sol') }}
          restore-keys: |
            ${{ runner.os }}-forge-

      # Install the Foundry toolchain.
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      # Run Forge's formatting checker to ensure consistent code style.
      - name: "Forge Fmt"
        run: |
          forge fmt --check
          FOUNDRY_PROFILE=test forge fmt --check
        id: fmt

      # Build the project and display contract sizes.
      - name: Forge Build
        run: |
          forge --version
          forge build --sizes

      # # Run the test suite in parallel based on the matrix configuration.
      # - name: Run ${{ matrix.suite }} tests
      #   run: |
      #     case "${{ matrix.suite }}" in
      #       Fork) forge test --match-contract Integration --fork-url "${{ secrets.RPC_MAINNET }}" ;;
      #     esac
      #   env:
      #     FOUNDRY_PROFILE: ${{ matrix.suite == 'Fork' && 'forktest' || 'medium' }}

      # Start Anvil with a forked state from mainnet
      - name: Start Anvil Fork
        run: |
          # Show Anvil version
          anvil --version

          # Start Anvil with the latest block and public RPC endpoint
          anvil --fork-url https://eth.llamarpc.com \
                --port 8545 \
                --chain-id 1 \
                --block-time 12 \
                --no-rate-limit \
                --fork-block-number 22179220 &

          # Give it time to start up
          sleep 10
          
          # Check if Anvil is running
          if ! curl -s -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H "Content-Type: application/json" http://localhost:8545 > /dev/null; then
            echo "Anvil failed to start properly"
            exit 1
          fi

          # Save the PID so we can kill it later
          echo $! > anvil.pid
          
      # Run the test suite with the local Anvil instance
      - name: Run ${{ matrix.suite }} tests
        run: |
          case "${{ matrix.suite }}" in
            Fork) forge test --match-contract Integration --fork-url http://localhost:8545 --fork-retries 1 -vvv ;;
          esac
        env:
          FOUNDRY_PROFILE: ${{ matrix.suite == 'Fork' && 'forktest' || 'medium' }}
          RPC_MAINNET: "http://localhost:8545"  # Set the environment variable to point to Anvil
          
      # Clean up Anvil when done
      - name: Clean up Anvil
        if: always()
        run: |
          if [ -f anvil.pid ]; then
            kill $(cat anvil.pid) || true
          fi