// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BackingEigen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// BackingEigenMetaData contains all meta data concerning the BackingEigen contract.
var BackingEigenMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_EIGEN\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"CLOCK_MODE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EIGEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowedFrom\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowedTo\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkpoints\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pos\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"components\":[{\"name\":\"fromBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"votes\",\"type\":\"uint224\",\"internalType\":\"uint224\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"clock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint48\",\"internalType\":\"uint48\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegateBySig\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegates\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"disableTransferRestrictions\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastTotalSupply\",\"inputs\":[{\"name\":\"timepoint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastVotes\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"timepoint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getVotes\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"initialOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isMinter\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"numCheckpoints\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAllowedFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isAllowedFrom\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAllowedTo\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isAllowedTo\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setIsMinter\",\"inputs\":[{\"name\":\"minterAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferRestrictionsDisabledAfter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Backed\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegateChanged\",\"inputs\":[{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"fromDelegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"toDelegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegateVotesChanged\",\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"previousBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IsMinterModified\",\"inputs\":[{\"name\":\"minterAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetAllowedFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"isAllowedFrom\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetAllowedTo\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"isAllowedTo\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransferRestrictionsDisabled\",\"inputs\":[],\"anonymous\":false}]",
	Bin: "0x60a060405234801561000f575f5ffd5b50604051615929380380615929833981810160405281019061003191906101a6565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505061007361007960201b60201c565b506102a3565b5f60019054906101000a900460ff16156100c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100bf90610251565b60405180910390fd5b60ff80165f5f9054906101000a900460ff1660ff16146101355760ff5f5f6101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405161012c919061028a565b60405180910390a15b565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101648261013b565b9050919050565b5f6101758261015a565b9050919050565b6101858161016b565b811461018f575f5ffd5b50565b5f815190506101a08161017c565b92915050565b5f602082840312156101bb576101ba610137565b5b5f6101c884828501610192565b91505092915050565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f61023b6027836101d1565b9150610246826101e1565b604082019050919050565b5f6020820190508181035f8301526102688161022f565b9050919050565b5f60ff82169050919050565b6102848161026f565b82525050565b5f60208201905061029d5f83018461027b565b92915050565b6080516156596102d05f395f81816113e5015281816114100152818161143b01526118e501526156595ff3fe608060405234801561000f575f5ffd5b5060043610610246575f3560e01c80637ecebe0011610139578063aa271e1a116100b6578063dd62ed3e1161007a578063dd62ed3e14610752578063eb415f4514610782578063f1127ed81461078c578063f2fde38b146107bc578063fdc371ce146107d857610246565b8063aa271e1a146106b2578063b8c25594146106e2578063c3cda520146106fe578063c4d66de81461071a578063d505accf1461073657610246565b806395d89b41116100fd57806395d89b41146105e65780639ab24eb0146106045780639aec4bae14610634578063a457c2d714610652578063a9059cbb1461068257610246565b80637ecebe001461052657806384b0196e146105565780638da5cb5b1461057a5780638e539e8c1461059857806391ddadf4146105c857610246565b806340c10f19116101c757806366eb399f1161018b57806366eb399f146104705780636fcfff451461048c57806370a08231146104bc578063715018a6146104ec57806378aa33ba146104f657610246565b806340c10f19146103ce57806342966c68146103ea5780634bf5d7e914610406578063587cde1e146104245780635c19a95c1461045457610246565b806323b872dd1161020e57806323b872dd14610302578063313ce567146103325780633644e51514610350578063395093511461036e5780633a46b1a81461039e57610246565b80630455e6941461024a57806306fdde031461027a578063095ea7b31461029857806318160ddd146102c85780631ffacdef146102e6575b5f5ffd5b610264600480360381019061025f91906138f3565b6107f6565b6040516102719190613938565b60405180910390f35b610282610814565b60405161028f91906139c1565b60405180910390f35b6102b260048036038101906102ad9190613a14565b6108a4565b6040516102bf9190613938565b60405180910390f35b6102d06108c6565b6040516102dd9190613a61565b60405180910390f35b61030060048036038101906102fb9190613aa4565b6108cf565b005b61031c60048036038101906103179190613ae2565b6108e5565b6040516103299190613938565b60405180910390f35b61033a610913565b6040516103479190613b4d565b60405180910390f35b61035861091b565b6040516103659190613b7e565b60405180910390f35b61038860048036038101906103839190613a14565b610929565b6040516103959190613938565b60405180910390f35b6103b860048036038101906103b39190613a14565b61095f565b6040516103c59190613a61565b60405180910390f35b6103e860048036038101906103e39190613a14565b6109ff565b005b61040460048036038101906103ff9190613b97565b610a97565b005b61040e610aab565b60405161041b91906139c1565b60405180910390f35b61043e600480360381019061043991906138f3565b610ae8565b60405161044b9190613bd1565b60405180910390f35b61046e600480360381019061046991906138f3565b610b4d565b005b61048a60048036038101906104859190613aa4565b610b61565b005b6104a660048036038101906104a191906138f3565b610c10565b6040516104b39190613c08565b60405180910390f35b6104d660048036038101906104d191906138f3565b610c61565b6040516104e39190613a61565b60405180910390f35b6104f4610ca7565b005b610510600480360381019061050b91906138f3565b610cba565b60405161051d9190613938565b60405180910390f35b610540600480360381019061053b91906138f3565b610cd8565b60405161054d9190613a61565b60405180910390f35b61055e610d25565b6040516105719796959493929190613d12565b60405180910390f35b610582610e1f565b60405161058f9190613bd1565b60405180910390f35b6105b260048036038101906105ad9190613b97565b610e47565b6040516105bf9190613a61565b60405180910390f35b6105d0610eac565b6040516105dd9190613db4565b60405180910390f35b6105ee610ebb565b6040516105fb91906139c1565b60405180910390f35b61061e600480360381019061061991906138f3565b610f4b565b60405161062b9190613a61565b60405180910390f35b61063c611049565b6040516106499190613a61565b60405180910390f35b61066c60048036038101906106679190613a14565b611050565b6040516106799190613938565b60405180910390f35b61069c60048036038101906106979190613a14565b6110c5565b6040516106a99190613938565b60405180910390f35b6106cc60048036038101906106c791906138f3565b6110e7565b6040516106d99190613938565b60405180910390f35b6106fc60048036038101906106f79190613aa4565b611105565b005b61071860048036038101906107139190613e21565b61111b565b005b610734600480360381019061072f91906138f3565b61121e565b005b610750600480360381019061074b9190613eaa565b6114f4565b005b61076c60048036038101906107679190613f47565b611633565b6040516107799190613a61565b60405180910390f35b61078a6116b5565b005b6107a660048036038101906107a19190613faf565b611758565b6040516107b3919061405f565b60405180910390f35b6107d660048036038101906107d191906138f3565b611861565b005b6107e06118e3565b6040516107ed91906140d3565b60405180910390f35b610131602052805f5260405f205f915054906101000a900460ff1681565b60606068805461082390614119565b80601f016020809104026020016040519081016040528092919081815260200182805461084f90614119565b801561089a5780601f106108715761010080835404028352916020019161089a565b820191905f5260205f20905b81548152906001019060200180831161087d57829003601f168201915b5050505050905090565b5f5f6108ae611907565b90506108bb81858561190e565b600191505092915050565b5f606754905090565b6108d7611ad1565b6108e18282611b4f565b5050565b5f5f6108ef611907565b90506108fc858285611bf6565b610907858585611c81565b60019150509392505050565b5f6012905090565b5f610924611ef0565b905090565b5f5f610933611907565b90506109548185856109458589611633565b61094f9190614176565b61190e565b600191505092915050565b5f610968610eac565b65ffffffffffff1682106109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906141f3565b60405180910390fd5b6109f760ff5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2083611efe565b905092915050565b6101335f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090614281565b60405180910390fd5b610a93828261203e565b5050565b610aa8610aa2611907565b826120cc565b50565b60606040518060400160405280600e81526020017f6d6f64653d74696d657374616d70000000000000000000000000000000000000815250905090565b5f60fe5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610b5e610b58611907565b826120eb565b50565b610b69611ad1565b8173ffffffffffffffffffffffffffffffffffffffff167f0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde82604051610baf9190613938565b60405180910390a2806101335f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b5f610c5a60ff5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080549050612200565b9050919050565b5f60655f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610caf611ad1565b610cb85f612252565b565b610132602052805f5260405f205f915054906101000a900460ff1681565b5f610d1e60cb5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20612315565b9050919050565b5f6060805f5f5f60605f5f1b609754148015610d4457505f5f1b609854145b610d83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7a906142e9565b60405180910390fd5b610d8b612321565b610d936123b1565b46305f5f1b5f67ffffffffffffffff811115610db257610db1614307565b5b604051908082528060200260200182016040528015610de05781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f610e50610eac565b65ffffffffffff168210610e99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e90906141f3565b60405180910390fd5b610ea561010083611efe565b9050919050565b5f610eb642612441565b905090565b606060698054610eca90614119565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef690614119565b8015610f415780601f10610f1857610100808354040283529160200191610f41565b820191905f5260205f20905b815481529060010190602001808311610f2457829003601f168201915b5050505050905090565b5f5f60ff5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054905090505f81146110215760ff5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001820381548110610fe957610fe8614334565b5b905f5260205f20015f0160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611023565b5f5b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b6101305481565b5f5f61105a611907565b90505f6110678286611633565b9050838110156110ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a3906143d1565b60405180910390fd5b6110b9828686840361190e565b60019250505092915050565b5f5f6110cf611907565b90506110dc818585611c81565b600191505092915050565b610133602052805f5260405f205f915054906101000a900460ff1681565b61110d611ad1565b6111178282612495565b5050565b8342111561115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115590614439565b60405180910390fd5b5f6111bf6111b77fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf89898960405160200161119c9493929190614457565b6040516020818303038152906040528051906020012061253c565b858585612555565b90506111ca8161257e565b861461120b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611202906144e4565b60405180910390fd5b61121581886120eb565b50505050505050565b5f5f60019054906101000a900460ff1615905080801561124e575060015f5f9054906101000a900460ff1660ff16105b8061127b575061125d306125d9565b15801561127a575060015f5f9054906101000a900460ff1660ff16145b5b6112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b190614572565b60405180910390fd5b60015f5f6101000a81548160ff021916908360ff16021790555080156112f55760015f60016101000a81548160ff0219169083151502179055505b6112fd6125fb565b6113716040518060400160405280600d81526020017f4261636b696e6720456967656e000000000000000000000000000000000000008152506040518060400160405280600681526020017f62454947454e0000000000000000000000000000000000000000000000000000815250612653565b61137a82612252565b6113b86040518060400160405280600681526020017f62454947454e00000000000000000000000000000000000000000000000000008152506126af565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101308190555061140b7f00000000000000000000000000000000000000000000000000000000000000006001611b4f565b6114367f00000000000000000000000000000000000000000000000000000000000000006001612495565b61146c7f00000000000000000000000000000000000000000000000000000000000000006b05686877afb5cbccbf73400061203e565b7fb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d2660405160405180910390a180156114f0575f5f60016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516114e791906145c9565b60405180910390a15b5050565b83421115611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e9061462c565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886115658c61257e565b8960405160200161157b9695949392919061464a565b6040516020818303038152906040528051906020012090505f61159d8261253c565b90505f6115ac82878787612555565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461161c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611613906146f3565b60405180910390fd5b6116278a8a8a61190e565b50505050505050505050565b5f60665f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6116bd611ad1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101305414611722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611719906147a7565b60405180910390fd5b5f610130819055507f2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f6460405160405180910390a1565b611760613859565b60ff5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208263ffffffff16815481106117b5576117b4614334565b5b905f5260205f20016040518060400160405290815f82015f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020015f820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b611869611ad1565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90614835565b60405180910390fd5b6118e081612252565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361197c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611973906148c3565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e190614951565b60405180910390fd5b8060665f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611ac49190613a61565b60405180910390a3505050565b611ad9611907565b73ffffffffffffffffffffffffffffffffffffffff16611af7610e1f565b73ffffffffffffffffffffffffffffffffffffffff1614611b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b44906149b9565b60405180910390fd5b565b806101315f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed284362227182604051611bea9190613938565b60405180910390a25050565b5f611c018484611633565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611c7b5781811015611c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6490614a21565b60405180910390fd5b611c7a848484840361190e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611cef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce690614aaf565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5490614b3d565b60405180910390fd5b611d6883838361273f565b5f60655f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611dec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de390614bcb565b60405180910390fd5b81810360655f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160655f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ed79190613a61565b60405180910390a3611eea84848461286c565b50505050565b5f611ef9612897565b905090565b5f5f838054905090505f5f90505f8290506005831115611f72575f611f22846128fa565b84611f2d9190614be9565b905085611f3a88836129f0565b5f015f9054906101000a900463ffffffff1663ffffffff161115611f6057809150611f70565b600181611f6d9190614176565b92505b505b5b80821015611fcf575f611f868383612a02565b905085611f9388836129f0565b5f015f9054906101000a900463ffffffff1663ffffffff161115611fb957809150611fc9565b600181611fc69190614176565b92505b50611f73565b5f811461201357611fe386600183036129f0565b5f0160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612015565b5f5b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935050505092915050565b6120488282612a27565b612050612b76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166120766108c6565b11156120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae90614c8c565b60405180910390fd5b6120c6610100612b9983612bae565b50505050565b6120d68282612e77565b6120e561010061303c83612bae565b50505050565b5f6120f583610ae8565b90505f61210184610c61565b90508260fe5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a46121fa828483613051565b50505050565b5f63ffffffff801682111561224a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224190614d1a565b60405180910390fd5b819050919050565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f815f01549050919050565b60606099805461233090614119565b80601f016020809104026020016040519081016040528092919081815260200182805461235c90614119565b80156123a75780601f1061237e576101008083540402835291602001916123a7565b820191905f5260205f20905b81548152906001019060200180831161238a57829003601f168201915b5050505050905090565b6060609a80546123c090614119565b80601f01602080910402602001604051908101604052809291908181526020018280546123ec90614119565b80156124375780601f1061240e57610100808354040283529160200191612437565b820191905f5260205f20905b81548152906001019060200180831161241a57829003601f168201915b5050505050905090565b5f65ffffffffffff801682111561248d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248490614da8565b60405180910390fd5b819050919050565b806101325f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b826040516125309190613938565b60405180910390a25050565b5f61254e612548611ef0565b83613241565b9050919050565b5f5f5f61256487878787613281565b9150915061257181613359565b8192505050949350505050565b5f5f60cb5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090506125c881612315565b91506125d3816134be565b50919050565b5f5f8273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff16612649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264090614e36565b60405180910390fd5b6126516134d2565b565b5f60019054906101000a900460ff166126a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269890614e36565b60405180910390fd5b6126ab8282613532565b5050565b5f60019054906101000a900460ff166126fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f490614e36565b60405180910390fd5b61273c816040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506135a4565b50565b61013054421161285c576101315f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16806127e657506101325f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff165b8061281c57505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b61285b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285290614eea565b60405180910390fd5b5b612867838383613628565b505050565b61287783838361362d565b61289261288384610ae8565b61288c84610ae8565b83613051565b505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6128c1613632565b6128c9613699565b46306040516020016128df959493929190614f08565b60405160208183030381529060405280519060200120905090565b5f5f820361290a575f90506129eb565b5f600161291684613700565b901c6001901b905060018184816129305761292f614f59565b5b048201901c9050600181848161294957612948614f59565b5b048201901c9050600181848161296257612961614f59565b5b048201901c9050600181848161297b5761297a614f59565b5b048201901c9050600181848161299457612993614f59565b5b048201901c905060018184816129ad576129ac614f59565b5b048201901c905060018184816129c6576129c5614f59565b5b048201901c90506129e7818285816129e1576129e0614f59565b5b046137d7565b9150505b919050565b5f825f528160205f2001905092915050565b5f6002828418612a129190614f86565b828416612a1f9190614176565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8c90615000565b60405180910390fd5b612aa05f838361273f565b8060675f828254612ab19190614176565b925050819055508060655f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612b5f9190613a61565b60405180910390a3612b725f838361286c565b5050565b5f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b5f8183612ba69190614176565b905092915050565b5f5f5f858054905090505f5f8214612c6e57612bcd87600184036129f0565b6040518060400160405290815f82015f9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020015f820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050612ca8565b60405180604001604052805f63ffffffff1681526020015f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505b905080602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169350612cdd84868863ffffffff16565b92505f82118015612d055750612cf1610eac565b65ffffffffffff16815f015163ffffffff16145b15612d7557612d13836137ef565b612d2088600185036129f0565b5f0160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550612e6d565b866040518060400160405280612d99612d8c610eac565b65ffffffffffff16612200565b63ffffffff168152602001612dad866137ef565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003905f5260205f20015f909190919091505f820151815f015f6101000a81548163ffffffff021916908363ffffffff1602179055506020820151815f0160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b5050935093915050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edc9061508e565b60405180910390fd5b612ef0825f8361273f565b5f60655f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015612f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f6b9061511c565b60405180910390fd5b81810360655f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160675f82825403925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516130249190613a61565b60405180910390a3613037835f8461286c565b505050565b5f81836130499190614be9565b905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561308c57505f81115b1561323c575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613166575f5f61310f60ff5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2061303c85612bae565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161315b92919061513a565b60405180910390a250505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461323b575f5f6131e460ff5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20612b9985612bae565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161323092919061513a565b60405180910390a250505b5b505050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f5f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0835f1c11156132b9575f600391509150613350565b5f6001878787876040515f81526020016040526040516132dc9493929190615161565b6020604051602081039080840390855afa1580156132fc573d5f5f3e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613348575f60019250925050613350565b805f92509250505b94509492505050565b5f600481111561336c5761336b6151a4565b5b81600481111561337f5761337e6151a4565b5b03156134bb5760016004811115613399576133986151a4565b5b8160048111156133ac576133ab6151a4565b5b036133ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e39061521b565b60405180910390fd5b60026004811115613400576133ff6151a4565b5b816004811115613413576134126151a4565b5b03613453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161344a90615283565b60405180910390fd5b60036004811115613467576134666151a4565b5b81600481111561347a576134796151a4565b5b036134ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b190615311565b60405180910390fd5b5b50565b6001815f015f828254019250508190555050565b5f60019054906101000a900460ff16613520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161351790614e36565b60405180910390fd5b61353061352b611907565b612252565b565b5f60019054906101000a900460ff16613580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161357790614e36565b60405180910390fd5b816068908161358f91906154c6565b50806069908161359f91906154c6565b505050565b5f60019054906101000a900460ff166135f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135e990614e36565b60405180910390fd5b816099908161360191906154c6565b5080609a908161361191906154c6565b505f5f1b6097819055505f5f1b6098819055505050565b505050565b505050565b5f5f61363c612321565b90505f81511115613657578080519060200120915050613696565b5f60975490505f5f1b8114613670578092505050613696565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470925050505b90565b5f5f6136a36123b1565b90505f815111156136be5780805190602001209150506136fd565b5f60985490505f5f1b81146136d75780925050506136fd565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470925050505b90565b5f5f5f90505f608084901c111561371f57608083901c92506080810190505b5f604084901c111561373957604083901c92506040810190505b5f602084901c111561375357602083901c92506020810190505b5f601084901c111561376d57601083901c92506010810190505b5f600884901c111561378757600883901c92506008810190505b5f600484901c11156137a157600483901c92506004810190505b5f600284901c11156137bb57600283901c92506002810190505b5f600184901c11156137ce576001810190505b80915050919050565b5f8183106137e557816137e7565b825b905092915050565b5f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016821115613851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384890615605565b60405180910390fd5b819050919050565b60405180604001604052805f63ffffffff1681526020015f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6138c282613899565b9050919050565b6138d2816138b8565b81146138dc575f5ffd5b50565b5f813590506138ed816138c9565b92915050565b5f6020828403121561390857613907613895565b5b5f613915848285016138df565b91505092915050565b5f8115159050919050565b6139328161391e565b82525050565b5f60208201905061394b5f830184613929565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61399382613951565b61399d818561395b565b93506139ad81856020860161396b565b6139b681613979565b840191505092915050565b5f6020820190508181035f8301526139d98184613989565b905092915050565b5f819050919050565b6139f3816139e1565b81146139fd575f5ffd5b50565b5f81359050613a0e816139ea565b92915050565b5f5f60408385031215613a2a57613a29613895565b5b5f613a37858286016138df565b9250506020613a4885828601613a00565b9150509250929050565b613a5b816139e1565b82525050565b5f602082019050613a745f830184613a52565b92915050565b613a838161391e565b8114613a8d575f5ffd5b50565b5f81359050613a9e81613a7a565b92915050565b5f5f60408385031215613aba57613ab9613895565b5b5f613ac7858286016138df565b9250506020613ad885828601613a90565b9150509250929050565b5f5f5f60608486031215613af957613af8613895565b5b5f613b06868287016138df565b9350506020613b17868287016138df565b9250506040613b2886828701613a00565b9150509250925092565b5f60ff82169050919050565b613b4781613b32565b82525050565b5f602082019050613b605f830184613b3e565b92915050565b5f819050919050565b613b7881613b66565b82525050565b5f602082019050613b915f830184613b6f565b92915050565b5f60208284031215613bac57613bab613895565b5b5f613bb984828501613a00565b91505092915050565b613bcb816138b8565b82525050565b5f602082019050613be45f830184613bc2565b92915050565b5f63ffffffff82169050919050565b613c0281613bea565b82525050565b5f602082019050613c1b5f830184613bf9565b92915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b613c5581613c21565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b613c8d816139e1565b82525050565b5f613c9e8383613c84565b60208301905092915050565b5f602082019050919050565b5f613cc082613c5b565b613cca8185613c65565b9350613cd583613c75565b805f5b83811015613d05578151613cec8882613c93565b9750613cf783613caa565b925050600181019050613cd8565b5085935050505092915050565b5f60e082019050613d255f83018a613c4c565b8181036020830152613d378189613989565b90508181036040830152613d4b8188613989565b9050613d5a6060830187613a52565b613d676080830186613bc2565b613d7460a0830185613b6f565b81810360c0830152613d868184613cb6565b905098975050505050505050565b5f65ffffffffffff82169050919050565b613dae81613d94565b82525050565b5f602082019050613dc75f830184613da5565b92915050565b613dd681613b32565b8114613de0575f5ffd5b50565b5f81359050613df181613dcd565b92915050565b613e0081613b66565b8114613e0a575f5ffd5b50565b5f81359050613e1b81613df7565b92915050565b5f5f5f5f5f5f60c08789031215613e3b57613e3a613895565b5b5f613e4889828a016138df565b9650506020613e5989828a01613a00565b9550506040613e6a89828a01613a00565b9450506060613e7b89828a01613de3565b9350506080613e8c89828a01613e0d565b92505060a0613e9d89828a01613e0d565b9150509295509295509295565b5f5f5f5f5f5f5f60e0888a031215613ec557613ec4613895565b5b5f613ed28a828b016138df565b9750506020613ee38a828b016138df565b9650506040613ef48a828b01613a00565b9550506060613f058a828b01613a00565b9450506080613f168a828b01613de3565b93505060a0613f278a828b01613e0d565b92505060c0613f388a828b01613e0d565b91505092959891949750929550565b5f5f60408385031215613f5d57613f5c613895565b5b5f613f6a858286016138df565b9250506020613f7b858286016138df565b9150509250929050565b613f8e81613bea565b8114613f98575f5ffd5b50565b5f81359050613fa981613f85565b92915050565b5f5f60408385031215613fc557613fc4613895565b5b5f613fd2858286016138df565b9250506020613fe385828601613f9b565b9150509250929050565b613ff681613bea565b82525050565b5f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b61402c81613ffc565b82525050565b604082015f8201516140465f850182613fed565b5060208201516140596020850182614023565b50505050565b5f6040820190506140725f830184614032565b92915050565b5f819050919050565b5f61409b61409661409184613899565b614078565b613899565b9050919050565b5f6140ac82614081565b9050919050565b5f6140bd826140a2565b9050919050565b6140cd816140b3565b82525050565b5f6020820190506140e65f8301846140c4565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061413057607f821691505b602082108103614143576141426140ec565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614180826139e1565b915061418b836139e1565b92508282019050808211156141a3576141a2614149565b5b92915050565b7f4552433230566f7465733a20667574757265206c6f6f6b7570000000000000005f82015250565b5f6141dd60198361395b565b91506141e8826141a9565b602082019050919050565b5f6020820190508181035f83015261420a816141d1565b9050919050565b7f4261636b696e67456967656e2e6d696e743a2063616c6c6572206973206e6f745f8201527f2061206d696e7465720000000000000000000000000000000000000000000000602082015250565b5f61426b60298361395b565b915061427682614211565b604082019050919050565b5f6020820190508181035f8301526142988161425f565b9050919050565b7f4549503731323a20556e696e697469616c697a656400000000000000000000005f82015250565b5f6142d360158361395b565b91506142de8261429f565b602082019050919050565b5f6020820190508181035f830152614300816142c7565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f6143bb60258361395b565b91506143c682614361565b604082019050919050565b5f6020820190508181035f8301526143e8816143af565b9050919050565b7f4552433230566f7465733a207369676e617475726520657870697265640000005f82015250565b5f614423601d8361395b565b915061442e826143ef565b602082019050919050565b5f6020820190508181035f83015261445081614417565b9050919050565b5f60808201905061446a5f830187613b6f565b6144776020830186613bc2565b6144846040830185613a52565b6144916060830184613a52565b95945050505050565b7f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000005f82015250565b5f6144ce60198361395b565b91506144d98261449a565b602082019050919050565b5f6020820190508181035f8301526144fb816144c2565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f61455c602e8361395b565b915061456782614502565b604082019050919050565b5f6020820190508181035f83015261458981614550565b9050919050565b5f819050919050565b5f6145b36145ae6145a984614590565b614078565b613b32565b9050919050565b6145c381614599565b82525050565b5f6020820190506145dc5f8301846145ba565b92915050565b7f45524332305065726d69743a206578706972656420646561646c696e650000005f82015250565b5f614616601d8361395b565b9150614621826145e2565b602082019050919050565b5f6020820190508181035f8301526146438161460a565b9050919050565b5f60c08201905061465d5f830189613b6f565b61466a6020830188613bc2565b6146776040830187613bc2565b6146846060830186613a52565b6146916080830185613a52565b61469e60a0830184613a52565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e617475726500005f82015250565b5f6146dd601e8361395b565b91506146e8826146a9565b602082019050919050565b5f6020820190508181035f83015261470a816146d1565b9050919050565b7f4261636b696e67456967656e2e64697361626c655472616e73666572526573745f8201527f72696374696f6e733a207472616e73666572207265737472696374696f6e732060208201527f61726520616c72656164792064697361626c6564000000000000000000000000604082015250565b5f61479160548361395b565b915061479c82614711565b606082019050919050565b5f6020820190508181035f8301526147be81614785565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61481f60268361395b565b915061482a826147c5565b604082019050919050565b5f6020820190508181035f83015261484c81614813565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6148ad60248361395b565b91506148b882614853565b604082019050919050565b5f6020820190508181035f8301526148da816148a1565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f61493b60228361395b565b9150614946826148e1565b604082019050919050565b5f6020820190508181035f8301526149688161492f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6149a360208361395b565b91506149ae8261496f565b602082019050919050565b5f6020820190508181035f8301526149d081614997565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f614a0b601d8361395b565b9150614a16826149d7565b602082019050919050565b5f6020820190508181035f830152614a38816149ff565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f614a9960258361395b565b9150614aa482614a3f565b604082019050919050565b5f6020820190508181035f830152614ac681614a8d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f614b2760238361395b565b9150614b3282614acd565b604082019050919050565b5f6020820190508181035f830152614b5481614b1b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f614bb560268361395b565b9150614bc082614b5b565b604082019050919050565b5f6020820190508181035f830152614be281614ba9565b9050919050565b5f614bf3826139e1565b9150614bfe836139e1565b9250828203905081811115614c1657614c15614149565b5b92915050565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f5f8201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b5f614c7660308361395b565b9150614c8182614c1c565b604082019050919050565b5f6020820190508181035f830152614ca381614c6a565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e20335f8201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b5f614d0460268361395b565b9150614d0f82614caa565b604082019050919050565b5f6020820190508181035f830152614d3181614cf8565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e20345f8201527f3820626974730000000000000000000000000000000000000000000000000000602082015250565b5f614d9260268361395b565b9150614d9d82614d38565b604082019050919050565b5f6020820190508181035f830152614dbf81614d86565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f614e20602b8361395b565b9150614e2b82614dc6565b604082019050919050565b5f6020820190508181035f830152614e4d81614e14565b9050919050565b7f4261636b696e67456967656e2e5f6265666f7265546f6b656e5472616e7366655f8201527f723a2066726f6d206f7220746f206d7573742062652077686974656c6973746560208201527f6400000000000000000000000000000000000000000000000000000000000000604082015250565b5f614ed460418361395b565b9150614edf82614e54565b606082019050919050565b5f6020820190508181035f830152614f0181614ec8565b9050919050565b5f60a082019050614f1b5f830188613b6f565b614f286020830187613b6f565b614f356040830186613b6f565b614f426060830185613a52565b614f4f6080830184613bc2565b9695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614f90826139e1565b9150614f9b836139e1565b925082614fab57614faa614f59565b5b828204905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f614fea601f8361395b565b9150614ff582614fb6565b602082019050919050565b5f6020820190508181035f83015261501781614fde565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f61507860218361395b565b91506150838261501e565b604082019050919050565b5f6020820190508181035f8301526150a58161506c565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f61510660228361395b565b9150615111826150ac565b604082019050919050565b5f6020820190508181035f830152615133816150fa565b9050919050565b5f60408201905061514d5f830185613a52565b61515a6020830184613a52565b9392505050565b5f6080820190506151745f830187613b6f565b6151816020830186613b3e565b61518e6040830185613b6f565b61519b6060830184613b6f565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f45434453413a20696e76616c6964207369676e617475726500000000000000005f82015250565b5f61520560188361395b565b9150615210826151d1565b602082019050919050565b5f6020820190508181035f830152615232816151f9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e677468005f82015250565b5f61526d601f8361395b565b915061527882615239565b602082019050919050565b5f6020820190508181035f83015261529a81615261565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c5f8201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b5f6152fb60228361395b565b9150615306826152a1565b604082019050919050565b5f6020820190508181035f830152615328816152ef565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261538b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82615350565b6153958683615350565b95508019841693508086168417925050509392505050565b5f6153c76153c26153bd846139e1565b614078565b6139e1565b9050919050565b5f819050919050565b6153e0836153ad565b6153f46153ec826153ce565b84845461535c565b825550505050565b5f5f905090565b61540b6153fc565b6154168184846153d7565b505050565b5b818110156154395761542e5f82615403565b60018101905061541c565b5050565b601f82111561547e5761544f8161532f565b61545884615341565b81016020851015615467578190505b61547b61547385615341565b83018261541b565b50505b505050565b5f82821c905092915050565b5f61549e5f1984600802615483565b1980831691505092915050565b5f6154b6838361548f565b9150826002028217905092915050565b6154cf82613951565b67ffffffffffffffff8111156154e8576154e7614307565b5b6154f28254614119565b6154fd82828561543d565b5f60209050601f83116001811461552e575f841561551c578287015190505b61552685826154ab565b86555061558d565b601f19841661553c8661532f565b5f5b828110156155635784890151825560018201915060208501945060208101905061553e565b86831015615580578489015161557c601f89168261548f565b8355505b6001600288020188555050505b505050505050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e20325f8201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b5f6155ef60278361395b565b91506155fa82615595565b604082019050919050565b5f6020820190508181035f83015261561c816155e3565b905091905056fea2646970667358221220a3bf83e8609c7520c6c9efc527a92aaaccd3e1ffbb422f73bb4e7a8832183d2d64736f6c634300081b0033",
}

// BackingEigenABI is the input ABI used to generate the binding from.
// Deprecated: Use BackingEigenMetaData.ABI instead.
var BackingEigenABI = BackingEigenMetaData.ABI

// BackingEigenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BackingEigenMetaData.Bin instead.
var BackingEigenBin = BackingEigenMetaData.Bin

// DeployBackingEigen deploys a new Ethereum contract, binding an instance of BackingEigen to it.
func DeployBackingEigen(auth *bind.TransactOpts, backend bind.ContractBackend, _EIGEN common.Address) (common.Address, *types.Transaction, *BackingEigen, error) {
	parsed, err := BackingEigenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BackingEigenBin), backend, _EIGEN)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BackingEigen{BackingEigenCaller: BackingEigenCaller{contract: contract}, BackingEigenTransactor: BackingEigenTransactor{contract: contract}, BackingEigenFilterer: BackingEigenFilterer{contract: contract}}, nil
}

// BackingEigen is an auto generated Go binding around an Ethereum contract.
type BackingEigen struct {
	BackingEigenCaller     // Read-only binding to the contract
	BackingEigenTransactor // Write-only binding to the contract
	BackingEigenFilterer   // Log filterer for contract events
}

// BackingEigenCaller is an auto generated read-only Go binding around an Ethereum contract.
type BackingEigenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BackingEigenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BackingEigenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BackingEigenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BackingEigenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BackingEigenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BackingEigenSession struct {
	Contract     *BackingEigen     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BackingEigenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BackingEigenCallerSession struct {
	Contract *BackingEigenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// BackingEigenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BackingEigenTransactorSession struct {
	Contract     *BackingEigenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BackingEigenRaw is an auto generated low-level Go binding around an Ethereum contract.
type BackingEigenRaw struct {
	Contract *BackingEigen // Generic contract binding to access the raw methods on
}

// BackingEigenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BackingEigenCallerRaw struct {
	Contract *BackingEigenCaller // Generic read-only contract binding to access the raw methods on
}

// BackingEigenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BackingEigenTransactorRaw struct {
	Contract *BackingEigenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBackingEigen creates a new instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigen(address common.Address, backend bind.ContractBackend) (*BackingEigen, error) {
	contract, err := bindBackingEigen(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BackingEigen{BackingEigenCaller: BackingEigenCaller{contract: contract}, BackingEigenTransactor: BackingEigenTransactor{contract: contract}, BackingEigenFilterer: BackingEigenFilterer{contract: contract}}, nil
}

// NewBackingEigenCaller creates a new read-only instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigenCaller(address common.Address, caller bind.ContractCaller) (*BackingEigenCaller, error) {
	contract, err := bindBackingEigen(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BackingEigenCaller{contract: contract}, nil
}

// NewBackingEigenTransactor creates a new write-only instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigenTransactor(address common.Address, transactor bind.ContractTransactor) (*BackingEigenTransactor, error) {
	contract, err := bindBackingEigen(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BackingEigenTransactor{contract: contract}, nil
}

// NewBackingEigenFilterer creates a new log filterer instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigenFilterer(address common.Address, filterer bind.ContractFilterer) (*BackingEigenFilterer, error) {
	contract, err := bindBackingEigen(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BackingEigenFilterer{contract: contract}, nil
}

// bindBackingEigen binds a generic wrapper to an already deployed contract.
func bindBackingEigen(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BackingEigenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BackingEigen *BackingEigenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BackingEigen.Contract.BackingEigenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BackingEigen *BackingEigenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.Contract.BackingEigenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BackingEigen *BackingEigenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BackingEigen.Contract.BackingEigenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BackingEigen *BackingEigenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BackingEigen.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BackingEigen *BackingEigenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BackingEigen *BackingEigenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BackingEigen.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_BackingEigen *BackingEigenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_BackingEigen *BackingEigenSession) CLOCKMODE() (string, error) {
	return _BackingEigen.Contract.CLOCKMODE(&_BackingEigen.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_BackingEigen *BackingEigenCallerSession) CLOCKMODE() (string, error) {
	return _BackingEigen.Contract.CLOCKMODE(&_BackingEigen.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BackingEigen *BackingEigenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BackingEigen *BackingEigenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _BackingEigen.Contract.DOMAINSEPARATOR(&_BackingEigen.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BackingEigen *BackingEigenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _BackingEigen.Contract.DOMAINSEPARATOR(&_BackingEigen.CallOpts)
}

// EIGEN is a free data retrieval call binding the contract method 0xfdc371ce.
//
// Solidity: function EIGEN() view returns(address)
func (_BackingEigen *BackingEigenCaller) EIGEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "EIGEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EIGEN is a free data retrieval call binding the contract method 0xfdc371ce.
//
// Solidity: function EIGEN() view returns(address)
func (_BackingEigen *BackingEigenSession) EIGEN() (common.Address, error) {
	return _BackingEigen.Contract.EIGEN(&_BackingEigen.CallOpts)
}

// EIGEN is a free data retrieval call binding the contract method 0xfdc371ce.
//
// Solidity: function EIGEN() view returns(address)
func (_BackingEigen *BackingEigenCallerSession) EIGEN() (common.Address, error) {
	return _BackingEigen.Contract.EIGEN(&_BackingEigen.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BackingEigen *BackingEigenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Allowance(&_BackingEigen.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Allowance(&_BackingEigen.CallOpts, owner, spender)
}

// AllowedFrom is a free data retrieval call binding the contract method 0x0455e694.
//
// Solidity: function allowedFrom(address ) view returns(bool)
func (_BackingEigen *BackingEigenCaller) AllowedFrom(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "allowedFrom", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedFrom is a free data retrieval call binding the contract method 0x0455e694.
//
// Solidity: function allowedFrom(address ) view returns(bool)
func (_BackingEigen *BackingEigenSession) AllowedFrom(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedFrom(&_BackingEigen.CallOpts, arg0)
}

// AllowedFrom is a free data retrieval call binding the contract method 0x0455e694.
//
// Solidity: function allowedFrom(address ) view returns(bool)
func (_BackingEigen *BackingEigenCallerSession) AllowedFrom(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedFrom(&_BackingEigen.CallOpts, arg0)
}

// AllowedTo is a free data retrieval call binding the contract method 0x78aa33ba.
//
// Solidity: function allowedTo(address ) view returns(bool)
func (_BackingEigen *BackingEigenCaller) AllowedTo(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "allowedTo", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedTo is a free data retrieval call binding the contract method 0x78aa33ba.
//
// Solidity: function allowedTo(address ) view returns(bool)
func (_BackingEigen *BackingEigenSession) AllowedTo(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedTo(&_BackingEigen.CallOpts, arg0)
}

// AllowedTo is a free data retrieval call binding the contract method 0x78aa33ba.
//
// Solidity: function allowedTo(address ) view returns(bool)
func (_BackingEigen *BackingEigenCallerSession) AllowedTo(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedTo(&_BackingEigen.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BackingEigen *BackingEigenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.BalanceOf(&_BackingEigen.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.BalanceOf(&_BackingEigen.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BackingEigen *BackingEigenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BackingEigen *BackingEigenSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _BackingEigen.Contract.Checkpoints(&_BackingEigen.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BackingEigen *BackingEigenCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _BackingEigen.Contract.Checkpoints(&_BackingEigen.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BackingEigen *BackingEigenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BackingEigen *BackingEigenSession) Clock() (*big.Int, error) {
	return _BackingEigen.Contract.Clock(&_BackingEigen.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BackingEigen *BackingEigenCallerSession) Clock() (*big.Int, error) {
	return _BackingEigen.Contract.Clock(&_BackingEigen.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BackingEigen *BackingEigenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BackingEigen *BackingEigenSession) Decimals() (uint8, error) {
	return _BackingEigen.Contract.Decimals(&_BackingEigen.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BackingEigen *BackingEigenCallerSession) Decimals() (uint8, error) {
	return _BackingEigen.Contract.Decimals(&_BackingEigen.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BackingEigen *BackingEigenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BackingEigen *BackingEigenSession) Delegates(account common.Address) (common.Address, error) {
	return _BackingEigen.Contract.Delegates(&_BackingEigen.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BackingEigen *BackingEigenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _BackingEigen.Contract.Delegates(&_BackingEigen.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BackingEigen *BackingEigenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BackingEigen *BackingEigenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BackingEigen.Contract.Eip712Domain(&_BackingEigen.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BackingEigen *BackingEigenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BackingEigen.Contract.Eip712Domain(&_BackingEigen.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastTotalSupply(&_BackingEigen.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastTotalSupply(&_BackingEigen.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastVotes(&_BackingEigen.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastVotes(&_BackingEigen.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BackingEigen *BackingEigenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.GetVotes(&_BackingEigen.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.GetVotes(&_BackingEigen.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address ) view returns(bool)
func (_BackingEigen *BackingEigenCaller) IsMinter(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "isMinter", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address ) view returns(bool)
func (_BackingEigen *BackingEigenSession) IsMinter(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.IsMinter(&_BackingEigen.CallOpts, arg0)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address ) view returns(bool)
func (_BackingEigen *BackingEigenCallerSession) IsMinter(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.IsMinter(&_BackingEigen.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BackingEigen *BackingEigenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BackingEigen *BackingEigenSession) Name() (string, error) {
	return _BackingEigen.Contract.Name(&_BackingEigen.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BackingEigen *BackingEigenCallerSession) Name() (string, error) {
	return _BackingEigen.Contract.Name(&_BackingEigen.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BackingEigen *BackingEigenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Nonces(&_BackingEigen.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Nonces(&_BackingEigen.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BackingEigen *BackingEigenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BackingEigen *BackingEigenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _BackingEigen.Contract.NumCheckpoints(&_BackingEigen.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BackingEigen *BackingEigenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _BackingEigen.Contract.NumCheckpoints(&_BackingEigen.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BackingEigen *BackingEigenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BackingEigen *BackingEigenSession) Owner() (common.Address, error) {
	return _BackingEigen.Contract.Owner(&_BackingEigen.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BackingEigen *BackingEigenCallerSession) Owner() (common.Address, error) {
	return _BackingEigen.Contract.Owner(&_BackingEigen.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BackingEigen *BackingEigenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BackingEigen *BackingEigenSession) Symbol() (string, error) {
	return _BackingEigen.Contract.Symbol(&_BackingEigen.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BackingEigen *BackingEigenCallerSession) Symbol() (string, error) {
	return _BackingEigen.Contract.Symbol(&_BackingEigen.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BackingEigen *BackingEigenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BackingEigen *BackingEigenSession) TotalSupply() (*big.Int, error) {
	return _BackingEigen.Contract.TotalSupply(&_BackingEigen.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) TotalSupply() (*big.Int, error) {
	return _BackingEigen.Contract.TotalSupply(&_BackingEigen.CallOpts)
}

// TransferRestrictionsDisabledAfter is a free data retrieval call binding the contract method 0x9aec4bae.
//
// Solidity: function transferRestrictionsDisabledAfter() view returns(uint256)
func (_BackingEigen *BackingEigenCaller) TransferRestrictionsDisabledAfter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "transferRestrictionsDisabledAfter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransferRestrictionsDisabledAfter is a free data retrieval call binding the contract method 0x9aec4bae.
//
// Solidity: function transferRestrictionsDisabledAfter() view returns(uint256)
func (_BackingEigen *BackingEigenSession) TransferRestrictionsDisabledAfter() (*big.Int, error) {
	return _BackingEigen.Contract.TransferRestrictionsDisabledAfter(&_BackingEigen.CallOpts)
}

// TransferRestrictionsDisabledAfter is a free data retrieval call binding the contract method 0x9aec4bae.
//
// Solidity: function transferRestrictionsDisabledAfter() view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) TransferRestrictionsDisabledAfter() (*big.Int, error) {
	return _BackingEigen.Contract.TransferRestrictionsDisabledAfter(&_BackingEigen.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Approve(&_BackingEigen.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Approve(&_BackingEigen.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BackingEigen *BackingEigenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Burn(&_BackingEigen.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Burn(&_BackingEigen.TransactOpts, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BackingEigen *BackingEigenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.DecreaseAllowance(&_BackingEigen.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.DecreaseAllowance(&_BackingEigen.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BackingEigen *BackingEigenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BackingEigen *BackingEigenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Delegate(&_BackingEigen.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BackingEigen *BackingEigenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Delegate(&_BackingEigen.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.DelegateBySig(&_BackingEigen.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.DelegateBySig(&_BackingEigen.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DisableTransferRestrictions is a paid mutator transaction binding the contract method 0xeb415f45.
//
// Solidity: function disableTransferRestrictions() returns()
func (_BackingEigen *BackingEigenTransactor) DisableTransferRestrictions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "disableTransferRestrictions")
}

// DisableTransferRestrictions is a paid mutator transaction binding the contract method 0xeb415f45.
//
// Solidity: function disableTransferRestrictions() returns()
func (_BackingEigen *BackingEigenSession) DisableTransferRestrictions() (*types.Transaction, error) {
	return _BackingEigen.Contract.DisableTransferRestrictions(&_BackingEigen.TransactOpts)
}

// DisableTransferRestrictions is a paid mutator transaction binding the contract method 0xeb415f45.
//
// Solidity: function disableTransferRestrictions() returns()
func (_BackingEigen *BackingEigenTransactorSession) DisableTransferRestrictions() (*types.Transaction, error) {
	return _BackingEigen.Contract.DisableTransferRestrictions(&_BackingEigen.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BackingEigen *BackingEigenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.IncreaseAllowance(&_BackingEigen.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.IncreaseAllowance(&_BackingEigen.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_BackingEigen *BackingEigenTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "initialize", initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_BackingEigen *BackingEigenSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Initialize(&_BackingEigen.TransactOpts, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_BackingEigen *BackingEigenTransactorSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Initialize(&_BackingEigen.TransactOpts, initialOwner)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_BackingEigen *BackingEigenSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Mint(&_BackingEigen.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Mint(&_BackingEigen.TransactOpts, to, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.Permit(&_BackingEigen.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.Permit(&_BackingEigen.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BackingEigen *BackingEigenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BackingEigen *BackingEigenSession) RenounceOwnership() (*types.Transaction, error) {
	return _BackingEigen.Contract.RenounceOwnership(&_BackingEigen.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BackingEigen *BackingEigenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BackingEigen.Contract.RenounceOwnership(&_BackingEigen.TransactOpts)
}

// SetAllowedFrom is a paid mutator transaction binding the contract method 0x1ffacdef.
//
// Solidity: function setAllowedFrom(address from, bool isAllowedFrom) returns()
func (_BackingEigen *BackingEigenTransactor) SetAllowedFrom(opts *bind.TransactOpts, from common.Address, isAllowedFrom bool) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "setAllowedFrom", from, isAllowedFrom)
}

// SetAllowedFrom is a paid mutator transaction binding the contract method 0x1ffacdef.
//
// Solidity: function setAllowedFrom(address from, bool isAllowedFrom) returns()
func (_BackingEigen *BackingEigenSession) SetAllowedFrom(from common.Address, isAllowedFrom bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedFrom(&_BackingEigen.TransactOpts, from, isAllowedFrom)
}

// SetAllowedFrom is a paid mutator transaction binding the contract method 0x1ffacdef.
//
// Solidity: function setAllowedFrom(address from, bool isAllowedFrom) returns()
func (_BackingEigen *BackingEigenTransactorSession) SetAllowedFrom(from common.Address, isAllowedFrom bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedFrom(&_BackingEigen.TransactOpts, from, isAllowedFrom)
}

// SetAllowedTo is a paid mutator transaction binding the contract method 0xb8c25594.
//
// Solidity: function setAllowedTo(address to, bool isAllowedTo) returns()
func (_BackingEigen *BackingEigenTransactor) SetAllowedTo(opts *bind.TransactOpts, to common.Address, isAllowedTo bool) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "setAllowedTo", to, isAllowedTo)
}

// SetAllowedTo is a paid mutator transaction binding the contract method 0xb8c25594.
//
// Solidity: function setAllowedTo(address to, bool isAllowedTo) returns()
func (_BackingEigen *BackingEigenSession) SetAllowedTo(to common.Address, isAllowedTo bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedTo(&_BackingEigen.TransactOpts, to, isAllowedTo)
}

// SetAllowedTo is a paid mutator transaction binding the contract method 0xb8c25594.
//
// Solidity: function setAllowedTo(address to, bool isAllowedTo) returns()
func (_BackingEigen *BackingEigenTransactorSession) SetAllowedTo(to common.Address, isAllowedTo bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedTo(&_BackingEigen.TransactOpts, to, isAllowedTo)
}

// SetIsMinter is a paid mutator transaction binding the contract method 0x66eb399f.
//
// Solidity: function setIsMinter(address minterAddress, bool newStatus) returns()
func (_BackingEigen *BackingEigenTransactor) SetIsMinter(opts *bind.TransactOpts, minterAddress common.Address, newStatus bool) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "setIsMinter", minterAddress, newStatus)
}

// SetIsMinter is a paid mutator transaction binding the contract method 0x66eb399f.
//
// Solidity: function setIsMinter(address minterAddress, bool newStatus) returns()
func (_BackingEigen *BackingEigenSession) SetIsMinter(minterAddress common.Address, newStatus bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetIsMinter(&_BackingEigen.TransactOpts, minterAddress, newStatus)
}

// SetIsMinter is a paid mutator transaction binding the contract method 0x66eb399f.
//
// Solidity: function setIsMinter(address minterAddress, bool newStatus) returns()
func (_BackingEigen *BackingEigenTransactorSession) SetIsMinter(minterAddress common.Address, newStatus bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetIsMinter(&_BackingEigen.TransactOpts, minterAddress, newStatus)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Transfer(&_BackingEigen.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Transfer(&_BackingEigen.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferFrom(&_BackingEigen.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferFrom(&_BackingEigen.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BackingEigen *BackingEigenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BackingEigen *BackingEigenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferOwnership(&_BackingEigen.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BackingEigen *BackingEigenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferOwnership(&_BackingEigen.TransactOpts, newOwner)
}

// BackingEigenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the BackingEigen contract.
type BackingEigenApprovalIterator struct {
	Event *BackingEigenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenApproval represents a Approval event raised by the BackingEigen contract.
type BackingEigenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BackingEigen *BackingEigenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*BackingEigenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenApprovalIterator{contract: _BackingEigen.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BackingEigen *BackingEigenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *BackingEigenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenApproval)
				if err := _BackingEigen.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BackingEigen *BackingEigenFilterer) ParseApproval(log types.Log) (*BackingEigenApproval, error) {
	event := new(BackingEigenApproval)
	if err := _BackingEigen.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenBackedIterator is returned from FilterBacked and is used to iterate over the raw logs and unpacked data for Backed events raised by the BackingEigen contract.
type BackingEigenBackedIterator struct {
	Event *BackingEigenBacked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenBackedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenBacked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenBacked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenBackedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenBackedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenBacked represents a Backed event raised by the BackingEigen contract.
type BackingEigenBacked struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBacked is a free log retrieval operation binding the contract event 0xb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d26.
//
// Solidity: event Backed()
func (_BackingEigen *BackingEigenFilterer) FilterBacked(opts *bind.FilterOpts) (*BackingEigenBackedIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Backed")
	if err != nil {
		return nil, err
	}
	return &BackingEigenBackedIterator{contract: _BackingEigen.contract, event: "Backed", logs: logs, sub: sub}, nil
}

// WatchBacked is a free log subscription operation binding the contract event 0xb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d26.
//
// Solidity: event Backed()
func (_BackingEigen *BackingEigenFilterer) WatchBacked(opts *bind.WatchOpts, sink chan<- *BackingEigenBacked) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Backed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenBacked)
				if err := _BackingEigen.contract.UnpackLog(event, "Backed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBacked is a log parse operation binding the contract event 0xb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d26.
//
// Solidity: event Backed()
func (_BackingEigen *BackingEigenFilterer) ParseBacked(log types.Log) (*BackingEigenBacked, error) {
	event := new(BackingEigenBacked)
	if err := _BackingEigen.contract.UnpackLog(event, "Backed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the BackingEigen contract.
type BackingEigenDelegateChangedIterator struct {
	Event *BackingEigenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenDelegateChanged represents a DelegateChanged event raised by the BackingEigen contract.
type BackingEigenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BackingEigen *BackingEigenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*BackingEigenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenDelegateChangedIterator{contract: _BackingEigen.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BackingEigen *BackingEigenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *BackingEigenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenDelegateChanged)
				if err := _BackingEigen.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BackingEigen *BackingEigenFilterer) ParseDelegateChanged(log types.Log) (*BackingEigenDelegateChanged, error) {
	event := new(BackingEigenDelegateChanged)
	if err := _BackingEigen.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the BackingEigen contract.
type BackingEigenDelegateVotesChangedIterator struct {
	Event *BackingEigenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenDelegateVotesChanged represents a DelegateVotesChanged event raised by the BackingEigen contract.
type BackingEigenDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BackingEigen *BackingEigenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*BackingEigenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenDelegateVotesChangedIterator{contract: _BackingEigen.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BackingEigen *BackingEigenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *BackingEigenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenDelegateVotesChanged)
				if err := _BackingEigen.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BackingEigen *BackingEigenFilterer) ParseDelegateVotesChanged(log types.Log) (*BackingEigenDelegateVotesChanged, error) {
	event := new(BackingEigenDelegateVotesChanged)
	if err := _BackingEigen.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BackingEigen contract.
type BackingEigenEIP712DomainChangedIterator struct {
	Event *BackingEigenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenEIP712DomainChanged represents a EIP712DomainChanged event raised by the BackingEigen contract.
type BackingEigenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BackingEigen *BackingEigenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BackingEigenEIP712DomainChangedIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BackingEigenEIP712DomainChangedIterator{contract: _BackingEigen.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BackingEigen *BackingEigenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BackingEigenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenEIP712DomainChanged)
				if err := _BackingEigen.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BackingEigen *BackingEigenFilterer) ParseEIP712DomainChanged(log types.Log) (*BackingEigenEIP712DomainChanged, error) {
	event := new(BackingEigenEIP712DomainChanged)
	if err := _BackingEigen.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BackingEigen contract.
type BackingEigenInitializedIterator struct {
	Event *BackingEigenInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenInitialized represents a Initialized event raised by the BackingEigen contract.
type BackingEigenInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BackingEigen *BackingEigenFilterer) FilterInitialized(opts *bind.FilterOpts) (*BackingEigenInitializedIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BackingEigenInitializedIterator{contract: _BackingEigen.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BackingEigen *BackingEigenFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BackingEigenInitialized) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenInitialized)
				if err := _BackingEigen.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BackingEigen *BackingEigenFilterer) ParseInitialized(log types.Log) (*BackingEigenInitialized, error) {
	event := new(BackingEigenInitialized)
	if err := _BackingEigen.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenIsMinterModifiedIterator is returned from FilterIsMinterModified and is used to iterate over the raw logs and unpacked data for IsMinterModified events raised by the BackingEigen contract.
type BackingEigenIsMinterModifiedIterator struct {
	Event *BackingEigenIsMinterModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenIsMinterModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenIsMinterModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenIsMinterModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenIsMinterModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenIsMinterModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenIsMinterModified represents a IsMinterModified event raised by the BackingEigen contract.
type BackingEigenIsMinterModified struct {
	MinterAddress common.Address
	NewStatus     bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterIsMinterModified is a free log retrieval operation binding the contract event 0x0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde.
//
// Solidity: event IsMinterModified(address indexed minterAddress, bool newStatus)
func (_BackingEigen *BackingEigenFilterer) FilterIsMinterModified(opts *bind.FilterOpts, minterAddress []common.Address) (*BackingEigenIsMinterModifiedIterator, error) {

	var minterAddressRule []interface{}
	for _, minterAddressItem := range minterAddress {
		minterAddressRule = append(minterAddressRule, minterAddressItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "IsMinterModified", minterAddressRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenIsMinterModifiedIterator{contract: _BackingEigen.contract, event: "IsMinterModified", logs: logs, sub: sub}, nil
}

// WatchIsMinterModified is a free log subscription operation binding the contract event 0x0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde.
//
// Solidity: event IsMinterModified(address indexed minterAddress, bool newStatus)
func (_BackingEigen *BackingEigenFilterer) WatchIsMinterModified(opts *bind.WatchOpts, sink chan<- *BackingEigenIsMinterModified, minterAddress []common.Address) (event.Subscription, error) {

	var minterAddressRule []interface{}
	for _, minterAddressItem := range minterAddress {
		minterAddressRule = append(minterAddressRule, minterAddressItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "IsMinterModified", minterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenIsMinterModified)
				if err := _BackingEigen.contract.UnpackLog(event, "IsMinterModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIsMinterModified is a log parse operation binding the contract event 0x0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde.
//
// Solidity: event IsMinterModified(address indexed minterAddress, bool newStatus)
func (_BackingEigen *BackingEigenFilterer) ParseIsMinterModified(log types.Log) (*BackingEigenIsMinterModified, error) {
	event := new(BackingEigenIsMinterModified)
	if err := _BackingEigen.contract.UnpackLog(event, "IsMinterModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BackingEigen contract.
type BackingEigenOwnershipTransferredIterator struct {
	Event *BackingEigenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenOwnershipTransferred represents a OwnershipTransferred event raised by the BackingEigen contract.
type BackingEigenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BackingEigen *BackingEigenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BackingEigenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenOwnershipTransferredIterator{contract: _BackingEigen.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BackingEigen *BackingEigenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BackingEigenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenOwnershipTransferred)
				if err := _BackingEigen.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BackingEigen *BackingEigenFilterer) ParseOwnershipTransferred(log types.Log) (*BackingEigenOwnershipTransferred, error) {
	event := new(BackingEigenOwnershipTransferred)
	if err := _BackingEigen.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenSetAllowedFromIterator is returned from FilterSetAllowedFrom and is used to iterate over the raw logs and unpacked data for SetAllowedFrom events raised by the BackingEigen contract.
type BackingEigenSetAllowedFromIterator struct {
	Event *BackingEigenSetAllowedFrom // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenSetAllowedFromIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenSetAllowedFrom)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenSetAllowedFrom)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenSetAllowedFromIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenSetAllowedFromIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenSetAllowedFrom represents a SetAllowedFrom event raised by the BackingEigen contract.
type BackingEigenSetAllowedFrom struct {
	From          common.Address
	IsAllowedFrom bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetAllowedFrom is a free log retrieval operation binding the contract event 0xcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed2843622271.
//
// Solidity: event SetAllowedFrom(address indexed from, bool isAllowedFrom)
func (_BackingEigen *BackingEigenFilterer) FilterSetAllowedFrom(opts *bind.FilterOpts, from []common.Address) (*BackingEigenSetAllowedFromIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "SetAllowedFrom", fromRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenSetAllowedFromIterator{contract: _BackingEigen.contract, event: "SetAllowedFrom", logs: logs, sub: sub}, nil
}

// WatchSetAllowedFrom is a free log subscription operation binding the contract event 0xcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed2843622271.
//
// Solidity: event SetAllowedFrom(address indexed from, bool isAllowedFrom)
func (_BackingEigen *BackingEigenFilterer) WatchSetAllowedFrom(opts *bind.WatchOpts, sink chan<- *BackingEigenSetAllowedFrom, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "SetAllowedFrom", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenSetAllowedFrom)
				if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedFrom", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAllowedFrom is a log parse operation binding the contract event 0xcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed2843622271.
//
// Solidity: event SetAllowedFrom(address indexed from, bool isAllowedFrom)
func (_BackingEigen *BackingEigenFilterer) ParseSetAllowedFrom(log types.Log) (*BackingEigenSetAllowedFrom, error) {
	event := new(BackingEigenSetAllowedFrom)
	if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedFrom", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenSetAllowedToIterator is returned from FilterSetAllowedTo and is used to iterate over the raw logs and unpacked data for SetAllowedTo events raised by the BackingEigen contract.
type BackingEigenSetAllowedToIterator struct {
	Event *BackingEigenSetAllowedTo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenSetAllowedToIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenSetAllowedTo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenSetAllowedTo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenSetAllowedToIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenSetAllowedToIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenSetAllowedTo represents a SetAllowedTo event raised by the BackingEigen contract.
type BackingEigenSetAllowedTo struct {
	To          common.Address
	IsAllowedTo bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetAllowedTo is a free log retrieval operation binding the contract event 0x72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b.
//
// Solidity: event SetAllowedTo(address indexed to, bool isAllowedTo)
func (_BackingEigen *BackingEigenFilterer) FilterSetAllowedTo(opts *bind.FilterOpts, to []common.Address) (*BackingEigenSetAllowedToIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "SetAllowedTo", toRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenSetAllowedToIterator{contract: _BackingEigen.contract, event: "SetAllowedTo", logs: logs, sub: sub}, nil
}

// WatchSetAllowedTo is a free log subscription operation binding the contract event 0x72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b.
//
// Solidity: event SetAllowedTo(address indexed to, bool isAllowedTo)
func (_BackingEigen *BackingEigenFilterer) WatchSetAllowedTo(opts *bind.WatchOpts, sink chan<- *BackingEigenSetAllowedTo, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "SetAllowedTo", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenSetAllowedTo)
				if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedTo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAllowedTo is a log parse operation binding the contract event 0x72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b.
//
// Solidity: event SetAllowedTo(address indexed to, bool isAllowedTo)
func (_BackingEigen *BackingEigenFilterer) ParseSetAllowedTo(log types.Log) (*BackingEigenSetAllowedTo, error) {
	event := new(BackingEigenSetAllowedTo)
	if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedTo", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the BackingEigen contract.
type BackingEigenTransferIterator struct {
	Event *BackingEigenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenTransfer represents a Transfer event raised by the BackingEigen contract.
type BackingEigenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BackingEigen *BackingEigenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BackingEigenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenTransferIterator{contract: _BackingEigen.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BackingEigen *BackingEigenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *BackingEigenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenTransfer)
				if err := _BackingEigen.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BackingEigen *BackingEigenFilterer) ParseTransfer(log types.Log) (*BackingEigenTransfer, error) {
	event := new(BackingEigenTransfer)
	if err := _BackingEigen.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenTransferRestrictionsDisabledIterator is returned from FilterTransferRestrictionsDisabled and is used to iterate over the raw logs and unpacked data for TransferRestrictionsDisabled events raised by the BackingEigen contract.
type BackingEigenTransferRestrictionsDisabledIterator struct {
	Event *BackingEigenTransferRestrictionsDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenTransferRestrictionsDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenTransferRestrictionsDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenTransferRestrictionsDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenTransferRestrictionsDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenTransferRestrictionsDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenTransferRestrictionsDisabled represents a TransferRestrictionsDisabled event raised by the BackingEigen contract.
type BackingEigenTransferRestrictionsDisabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransferRestrictionsDisabled is a free log retrieval operation binding the contract event 0x2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f64.
//
// Solidity: event TransferRestrictionsDisabled()
func (_BackingEigen *BackingEigenFilterer) FilterTransferRestrictionsDisabled(opts *bind.FilterOpts) (*BackingEigenTransferRestrictionsDisabledIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "TransferRestrictionsDisabled")
	if err != nil {
		return nil, err
	}
	return &BackingEigenTransferRestrictionsDisabledIterator{contract: _BackingEigen.contract, event: "TransferRestrictionsDisabled", logs: logs, sub: sub}, nil
}

// WatchTransferRestrictionsDisabled is a free log subscription operation binding the contract event 0x2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f64.
//
// Solidity: event TransferRestrictionsDisabled()
func (_BackingEigen *BackingEigenFilterer) WatchTransferRestrictionsDisabled(opts *bind.WatchOpts, sink chan<- *BackingEigenTransferRestrictionsDisabled) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "TransferRestrictionsDisabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenTransferRestrictionsDisabled)
				if err := _BackingEigen.contract.UnpackLog(event, "TransferRestrictionsDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferRestrictionsDisabled is a log parse operation binding the contract event 0x2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f64.
//
// Solidity: event TransferRestrictionsDisabled()
func (_BackingEigen *BackingEigenFilterer) ParseTransferRestrictionsDisabled(log types.Log) (*BackingEigenTransferRestrictionsDisabled, error) {
	event := new(BackingEigenTransferRestrictionsDisabled)
	if err := _BackingEigen.contract.UnpackLog(event, "TransferRestrictionsDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
