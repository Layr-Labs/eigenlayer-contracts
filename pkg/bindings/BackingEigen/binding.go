// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BackingEigen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// BackingEigenMetaData contains all meta data concerning the BackingEigen contract.
var BackingEigenMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_EIGEN\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"CLOCK_MODE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"EIGEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowedFrom\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowedTo\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkpoints\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pos\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"components\":[{\"name\":\"fromBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"votes\",\"type\":\"uint224\",\"internalType\":\"uint224\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"clock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint48\",\"internalType\":\"uint48\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegateBySig\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegates\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"disableTransferRestrictions\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastTotalSupply\",\"inputs\":[{\"name\":\"timepoint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastVotes\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"timepoint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getVotes\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"initialOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isMinter\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"numCheckpoints\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAllowedFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isAllowedFrom\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAllowedTo\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isAllowedTo\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setIsMinter\",\"inputs\":[{\"name\":\"minterAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferRestrictionsDisabledAfter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Backed\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegateChanged\",\"inputs\":[{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"fromDelegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"toDelegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegateVotesChanged\",\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"previousBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"IsMinterModified\",\"inputs\":[{\"name\":\"minterAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetAllowedFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"isAllowedFrom\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SetAllowedTo\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"isAllowedTo\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransferRestrictionsDisabled\",\"inputs\":[],\"anonymous\":false}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162002d9738038062002d97833981016040819052620000349162000113565b6001600160a01b0381166080526200004b62000052565b5062000145565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000111576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012657600080fd5b81516001600160a01b03811681146200013e57600080fd5b9392505050565b608051612c2162000176600039600081816105f801528181610de301528181610e0e0152610e390152612c216000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80637ecebe001161013b578063aa271e1a116100b8578063dd62ed3e1161007c578063dd62ed3e14610588578063eb415f451461059b578063f1127ed8146105a3578063f2fde38b146105e0578063fdc371ce146105f357600080fd5b8063aa271e1a14610518578063b8c255941461053c578063c3cda5201461054f578063c4d66de814610562578063d505accf1461057557600080fd5b806395d89b41116100ff57806395d89b41146104cd5780639ab24eb0146104d55780639aec4bae146104e8578063a457c2d7146104f2578063a9059cbb1461050557600080fd5b80637ecebe001461045c57806384b0196e1461046f5780638da5cb5b1461048a5780638e539e8c1461049b57806391ddadf4146104ae57600080fd5b806340c10f19116101c957806366eb399f1161018d57806366eb399f146103cc5780636fcfff45146103df57806370a0823114610407578063715018a61461043057806378aa33ba1461043857600080fd5b806340c10f191461032557806342966c68146103385780634bf5d7e91461034b578063587cde1e146103755780635c19a95c146103b957600080fd5b806323b872dd1161021057806323b872dd146102d5578063313ce567146102e85780633644e515146102f757806339509351146102ff5780633a46b1a81461031257600080fd5b80630455e6941461024d57806306fdde0314610286578063095ea7b31461029b57806318160ddd146102ae5780631ffacdef146102c0575b600080fd5b61027161025b3660046127bb565b6101316020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61028e61061a565b60405161027d9190612823565b6102716102a9366004612836565b6106ac565b6067545b60405190815260200161027d565b6102d36102ce366004612860565b6106c4565b005b6102716102e336600461289c565b6106da565b6040516012815260200161027d565b6102b26106fe565b61027161030d366004612836565b61070d565b6102b2610320366004612836565b61072f565b6102d3610333366004612836565b6107b9565b6102d36103463660046128d8565b610835565b60408051808201909152600e81526d06d6f64653d74696d657374616d760941b602082015261028e565b6103a16103833660046127bb565b6001600160a01b03908116600090815260fe60205260409020541690565b6040516001600160a01b03909116815260200161027d565b6102d36103c73660046127bb565b610842565b6102d36103da366004612860565b61084c565b6103f26103ed3660046127bb565b6108c5565b60405163ffffffff909116815260200161027d565b6102b26104153660046127bb565b6001600160a01b031660009081526065602052604090205490565b6102d36108ed565b6102716104463660046127bb565b6101326020526000908152604090205460ff1681565b6102b261046a3660046127bb565b610901565b61047761091f565b60405161027d97969594939291906128f1565b6033546001600160a01b03166103a1565b6102b26104a93660046128d8565b6109bd565b6104b6610a25565b60405165ffffffffffff909116815260200161027d565b61028e610a30565b6102b26104e33660046127bb565b610a3f565b6102b26101305481565b610271610500366004612836565b610ac1565b610271610513366004612836565b610b3c565b6102716105263660046127bb565b6101336020526000908152604090205460ff1681565b6102d361054a366004612860565b610b4a565b6102d361055d366004612998565b610b5c565b6102d36105703660046127bb565b610c92565b6102d36105833660046129f0565b610edc565b6102b2610596366004612a5a565b611040565b6102d361106b565b6105b66105b1366004612a8d565b61113b565b60408051825163ffffffff1681526020928301516001600160e01b0316928101929092520161027d565b6102d36105ee3660046127bb565b6111bf565b6103a17f000000000000000000000000000000000000000000000000000000000000000081565b60606068805461062990612ac2565b80601f016020809104026020016040519081016040528092919081815260200182805461065590612ac2565b80156106a25780601f10610677576101008083540402835291602001916106a2565b820191906000526020600020905b81548152906001019060200180831161068557829003601f168201915b5050505050905090565b6000336106ba818585611235565b5060019392505050565b6106cc611359565b6106d682826113b3565b5050565b6000336106e8858285611414565b6106f385858561148e565b506001949350505050565b600061070861164a565b905090565b6000336106ba8185856107208383611040565b61072a9190612b0d565b611235565b6000610739610a25565b65ffffffffffff1682106107905760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b60448201526064015b60405180910390fd5b6001600160a01b038316600090815260ff602052604090206107b29083611654565b9392505050565b336000908152610133602052604090205460ff1661082b5760405162461bcd60e51b815260206004820152602960248201527f4261636b696e67456967656e2e6d696e743a2063616c6c6572206973206e6f7460448201526810309036b4b73a32b960b91b6064820152608401610787565b6106d6828261173d565b61083f33826117c8565b50565b61083f33826117e1565b610854611359565b816001600160a01b03167f0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde82604051610891911515815260200190565b60405180910390a26001600160a01b0391909116600090815261013360205260409020805460ff1916911515919091179055565b6001600160a01b038116600090815260ff60205260408120546108e79061185b565b92915050565b6108f5611359565b6108ff60006118c4565b565b6001600160a01b038116600090815260cb60205260408120546108e7565b6000606080600080600060606097546000801b14801561093f5750609854155b6109835760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610787565b61098b611916565b610993611925565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006109c7610a25565b65ffffffffffff168210610a195760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b6044820152606401610787565b6108e761010083611654565b600061070842611934565b60606069805461062990612ac2565b6001600160a01b038116600090815260ff60205260408120548015610aae576001600160a01b038316600090815260ff6020526040902080546000198301908110610a8c57610a8c612b25565b60009182526020909120015464010000000090046001600160e01b0316610ab1565b60005b6001600160e01b03169392505050565b60003381610acf8286611040565b905083811015610b2f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610787565b6106f38286868403611235565b6000336106ba81858561148e565b610b52611359565b6106d6828261199b565b83421115610bac5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610787565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610c2690610c1e9060a001604051602081830303815290604052805190602001206119f4565b858585611a21565b9050610c3181611a49565b8614610c7f5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610787565b610c8981886117e1565b50505050505050565b600054610100900460ff1615808015610cb25750600054600160ff909116105b80610ccc5750303b158015610ccc575060005460ff166001145b610d2f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610787565b6000805460ff191660011790558015610d52576000805461ff0019166101001790555b610d5a611a71565b610da76040518060400160405280600d81526020016c2130b1b5b4b7339022b4b3b2b760991b815250604051806040016040528060068152602001653122a4a3a2a760d11b815250611aa0565b610db0826118c4565b610dd7604051806040016040528060068152602001653122a4a3a2a760d11b815250611ad1565b60001961013055610e097f000000000000000000000000000000000000000000000000000000000000000060016113b3565b610e347f0000000000000000000000000000000000000000000000000000000000000000600161199b565b610e6a7f00000000000000000000000000000000000000000000000000000000000000006b05686877afb5cbccbf73400061173d565b6040517fb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d2690600090a180156106d6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b83421115610f2c5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610787565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610f5b8c611a49565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610fb6826119f4565b90506000610fc682878787611a21565b9050896001600160a01b0316816001600160a01b0316146110295760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610787565b6110348a8a8a611235565b50505050505050505050565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b611073611359565b600019610130541461110a5760405162461bcd60e51b815260206004820152605460248201527f4261636b696e67456967656e2e64697361626c655472616e736665725265737460448201527f72696374696f6e733a207472616e73666572207265737472696374696f6e7320606482015273185c9948185b1c9958591e48191a5cd8589b195960621b608482015260a401610787565b60006101308190556040517f2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f649190a1565b60408051808201909152600080825260208201526001600160a01b038316600090815260ff60205260409020805463ffffffff841690811061117f5761117f612b25565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6111c7611359565b6001600160a01b03811661122c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610787565b61083f816118c4565b6001600160a01b0383166112975760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610787565b6001600160a01b0382166112f85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610787565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6033546001600160a01b031633146108ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610787565b6001600160a01b03821660008181526101316020908152604091829020805460ff191685151590811790915591519182527fcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed284362227191015b60405180910390a25050565b60006114208484611040565b90506000198114611488578181101561147b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610787565b6114888484848403611235565b50505050565b6001600160a01b0383166114f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610787565b6001600160a01b0382166115545760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610787565b61155f838383611b1b565b6001600160a01b038316600090815260656020526040902054818110156115d75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610787565b6001600160a01b0380851660008181526065602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906116379086815260200190565b60405180910390a3611488848484611bf9565b6000610708611c2b565b8154600090818160058111156116ae57600061166f84611c9f565b6116799085612b3b565b600088815260209020909150869082015463ffffffff16111561169e578091506116ac565b6116a9816001612b0d565b92505b505b808210156116fb5760006116c28383611d84565b600088815260209020909150869082015463ffffffff1611156116e7578091506116f5565b6116f2816001612b0d565b92505b506116ae565b8015611727576000868152602090208101600019015464010000000090046001600160e01b031661172a565b60005b6001600160e01b03169695505050505050565b6117478282611d9f565b6067546001600160e01b0310156117b95760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401610787565b611488610100611e7483611e80565b6117d28282611ff5565b61148861010061213c83611e80565b6001600160a01b03828116600081815260fe6020818152604080842080546065845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611488828483612148565b600063ffffffff8211156118c05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610787565b5090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606099805461062990612ac2565b6060609a805461062990612ac2565b600065ffffffffffff8211156118c05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610787565b6001600160a01b03821660008181526101326020908152604091829020805460ff191685151590811790915591519182527f72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b9101611408565b60006108e7611a0161164a565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000611a3287878787612285565b91509150611a3f81612349565b5095945050505050565b6001600160a01b038116600090815260cb602052604090208054600181018255905b50919050565b600054610100900460ff16611a985760405162461bcd60e51b815260040161078790612b52565b6108ff612497565b600054610100900460ff16611ac75760405162461bcd60e51b815260040161078790612b52565b6106d682826124c7565b600054610100900460ff16611af85760405162461bcd60e51b815260040161078790612b52565b61083f81604051806040016040528060018152602001603160f81b815250612515565b610130544211611bf4576001600160a01b0383166000908152610131602052604090205460ff1680611b6657506001600160a01b0382166000908152610132602052604090205460ff165b80611b7857506001600160a01b038316155b611bf45760405162461bcd60e51b815260206004820152604160248201527f4261636b696e67456967656e2e5f6265666f7265546f6b656e5472616e73666560448201527f723a2066726f6d206f7220746f206d7573742062652077686974656c697374656064820152601960fa1b608482015260a401610787565b505050565b6001600160a01b03838116600090815260fe6020526040808220548584168352912054611bf492918216911683612148565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c56612572565b611c5e6125cb565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600081611cae57506000919050565b60006001611cbb846125fc565b901c6001901b90506001818481611cd457611cd4612b9d565b048201901c90506001818481611cec57611cec612b9d565b048201901c90506001818481611d0457611d04612b9d565b048201901c90506001818481611d1c57611d1c612b9d565b048201901c90506001818481611d3457611d34612b9d565b048201901c90506001818481611d4c57611d4c612b9d565b048201901c90506001818481611d6457611d64612b9d565b048201901c90506107b281828581611d7e57611d7e612b9d565b04612690565b6000611d936002848418612bb3565b6107b290848416612b0d565b6001600160a01b038216611df55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610787565b611e0160008383611b1b565b8060676000828254611e139190612b0d565b90915550506001600160a01b0382166000818152606560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36106d660008383611bf9565b60006107b28284612b0d565b82546000908190818115611ecd5760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611ee2565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611f0284868863ffffffff16565b9250600082118015611f2c5750611f17610a25565b65ffffffffffff16816000015163ffffffff16145b15611f7157611f3a836126a6565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055611feb565b866040518060400160405280611f95611f88610a25565b65ffffffffffff1661185b565b63ffffffff168152602001611fa9866126a6565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b6001600160a01b0382166120555760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610787565b61206182600083611b1b565b6001600160a01b038216600090815260656020526040902054818110156120d55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610787565b6001600160a01b03831660008181526065602090815260408083208686039055606780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611bf483600084611bf9565b60006107b28284612b3b565b816001600160a01b0316836001600160a01b03161415801561216a5750600081115b15611bf4576001600160a01b038316156121f8576001600160a01b038316600090815260ff6020526040812081906121a59061213c85611e80565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516121ed929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611bf4576001600160a01b038216600090815260ff60205260408120819061222e90611e7485611e80565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612276929190918252602082015260400190565b60405180910390a25050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156122bc5750600090506003612340565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612310573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661233957600060019250925050612340565b9150600090505b94509492505050565b600081600481111561235d5761235d612bd5565b14156123665750565b600181600481111561237a5761237a612bd5565b14156123c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610787565b60028160048111156123dc576123dc612bd5565b141561242a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610787565b600381600481111561243e5761243e612bd5565b141561083f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610787565b600054610100900460ff166124be5760405162461bcd60e51b815260040161078790612b52565b6108ff336118c4565b600054610100900460ff166124ee5760405162461bcd60e51b815260040161078790612b52565b815161250190606890602085019061270f565b508051611bf490606990602084019061270f565b600054610100900460ff1661253c5760405162461bcd60e51b815260040161078790612b52565b815161254f90609990602085019061270f565b50805161256390609a90602084019061270f565b50506000609781905560985550565b60008061257d611916565b805190915015612594578051602090910120919050565b60975480156125a35792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b6000806125d6611925565b8051909150156125ed578051602090910120919050565b60985480156125a35792915050565b600080608083901c1561261157608092831c92015b604083901c1561262357604092831c92015b602083901c1561263557602092831c92015b601083901c1561264757601092831c92015b600883901c1561265957600892831c92015b600483901c1561266b57600492831c92015b600283901c1561267d57600292831c92015b600183901c156108e75760010192915050565b600081831061269f57816107b2565b5090919050565b60006001600160e01b038211156118c05760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610787565b82805461271b90612ac2565b90600052602060002090601f01602090048101928261273d5760008555612783565b82601f1061275657805160ff1916838001178555612783565b82800160010185558215612783579182015b82811115612783578251825591602001919060010190612768565b506118c09291505b808211156118c0576000815560010161278b565b80356001600160a01b03811681146127b657600080fd5b919050565b6000602082840312156127cd57600080fd5b6107b28261279f565b6000815180845260005b818110156127fc576020818501810151868301820152016127e0565b8181111561280e576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006107b260208301846127d6565b6000806040838503121561284957600080fd5b6128528361279f565b946020939093013593505050565b6000806040838503121561287357600080fd5b61287c8361279f565b91506020830135801515811461289157600080fd5b809150509250929050565b6000806000606084860312156128b157600080fd5b6128ba8461279f565b92506128c86020850161279f565b9150604084013590509250925092565b6000602082840312156128ea57600080fd5b5035919050565b60ff60f81b881681526000602060e08184015261291160e084018a6127d6565b8381036040850152612923818a6127d6565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561297557835183529284019291840191600101612959565b50909c9b505050505050505050505050565b803560ff811681146127b657600080fd5b60008060008060008060c087890312156129b157600080fd5b6129ba8761279f565b955060208701359450604087013593506129d660608801612987565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215612a0b57600080fd5b612a148861279f565b9650612a226020890161279f565b95506040880135945060608801359350612a3e60808901612987565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612a6d57600080fd5b612a768361279f565b9150612a846020840161279f565b90509250929050565b60008060408385031215612aa057600080fd5b612aa98361279f565b9150602083013563ffffffff8116811461289157600080fd5b600181811c90821680612ad657607f821691505b60208210811415611a6b57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612b2057612b20612af7565b500190565b634e487b7160e01b600052603260045260246000fd5b600082821015612b4d57612b4d612af7565b500390565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612bd057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220b77d75f4e98a5308daac223aefba713fd83afd956f154c8e7a629733e54a88bf64736f6c634300080c0033",
}

// BackingEigenABI is the input ABI used to generate the binding from.
// Deprecated: Use BackingEigenMetaData.ABI instead.
var BackingEigenABI = BackingEigenMetaData.ABI

// BackingEigenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BackingEigenMetaData.Bin instead.
var BackingEigenBin = BackingEigenMetaData.Bin

// DeployBackingEigen deploys a new Ethereum contract, binding an instance of BackingEigen to it.
func DeployBackingEigen(auth *bind.TransactOpts, backend bind.ContractBackend, _EIGEN common.Address) (common.Address, *types.Transaction, *BackingEigen, error) {
	parsed, err := BackingEigenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BackingEigenBin), backend, _EIGEN)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BackingEigen{BackingEigenCaller: BackingEigenCaller{contract: contract}, BackingEigenTransactor: BackingEigenTransactor{contract: contract}, BackingEigenFilterer: BackingEigenFilterer{contract: contract}}, nil
}

// BackingEigen is an auto generated Go binding around an Ethereum contract.
type BackingEigen struct {
	BackingEigenCaller     // Read-only binding to the contract
	BackingEigenTransactor // Write-only binding to the contract
	BackingEigenFilterer   // Log filterer for contract events
}

// BackingEigenCaller is an auto generated read-only Go binding around an Ethereum contract.
type BackingEigenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BackingEigenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BackingEigenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BackingEigenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BackingEigenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BackingEigenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BackingEigenSession struct {
	Contract     *BackingEigen     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BackingEigenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BackingEigenCallerSession struct {
	Contract *BackingEigenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// BackingEigenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BackingEigenTransactorSession struct {
	Contract     *BackingEigenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BackingEigenRaw is an auto generated low-level Go binding around an Ethereum contract.
type BackingEigenRaw struct {
	Contract *BackingEigen // Generic contract binding to access the raw methods on
}

// BackingEigenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BackingEigenCallerRaw struct {
	Contract *BackingEigenCaller // Generic read-only contract binding to access the raw methods on
}

// BackingEigenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BackingEigenTransactorRaw struct {
	Contract *BackingEigenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBackingEigen creates a new instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigen(address common.Address, backend bind.ContractBackend) (*BackingEigen, error) {
	contract, err := bindBackingEigen(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BackingEigen{BackingEigenCaller: BackingEigenCaller{contract: contract}, BackingEigenTransactor: BackingEigenTransactor{contract: contract}, BackingEigenFilterer: BackingEigenFilterer{contract: contract}}, nil
}

// NewBackingEigenCaller creates a new read-only instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigenCaller(address common.Address, caller bind.ContractCaller) (*BackingEigenCaller, error) {
	contract, err := bindBackingEigen(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BackingEigenCaller{contract: contract}, nil
}

// NewBackingEigenTransactor creates a new write-only instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigenTransactor(address common.Address, transactor bind.ContractTransactor) (*BackingEigenTransactor, error) {
	contract, err := bindBackingEigen(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BackingEigenTransactor{contract: contract}, nil
}

// NewBackingEigenFilterer creates a new log filterer instance of BackingEigen, bound to a specific deployed contract.
func NewBackingEigenFilterer(address common.Address, filterer bind.ContractFilterer) (*BackingEigenFilterer, error) {
	contract, err := bindBackingEigen(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BackingEigenFilterer{contract: contract}, nil
}

// bindBackingEigen binds a generic wrapper to an already deployed contract.
func bindBackingEigen(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BackingEigenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BackingEigen *BackingEigenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BackingEigen.Contract.BackingEigenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BackingEigen *BackingEigenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.Contract.BackingEigenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BackingEigen *BackingEigenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BackingEigen.Contract.BackingEigenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BackingEigen *BackingEigenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BackingEigen.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BackingEigen *BackingEigenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BackingEigen *BackingEigenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BackingEigen.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_BackingEigen *BackingEigenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_BackingEigen *BackingEigenSession) CLOCKMODE() (string, error) {
	return _BackingEigen.Contract.CLOCKMODE(&_BackingEigen.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() pure returns(string)
func (_BackingEigen *BackingEigenCallerSession) CLOCKMODE() (string, error) {
	return _BackingEigen.Contract.CLOCKMODE(&_BackingEigen.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BackingEigen *BackingEigenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BackingEigen *BackingEigenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _BackingEigen.Contract.DOMAINSEPARATOR(&_BackingEigen.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BackingEigen *BackingEigenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _BackingEigen.Contract.DOMAINSEPARATOR(&_BackingEigen.CallOpts)
}

// EIGEN is a free data retrieval call binding the contract method 0xfdc371ce.
//
// Solidity: function EIGEN() view returns(address)
func (_BackingEigen *BackingEigenCaller) EIGEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "EIGEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EIGEN is a free data retrieval call binding the contract method 0xfdc371ce.
//
// Solidity: function EIGEN() view returns(address)
func (_BackingEigen *BackingEigenSession) EIGEN() (common.Address, error) {
	return _BackingEigen.Contract.EIGEN(&_BackingEigen.CallOpts)
}

// EIGEN is a free data retrieval call binding the contract method 0xfdc371ce.
//
// Solidity: function EIGEN() view returns(address)
func (_BackingEigen *BackingEigenCallerSession) EIGEN() (common.Address, error) {
	return _BackingEigen.Contract.EIGEN(&_BackingEigen.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BackingEigen *BackingEigenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Allowance(&_BackingEigen.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Allowance(&_BackingEigen.CallOpts, owner, spender)
}

// AllowedFrom is a free data retrieval call binding the contract method 0x0455e694.
//
// Solidity: function allowedFrom(address ) view returns(bool)
func (_BackingEigen *BackingEigenCaller) AllowedFrom(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "allowedFrom", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedFrom is a free data retrieval call binding the contract method 0x0455e694.
//
// Solidity: function allowedFrom(address ) view returns(bool)
func (_BackingEigen *BackingEigenSession) AllowedFrom(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedFrom(&_BackingEigen.CallOpts, arg0)
}

// AllowedFrom is a free data retrieval call binding the contract method 0x0455e694.
//
// Solidity: function allowedFrom(address ) view returns(bool)
func (_BackingEigen *BackingEigenCallerSession) AllowedFrom(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedFrom(&_BackingEigen.CallOpts, arg0)
}

// AllowedTo is a free data retrieval call binding the contract method 0x78aa33ba.
//
// Solidity: function allowedTo(address ) view returns(bool)
func (_BackingEigen *BackingEigenCaller) AllowedTo(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "allowedTo", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedTo is a free data retrieval call binding the contract method 0x78aa33ba.
//
// Solidity: function allowedTo(address ) view returns(bool)
func (_BackingEigen *BackingEigenSession) AllowedTo(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedTo(&_BackingEigen.CallOpts, arg0)
}

// AllowedTo is a free data retrieval call binding the contract method 0x78aa33ba.
//
// Solidity: function allowedTo(address ) view returns(bool)
func (_BackingEigen *BackingEigenCallerSession) AllowedTo(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.AllowedTo(&_BackingEigen.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BackingEigen *BackingEigenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.BalanceOf(&_BackingEigen.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.BalanceOf(&_BackingEigen.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BackingEigen *BackingEigenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BackingEigen *BackingEigenSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _BackingEigen.Contract.Checkpoints(&_BackingEigen.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BackingEigen *BackingEigenCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _BackingEigen.Contract.Checkpoints(&_BackingEigen.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BackingEigen *BackingEigenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BackingEigen *BackingEigenSession) Clock() (*big.Int, error) {
	return _BackingEigen.Contract.Clock(&_BackingEigen.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BackingEigen *BackingEigenCallerSession) Clock() (*big.Int, error) {
	return _BackingEigen.Contract.Clock(&_BackingEigen.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BackingEigen *BackingEigenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BackingEigen *BackingEigenSession) Decimals() (uint8, error) {
	return _BackingEigen.Contract.Decimals(&_BackingEigen.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BackingEigen *BackingEigenCallerSession) Decimals() (uint8, error) {
	return _BackingEigen.Contract.Decimals(&_BackingEigen.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BackingEigen *BackingEigenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BackingEigen *BackingEigenSession) Delegates(account common.Address) (common.Address, error) {
	return _BackingEigen.Contract.Delegates(&_BackingEigen.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BackingEigen *BackingEigenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _BackingEigen.Contract.Delegates(&_BackingEigen.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BackingEigen *BackingEigenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BackingEigen *BackingEigenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BackingEigen.Contract.Eip712Domain(&_BackingEigen.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BackingEigen *BackingEigenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BackingEigen.Contract.Eip712Domain(&_BackingEigen.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastTotalSupply(&_BackingEigen.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastTotalSupply(&_BackingEigen.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastVotes(&_BackingEigen.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BackingEigen.Contract.GetPastVotes(&_BackingEigen.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BackingEigen *BackingEigenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.GetVotes(&_BackingEigen.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.GetVotes(&_BackingEigen.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address ) view returns(bool)
func (_BackingEigen *BackingEigenCaller) IsMinter(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "isMinter", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address ) view returns(bool)
func (_BackingEigen *BackingEigenSession) IsMinter(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.IsMinter(&_BackingEigen.CallOpts, arg0)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address ) view returns(bool)
func (_BackingEigen *BackingEigenCallerSession) IsMinter(arg0 common.Address) (bool, error) {
	return _BackingEigen.Contract.IsMinter(&_BackingEigen.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BackingEigen *BackingEigenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BackingEigen *BackingEigenSession) Name() (string, error) {
	return _BackingEigen.Contract.Name(&_BackingEigen.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BackingEigen *BackingEigenCallerSession) Name() (string, error) {
	return _BackingEigen.Contract.Name(&_BackingEigen.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BackingEigen *BackingEigenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BackingEigen *BackingEigenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Nonces(&_BackingEigen.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _BackingEigen.Contract.Nonces(&_BackingEigen.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BackingEigen *BackingEigenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BackingEigen *BackingEigenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _BackingEigen.Contract.NumCheckpoints(&_BackingEigen.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BackingEigen *BackingEigenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _BackingEigen.Contract.NumCheckpoints(&_BackingEigen.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BackingEigen *BackingEigenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BackingEigen *BackingEigenSession) Owner() (common.Address, error) {
	return _BackingEigen.Contract.Owner(&_BackingEigen.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BackingEigen *BackingEigenCallerSession) Owner() (common.Address, error) {
	return _BackingEigen.Contract.Owner(&_BackingEigen.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BackingEigen *BackingEigenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BackingEigen *BackingEigenSession) Symbol() (string, error) {
	return _BackingEigen.Contract.Symbol(&_BackingEigen.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BackingEigen *BackingEigenCallerSession) Symbol() (string, error) {
	return _BackingEigen.Contract.Symbol(&_BackingEigen.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BackingEigen *BackingEigenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BackingEigen *BackingEigenSession) TotalSupply() (*big.Int, error) {
	return _BackingEigen.Contract.TotalSupply(&_BackingEigen.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) TotalSupply() (*big.Int, error) {
	return _BackingEigen.Contract.TotalSupply(&_BackingEigen.CallOpts)
}

// TransferRestrictionsDisabledAfter is a free data retrieval call binding the contract method 0x9aec4bae.
//
// Solidity: function transferRestrictionsDisabledAfter() view returns(uint256)
func (_BackingEigen *BackingEigenCaller) TransferRestrictionsDisabledAfter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BackingEigen.contract.Call(opts, &out, "transferRestrictionsDisabledAfter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransferRestrictionsDisabledAfter is a free data retrieval call binding the contract method 0x9aec4bae.
//
// Solidity: function transferRestrictionsDisabledAfter() view returns(uint256)
func (_BackingEigen *BackingEigenSession) TransferRestrictionsDisabledAfter() (*big.Int, error) {
	return _BackingEigen.Contract.TransferRestrictionsDisabledAfter(&_BackingEigen.CallOpts)
}

// TransferRestrictionsDisabledAfter is a free data retrieval call binding the contract method 0x9aec4bae.
//
// Solidity: function transferRestrictionsDisabledAfter() view returns(uint256)
func (_BackingEigen *BackingEigenCallerSession) TransferRestrictionsDisabledAfter() (*big.Int, error) {
	return _BackingEigen.Contract.TransferRestrictionsDisabledAfter(&_BackingEigen.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Approve(&_BackingEigen.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Approve(&_BackingEigen.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BackingEigen *BackingEigenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Burn(&_BackingEigen.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Burn(&_BackingEigen.TransactOpts, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BackingEigen *BackingEigenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.DecreaseAllowance(&_BackingEigen.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.DecreaseAllowance(&_BackingEigen.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BackingEigen *BackingEigenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BackingEigen *BackingEigenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Delegate(&_BackingEigen.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BackingEigen *BackingEigenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Delegate(&_BackingEigen.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.DelegateBySig(&_BackingEigen.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.DelegateBySig(&_BackingEigen.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DisableTransferRestrictions is a paid mutator transaction binding the contract method 0xeb415f45.
//
// Solidity: function disableTransferRestrictions() returns()
func (_BackingEigen *BackingEigenTransactor) DisableTransferRestrictions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "disableTransferRestrictions")
}

// DisableTransferRestrictions is a paid mutator transaction binding the contract method 0xeb415f45.
//
// Solidity: function disableTransferRestrictions() returns()
func (_BackingEigen *BackingEigenSession) DisableTransferRestrictions() (*types.Transaction, error) {
	return _BackingEigen.Contract.DisableTransferRestrictions(&_BackingEigen.TransactOpts)
}

// DisableTransferRestrictions is a paid mutator transaction binding the contract method 0xeb415f45.
//
// Solidity: function disableTransferRestrictions() returns()
func (_BackingEigen *BackingEigenTransactorSession) DisableTransferRestrictions() (*types.Transaction, error) {
	return _BackingEigen.Contract.DisableTransferRestrictions(&_BackingEigen.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BackingEigen *BackingEigenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.IncreaseAllowance(&_BackingEigen.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.IncreaseAllowance(&_BackingEigen.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_BackingEigen *BackingEigenTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "initialize", initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_BackingEigen *BackingEigenSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Initialize(&_BackingEigen.TransactOpts, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_BackingEigen *BackingEigenTransactorSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.Initialize(&_BackingEigen.TransactOpts, initialOwner)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_BackingEigen *BackingEigenSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Mint(&_BackingEigen.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_BackingEigen *BackingEigenTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Mint(&_BackingEigen.TransactOpts, to, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.Permit(&_BackingEigen.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BackingEigen *BackingEigenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BackingEigen.Contract.Permit(&_BackingEigen.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BackingEigen *BackingEigenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BackingEigen *BackingEigenSession) RenounceOwnership() (*types.Transaction, error) {
	return _BackingEigen.Contract.RenounceOwnership(&_BackingEigen.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BackingEigen *BackingEigenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BackingEigen.Contract.RenounceOwnership(&_BackingEigen.TransactOpts)
}

// SetAllowedFrom is a paid mutator transaction binding the contract method 0x1ffacdef.
//
// Solidity: function setAllowedFrom(address from, bool isAllowedFrom) returns()
func (_BackingEigen *BackingEigenTransactor) SetAllowedFrom(opts *bind.TransactOpts, from common.Address, isAllowedFrom bool) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "setAllowedFrom", from, isAllowedFrom)
}

// SetAllowedFrom is a paid mutator transaction binding the contract method 0x1ffacdef.
//
// Solidity: function setAllowedFrom(address from, bool isAllowedFrom) returns()
func (_BackingEigen *BackingEigenSession) SetAllowedFrom(from common.Address, isAllowedFrom bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedFrom(&_BackingEigen.TransactOpts, from, isAllowedFrom)
}

// SetAllowedFrom is a paid mutator transaction binding the contract method 0x1ffacdef.
//
// Solidity: function setAllowedFrom(address from, bool isAllowedFrom) returns()
func (_BackingEigen *BackingEigenTransactorSession) SetAllowedFrom(from common.Address, isAllowedFrom bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedFrom(&_BackingEigen.TransactOpts, from, isAllowedFrom)
}

// SetAllowedTo is a paid mutator transaction binding the contract method 0xb8c25594.
//
// Solidity: function setAllowedTo(address to, bool isAllowedTo) returns()
func (_BackingEigen *BackingEigenTransactor) SetAllowedTo(opts *bind.TransactOpts, to common.Address, isAllowedTo bool) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "setAllowedTo", to, isAllowedTo)
}

// SetAllowedTo is a paid mutator transaction binding the contract method 0xb8c25594.
//
// Solidity: function setAllowedTo(address to, bool isAllowedTo) returns()
func (_BackingEigen *BackingEigenSession) SetAllowedTo(to common.Address, isAllowedTo bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedTo(&_BackingEigen.TransactOpts, to, isAllowedTo)
}

// SetAllowedTo is a paid mutator transaction binding the contract method 0xb8c25594.
//
// Solidity: function setAllowedTo(address to, bool isAllowedTo) returns()
func (_BackingEigen *BackingEigenTransactorSession) SetAllowedTo(to common.Address, isAllowedTo bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetAllowedTo(&_BackingEigen.TransactOpts, to, isAllowedTo)
}

// SetIsMinter is a paid mutator transaction binding the contract method 0x66eb399f.
//
// Solidity: function setIsMinter(address minterAddress, bool newStatus) returns()
func (_BackingEigen *BackingEigenTransactor) SetIsMinter(opts *bind.TransactOpts, minterAddress common.Address, newStatus bool) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "setIsMinter", minterAddress, newStatus)
}

// SetIsMinter is a paid mutator transaction binding the contract method 0x66eb399f.
//
// Solidity: function setIsMinter(address minterAddress, bool newStatus) returns()
func (_BackingEigen *BackingEigenSession) SetIsMinter(minterAddress common.Address, newStatus bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetIsMinter(&_BackingEigen.TransactOpts, minterAddress, newStatus)
}

// SetIsMinter is a paid mutator transaction binding the contract method 0x66eb399f.
//
// Solidity: function setIsMinter(address minterAddress, bool newStatus) returns()
func (_BackingEigen *BackingEigenTransactorSession) SetIsMinter(minterAddress common.Address, newStatus bool) (*types.Transaction, error) {
	return _BackingEigen.Contract.SetIsMinter(&_BackingEigen.TransactOpts, minterAddress, newStatus)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Transfer(&_BackingEigen.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.Transfer(&_BackingEigen.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferFrom(&_BackingEigen.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BackingEigen *BackingEigenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferFrom(&_BackingEigen.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BackingEigen *BackingEigenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BackingEigen *BackingEigenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferOwnership(&_BackingEigen.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BackingEigen *BackingEigenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BackingEigen.Contract.TransferOwnership(&_BackingEigen.TransactOpts, newOwner)
}

// BackingEigenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the BackingEigen contract.
type BackingEigenApprovalIterator struct {
	Event *BackingEigenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenApproval represents a Approval event raised by the BackingEigen contract.
type BackingEigenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BackingEigen *BackingEigenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*BackingEigenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenApprovalIterator{contract: _BackingEigen.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BackingEigen *BackingEigenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *BackingEigenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenApproval)
				if err := _BackingEigen.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BackingEigen *BackingEigenFilterer) ParseApproval(log types.Log) (*BackingEigenApproval, error) {
	event := new(BackingEigenApproval)
	if err := _BackingEigen.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenBackedIterator is returned from FilterBacked and is used to iterate over the raw logs and unpacked data for Backed events raised by the BackingEigen contract.
type BackingEigenBackedIterator struct {
	Event *BackingEigenBacked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenBackedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenBacked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenBacked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenBackedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenBackedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenBacked represents a Backed event raised by the BackingEigen contract.
type BackingEigenBacked struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBacked is a free log retrieval operation binding the contract event 0xb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d26.
//
// Solidity: event Backed()
func (_BackingEigen *BackingEigenFilterer) FilterBacked(opts *bind.FilterOpts) (*BackingEigenBackedIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Backed")
	if err != nil {
		return nil, err
	}
	return &BackingEigenBackedIterator{contract: _BackingEigen.contract, event: "Backed", logs: logs, sub: sub}, nil
}

// WatchBacked is a free log subscription operation binding the contract event 0xb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d26.
//
// Solidity: event Backed()
func (_BackingEigen *BackingEigenFilterer) WatchBacked(opts *bind.WatchOpts, sink chan<- *BackingEigenBacked) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Backed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenBacked)
				if err := _BackingEigen.contract.UnpackLog(event, "Backed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBacked is a log parse operation binding the contract event 0xb7c23c1e2e36f298e9879a88ecfcd07e28fbb439bcfa9c78ca1363ca14370d26.
//
// Solidity: event Backed()
func (_BackingEigen *BackingEigenFilterer) ParseBacked(log types.Log) (*BackingEigenBacked, error) {
	event := new(BackingEigenBacked)
	if err := _BackingEigen.contract.UnpackLog(event, "Backed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the BackingEigen contract.
type BackingEigenDelegateChangedIterator struct {
	Event *BackingEigenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenDelegateChanged represents a DelegateChanged event raised by the BackingEigen contract.
type BackingEigenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BackingEigen *BackingEigenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*BackingEigenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenDelegateChangedIterator{contract: _BackingEigen.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BackingEigen *BackingEigenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *BackingEigenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenDelegateChanged)
				if err := _BackingEigen.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BackingEigen *BackingEigenFilterer) ParseDelegateChanged(log types.Log) (*BackingEigenDelegateChanged, error) {
	event := new(BackingEigenDelegateChanged)
	if err := _BackingEigen.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the BackingEigen contract.
type BackingEigenDelegateVotesChangedIterator struct {
	Event *BackingEigenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenDelegateVotesChanged represents a DelegateVotesChanged event raised by the BackingEigen contract.
type BackingEigenDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BackingEigen *BackingEigenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*BackingEigenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenDelegateVotesChangedIterator{contract: _BackingEigen.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BackingEigen *BackingEigenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *BackingEigenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenDelegateVotesChanged)
				if err := _BackingEigen.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BackingEigen *BackingEigenFilterer) ParseDelegateVotesChanged(log types.Log) (*BackingEigenDelegateVotesChanged, error) {
	event := new(BackingEigenDelegateVotesChanged)
	if err := _BackingEigen.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BackingEigen contract.
type BackingEigenEIP712DomainChangedIterator struct {
	Event *BackingEigenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenEIP712DomainChanged represents a EIP712DomainChanged event raised by the BackingEigen contract.
type BackingEigenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BackingEigen *BackingEigenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BackingEigenEIP712DomainChangedIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BackingEigenEIP712DomainChangedIterator{contract: _BackingEigen.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BackingEigen *BackingEigenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BackingEigenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenEIP712DomainChanged)
				if err := _BackingEigen.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BackingEigen *BackingEigenFilterer) ParseEIP712DomainChanged(log types.Log) (*BackingEigenEIP712DomainChanged, error) {
	event := new(BackingEigenEIP712DomainChanged)
	if err := _BackingEigen.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BackingEigen contract.
type BackingEigenInitializedIterator struct {
	Event *BackingEigenInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenInitialized represents a Initialized event raised by the BackingEigen contract.
type BackingEigenInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BackingEigen *BackingEigenFilterer) FilterInitialized(opts *bind.FilterOpts) (*BackingEigenInitializedIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BackingEigenInitializedIterator{contract: _BackingEigen.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BackingEigen *BackingEigenFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BackingEigenInitialized) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenInitialized)
				if err := _BackingEigen.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BackingEigen *BackingEigenFilterer) ParseInitialized(log types.Log) (*BackingEigenInitialized, error) {
	event := new(BackingEigenInitialized)
	if err := _BackingEigen.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenIsMinterModifiedIterator is returned from FilterIsMinterModified and is used to iterate over the raw logs and unpacked data for IsMinterModified events raised by the BackingEigen contract.
type BackingEigenIsMinterModifiedIterator struct {
	Event *BackingEigenIsMinterModified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenIsMinterModifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenIsMinterModified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenIsMinterModified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenIsMinterModifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenIsMinterModifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenIsMinterModified represents a IsMinterModified event raised by the BackingEigen contract.
type BackingEigenIsMinterModified struct {
	MinterAddress common.Address
	NewStatus     bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterIsMinterModified is a free log retrieval operation binding the contract event 0x0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde.
//
// Solidity: event IsMinterModified(address indexed minterAddress, bool newStatus)
func (_BackingEigen *BackingEigenFilterer) FilterIsMinterModified(opts *bind.FilterOpts, minterAddress []common.Address) (*BackingEigenIsMinterModifiedIterator, error) {

	var minterAddressRule []interface{}
	for _, minterAddressItem := range minterAddress {
		minterAddressRule = append(minterAddressRule, minterAddressItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "IsMinterModified", minterAddressRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenIsMinterModifiedIterator{contract: _BackingEigen.contract, event: "IsMinterModified", logs: logs, sub: sub}, nil
}

// WatchIsMinterModified is a free log subscription operation binding the contract event 0x0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde.
//
// Solidity: event IsMinterModified(address indexed minterAddress, bool newStatus)
func (_BackingEigen *BackingEigenFilterer) WatchIsMinterModified(opts *bind.WatchOpts, sink chan<- *BackingEigenIsMinterModified, minterAddress []common.Address) (event.Subscription, error) {

	var minterAddressRule []interface{}
	for _, minterAddressItem := range minterAddress {
		minterAddressRule = append(minterAddressRule, minterAddressItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "IsMinterModified", minterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenIsMinterModified)
				if err := _BackingEigen.contract.UnpackLog(event, "IsMinterModified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIsMinterModified is a log parse operation binding the contract event 0x0124b12503bddc2616c0f3f54fd23ed283f5ef0c1483a75409e42612176b8bde.
//
// Solidity: event IsMinterModified(address indexed minterAddress, bool newStatus)
func (_BackingEigen *BackingEigenFilterer) ParseIsMinterModified(log types.Log) (*BackingEigenIsMinterModified, error) {
	event := new(BackingEigenIsMinterModified)
	if err := _BackingEigen.contract.UnpackLog(event, "IsMinterModified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BackingEigen contract.
type BackingEigenOwnershipTransferredIterator struct {
	Event *BackingEigenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenOwnershipTransferred represents a OwnershipTransferred event raised by the BackingEigen contract.
type BackingEigenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BackingEigen *BackingEigenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BackingEigenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenOwnershipTransferredIterator{contract: _BackingEigen.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BackingEigen *BackingEigenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BackingEigenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenOwnershipTransferred)
				if err := _BackingEigen.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BackingEigen *BackingEigenFilterer) ParseOwnershipTransferred(log types.Log) (*BackingEigenOwnershipTransferred, error) {
	event := new(BackingEigenOwnershipTransferred)
	if err := _BackingEigen.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenSetAllowedFromIterator is returned from FilterSetAllowedFrom and is used to iterate over the raw logs and unpacked data for SetAllowedFrom events raised by the BackingEigen contract.
type BackingEigenSetAllowedFromIterator struct {
	Event *BackingEigenSetAllowedFrom // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenSetAllowedFromIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenSetAllowedFrom)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenSetAllowedFrom)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenSetAllowedFromIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenSetAllowedFromIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenSetAllowedFrom represents a SetAllowedFrom event raised by the BackingEigen contract.
type BackingEigenSetAllowedFrom struct {
	From          common.Address
	IsAllowedFrom bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetAllowedFrom is a free log retrieval operation binding the contract event 0xcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed2843622271.
//
// Solidity: event SetAllowedFrom(address indexed from, bool isAllowedFrom)
func (_BackingEigen *BackingEigenFilterer) FilterSetAllowedFrom(opts *bind.FilterOpts, from []common.Address) (*BackingEigenSetAllowedFromIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "SetAllowedFrom", fromRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenSetAllowedFromIterator{contract: _BackingEigen.contract, event: "SetAllowedFrom", logs: logs, sub: sub}, nil
}

// WatchSetAllowedFrom is a free log subscription operation binding the contract event 0xcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed2843622271.
//
// Solidity: event SetAllowedFrom(address indexed from, bool isAllowedFrom)
func (_BackingEigen *BackingEigenFilterer) WatchSetAllowedFrom(opts *bind.WatchOpts, sink chan<- *BackingEigenSetAllowedFrom, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "SetAllowedFrom", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenSetAllowedFrom)
				if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedFrom", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAllowedFrom is a log parse operation binding the contract event 0xcf20b1ecb604b0e8888d579c64e8a3b10e590d45c1c2dddb393bed2843622271.
//
// Solidity: event SetAllowedFrom(address indexed from, bool isAllowedFrom)
func (_BackingEigen *BackingEigenFilterer) ParseSetAllowedFrom(log types.Log) (*BackingEigenSetAllowedFrom, error) {
	event := new(BackingEigenSetAllowedFrom)
	if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedFrom", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenSetAllowedToIterator is returned from FilterSetAllowedTo and is used to iterate over the raw logs and unpacked data for SetAllowedTo events raised by the BackingEigen contract.
type BackingEigenSetAllowedToIterator struct {
	Event *BackingEigenSetAllowedTo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenSetAllowedToIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenSetAllowedTo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenSetAllowedTo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenSetAllowedToIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenSetAllowedToIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenSetAllowedTo represents a SetAllowedTo event raised by the BackingEigen contract.
type BackingEigenSetAllowedTo struct {
	To          common.Address
	IsAllowedTo bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetAllowedTo is a free log retrieval operation binding the contract event 0x72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b.
//
// Solidity: event SetAllowedTo(address indexed to, bool isAllowedTo)
func (_BackingEigen *BackingEigenFilterer) FilterSetAllowedTo(opts *bind.FilterOpts, to []common.Address) (*BackingEigenSetAllowedToIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "SetAllowedTo", toRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenSetAllowedToIterator{contract: _BackingEigen.contract, event: "SetAllowedTo", logs: logs, sub: sub}, nil
}

// WatchSetAllowedTo is a free log subscription operation binding the contract event 0x72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b.
//
// Solidity: event SetAllowedTo(address indexed to, bool isAllowedTo)
func (_BackingEigen *BackingEigenFilterer) WatchSetAllowedTo(opts *bind.WatchOpts, sink chan<- *BackingEigenSetAllowedTo, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "SetAllowedTo", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenSetAllowedTo)
				if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedTo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAllowedTo is a log parse operation binding the contract event 0x72a561d1af7409467dae4f1e9fc52590a9335a1dda17727e2b6aa8c4db35109b.
//
// Solidity: event SetAllowedTo(address indexed to, bool isAllowedTo)
func (_BackingEigen *BackingEigenFilterer) ParseSetAllowedTo(log types.Log) (*BackingEigenSetAllowedTo, error) {
	event := new(BackingEigenSetAllowedTo)
	if err := _BackingEigen.contract.UnpackLog(event, "SetAllowedTo", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the BackingEigen contract.
type BackingEigenTransferIterator struct {
	Event *BackingEigenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenTransfer represents a Transfer event raised by the BackingEigen contract.
type BackingEigenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BackingEigen *BackingEigenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BackingEigenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BackingEigenTransferIterator{contract: _BackingEigen.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BackingEigen *BackingEigenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *BackingEigenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenTransfer)
				if err := _BackingEigen.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BackingEigen *BackingEigenFilterer) ParseTransfer(log types.Log) (*BackingEigenTransfer, error) {
	event := new(BackingEigenTransfer)
	if err := _BackingEigen.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BackingEigenTransferRestrictionsDisabledIterator is returned from FilterTransferRestrictionsDisabled and is used to iterate over the raw logs and unpacked data for TransferRestrictionsDisabled events raised by the BackingEigen contract.
type BackingEigenTransferRestrictionsDisabledIterator struct {
	Event *BackingEigenTransferRestrictionsDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BackingEigenTransferRestrictionsDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BackingEigenTransferRestrictionsDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BackingEigenTransferRestrictionsDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BackingEigenTransferRestrictionsDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BackingEigenTransferRestrictionsDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BackingEigenTransferRestrictionsDisabled represents a TransferRestrictionsDisabled event raised by the BackingEigen contract.
type BackingEigenTransferRestrictionsDisabled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransferRestrictionsDisabled is a free log retrieval operation binding the contract event 0x2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f64.
//
// Solidity: event TransferRestrictionsDisabled()
func (_BackingEigen *BackingEigenFilterer) FilterTransferRestrictionsDisabled(opts *bind.FilterOpts) (*BackingEigenTransferRestrictionsDisabledIterator, error) {

	logs, sub, err := _BackingEigen.contract.FilterLogs(opts, "TransferRestrictionsDisabled")
	if err != nil {
		return nil, err
	}
	return &BackingEigenTransferRestrictionsDisabledIterator{contract: _BackingEigen.contract, event: "TransferRestrictionsDisabled", logs: logs, sub: sub}, nil
}

// WatchTransferRestrictionsDisabled is a free log subscription operation binding the contract event 0x2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f64.
//
// Solidity: event TransferRestrictionsDisabled()
func (_BackingEigen *BackingEigenFilterer) WatchTransferRestrictionsDisabled(opts *bind.WatchOpts, sink chan<- *BackingEigenTransferRestrictionsDisabled) (event.Subscription, error) {

	logs, sub, err := _BackingEigen.contract.WatchLogs(opts, "TransferRestrictionsDisabled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BackingEigenTransferRestrictionsDisabled)
				if err := _BackingEigen.contract.UnpackLog(event, "TransferRestrictionsDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferRestrictionsDisabled is a log parse operation binding the contract event 0x2b18986d3ba809db2f13a5d7bf17f60d357b37d9cbb55dd71cbbac8dc4060f64.
//
// Solidity: event TransferRestrictionsDisabled()
func (_BackingEigen *BackingEigenFilterer) ParseTransferRestrictionsDisabled(log types.Log) (*BackingEigenTransferRestrictionsDisabled, error) {
	event := new(BackingEigenTransferRestrictionsDisabled)
	if err := _BackingEigen.contract.UnpackLog(event, "TransferRestrictionsDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
