// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package StakeRootCompendium

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeRootCompendiumOperatorLeaf is an auto generated low-level Go binding around an user-defined struct.
type IStakeRootCompendiumOperatorLeaf struct {
	DelegatedStake *big.Int
	SlashableStake *big.Int
	ExtraData      [32]byte
}

// IStakeRootCompendiumProof is an auto generated low-level Go binding around an user-defined struct.
type IStakeRootCompendiumProof struct {
	X uint32
}

// IStakeRootCompendiumStakeRootSubmission is an auto generated low-level Go binding around an user-defined struct.
type IStakeRootCompendiumStakeRootSubmission struct {
	StakeRoot            [32]byte
	CalculationTimestamp uint32
	Confirmed            bool
}

// IStakeRootCompendiumStrategyAndMultiplier is an auto generated low-level Go binding around an user-defined struct.
type IStakeRootCompendiumStrategyAndMultiplier struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// OperatorSet is an auto generated low-level Go binding around an user-defined struct.
type OperatorSet struct {
	Avs           common.Address
	OperatorSetId uint32
}

// StakeRootCompendiumMetaData contains all meta data concerning the StakeRootCompendium contract.
var StakeRootCompendiumMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"},{\"name\":\"_avsDirectory\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"},{\"name\":\"_allocationManager\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"},{\"name\":\"_maxTotalCharge\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minBalanceThreshold\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_minProofsDuration\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_verifier\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_imageId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"MAX_TOTAL_CHARGE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_BALANCE_THRESHOLD\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_PROOFS_PREPAID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"REMOVED_INDEX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addOrModifyStrategiesAndMultipliers\",\"inputs\":[{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRootCompendium.StrategyAndMultiplier[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allocationManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"canWithdrawDepositBalance\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"chargePerOperatorSet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"chargePerStrategy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"confirmStakeRoot\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stakeRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegationManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"depositInfos\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"balance\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"lastDemandIncreaseTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"totalChargePerOperatorSetLastPaid\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"totalChargePerStrategyLastPaid\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getDepositBalance\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNumOperatorSets\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNumStakeRootSubmissions\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSetLeaves\",\"inputs\":[{\"name\":\"operatorSetIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"startOperatorIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numOperators\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRootCompendium.OperatorLeaf[]\",\"components\":[{\"name\":\"delegatedStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"slashableStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSetRoot\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"operatorLeaves\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRootCompendium.OperatorLeaf[]\",\"components\":[{\"name\":\"delegatedStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"slashableStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeRoot\",\"inputs\":[{\"name\":\"operatorSetsInStakeTree\",\"type\":\"tuple[]\",\"internalType\":\"structOperatorSet[]\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operatorSetRoots\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeRootSubmission\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRootCompendium.StakeRootSubmission\",\"components\":[{\"name\":\"stakeRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"calculationTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"confirmed\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakes\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"delegatedStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"slashableStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"imageId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rootConfirmer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_proofIntervalSeconds\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_chargePerStrategy\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"_chargePerOperatorSet\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"minDepositBalance\",\"inputs\":[{\"name\":\"numStrategies\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorSets\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"proofIntervalSeconds\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeOperatorSetsFromStakeTree\",\"inputs\":[{\"name\":\"operatorSetsToRemove\",\"type\":\"tuple[]\",\"internalType\":\"structOperatorSet[]\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeStrategiesAndMultipliers\",\"inputs\":[{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"strategies\",\"type\":\"address[]\",\"internalType\":\"contractIStrategy[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"rootConfirmer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setChargePerProof\",\"inputs\":[{\"name\":\"_chargePerStrategy\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"_chargePerOperatorSet\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOperatorExtraData\",\"inputs\":[{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOperatorSetExtraData\",\"inputs\":[{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"extraData\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setProofIntervalSeconds\",\"inputs\":[{\"name\":\"proofIntervalSeconds\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRootConfirmer\",\"inputs\":[{\"name\":\"_rootConfirmer\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRootSubmissions\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"stakeRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"calculationTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"confirmed\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalChargeLastUpdatedTimestamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalChargePerOperatorSetLastUpdate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalChargePerStrategyLastUpdate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifyStakeRoot\",\"inputs\":[{\"name\":\"calculationTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"stakeRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"chargeRecipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"indexChargePerProof\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"tuple\",\"internalType\":\"structIStakeRootCompendium.Proof\",\"components\":[{\"name\":\"x\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"operatorSetId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"payable\"},{\"type\":\"event\",\"name\":\"ImageIdSet\",\"inputs\":[{\"name\":\"newImageId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SnarkProofVerified\",\"inputs\":[{\"name\":\"journal\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"seal\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"VerifierSet\",\"inputs\":[{\"name\":\"newVerifier\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "",
}

// StakeRootCompendiumABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeRootCompendiumMetaData.ABI instead.
var StakeRootCompendiumABI = StakeRootCompendiumMetaData.ABI

// StakeRootCompendiumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeRootCompendiumMetaData.Bin instead.
var StakeRootCompendiumBin = StakeRootCompendiumMetaData.Bin

// DeployStakeRootCompendium deploys a new Ethereum contract, binding an instance of StakeRootCompendium to it.
func DeployStakeRootCompendium(auth *bind.TransactOpts, backend bind.ContractBackend, _delegationManager common.Address, _avsDirectory common.Address, _allocationManager common.Address, _maxTotalCharge *big.Int, _minBalanceThreshold *big.Int, _minProofsDuration *big.Int, _verifier common.Address, _imageId [32]byte) (common.Address, *types.Transaction, *StakeRootCompendium, error) {
	parsed, err := StakeRootCompendiumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeRootCompendiumBin), backend, _delegationManager, _avsDirectory, _allocationManager, _maxTotalCharge, _minBalanceThreshold, _minProofsDuration, _verifier, _imageId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeRootCompendium{StakeRootCompendiumCaller: StakeRootCompendiumCaller{contract: contract}, StakeRootCompendiumTransactor: StakeRootCompendiumTransactor{contract: contract}, StakeRootCompendiumFilterer: StakeRootCompendiumFilterer{contract: contract}}, nil
}

// StakeRootCompendium is an auto generated Go binding around an Ethereum contract.
type StakeRootCompendium struct {
	StakeRootCompendiumCaller     // Read-only binding to the contract
	StakeRootCompendiumTransactor // Write-only binding to the contract
	StakeRootCompendiumFilterer   // Log filterer for contract events
}

// StakeRootCompendiumCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeRootCompendiumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeRootCompendiumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeRootCompendiumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeRootCompendiumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeRootCompendiumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeRootCompendiumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeRootCompendiumSession struct {
	Contract     *StakeRootCompendium // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StakeRootCompendiumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeRootCompendiumCallerSession struct {
	Contract *StakeRootCompendiumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// StakeRootCompendiumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeRootCompendiumTransactorSession struct {
	Contract     *StakeRootCompendiumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// StakeRootCompendiumRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeRootCompendiumRaw struct {
	Contract *StakeRootCompendium // Generic contract binding to access the raw methods on
}

// StakeRootCompendiumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeRootCompendiumCallerRaw struct {
	Contract *StakeRootCompendiumCaller // Generic read-only contract binding to access the raw methods on
}

// StakeRootCompendiumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeRootCompendiumTransactorRaw struct {
	Contract *StakeRootCompendiumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeRootCompendium creates a new instance of StakeRootCompendium, bound to a specific deployed contract.
func NewStakeRootCompendium(address common.Address, backend bind.ContractBackend) (*StakeRootCompendium, error) {
	contract, err := bindStakeRootCompendium(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendium{StakeRootCompendiumCaller: StakeRootCompendiumCaller{contract: contract}, StakeRootCompendiumTransactor: StakeRootCompendiumTransactor{contract: contract}, StakeRootCompendiumFilterer: StakeRootCompendiumFilterer{contract: contract}}, nil
}

// NewStakeRootCompendiumCaller creates a new read-only instance of StakeRootCompendium, bound to a specific deployed contract.
func NewStakeRootCompendiumCaller(address common.Address, caller bind.ContractCaller) (*StakeRootCompendiumCaller, error) {
	contract, err := bindStakeRootCompendium(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumCaller{contract: contract}, nil
}

// NewStakeRootCompendiumTransactor creates a new write-only instance of StakeRootCompendium, bound to a specific deployed contract.
func NewStakeRootCompendiumTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeRootCompendiumTransactor, error) {
	contract, err := bindStakeRootCompendium(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumTransactor{contract: contract}, nil
}

// NewStakeRootCompendiumFilterer creates a new log filterer instance of StakeRootCompendium, bound to a specific deployed contract.
func NewStakeRootCompendiumFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeRootCompendiumFilterer, error) {
	contract, err := bindStakeRootCompendium(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumFilterer{contract: contract}, nil
}

// bindStakeRootCompendium binds a generic wrapper to an already deployed contract.
func bindStakeRootCompendium(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StakeRootCompendiumMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeRootCompendium *StakeRootCompendiumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeRootCompendium.Contract.StakeRootCompendiumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeRootCompendium *StakeRootCompendiumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.StakeRootCompendiumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeRootCompendium *StakeRootCompendiumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.StakeRootCompendiumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeRootCompendium *StakeRootCompendiumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeRootCompendium.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeRootCompendium *StakeRootCompendiumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeRootCompendium *StakeRootCompendiumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.contract.Transact(opts, method, params...)
}

// MAXTOTALCHARGE is a free data retrieval call binding the contract method 0x3264c71b.
//
// Solidity: function MAX_TOTAL_CHARGE() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) MAXTOTALCHARGE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "MAX_TOTAL_CHARGE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTOTALCHARGE is a free data retrieval call binding the contract method 0x3264c71b.
//
// Solidity: function MAX_TOTAL_CHARGE() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) MAXTOTALCHARGE() (*big.Int, error) {
	return _StakeRootCompendium.Contract.MAXTOTALCHARGE(&_StakeRootCompendium.CallOpts)
}

// MAXTOTALCHARGE is a free data retrieval call binding the contract method 0x3264c71b.
//
// Solidity: function MAX_TOTAL_CHARGE() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) MAXTOTALCHARGE() (*big.Int, error) {
	return _StakeRootCompendium.Contract.MAXTOTALCHARGE(&_StakeRootCompendium.CallOpts)
}

// MINBALANCETHRESHOLD is a free data retrieval call binding the contract method 0xc442daee.
//
// Solidity: function MIN_BALANCE_THRESHOLD() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) MINBALANCETHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "MIN_BALANCE_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINBALANCETHRESHOLD is a free data retrieval call binding the contract method 0xc442daee.
//
// Solidity: function MIN_BALANCE_THRESHOLD() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) MINBALANCETHRESHOLD() (*big.Int, error) {
	return _StakeRootCompendium.Contract.MINBALANCETHRESHOLD(&_StakeRootCompendium.CallOpts)
}

// MINBALANCETHRESHOLD is a free data retrieval call binding the contract method 0xc442daee.
//
// Solidity: function MIN_BALANCE_THRESHOLD() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) MINBALANCETHRESHOLD() (*big.Int, error) {
	return _StakeRootCompendium.Contract.MINBALANCETHRESHOLD(&_StakeRootCompendium.CallOpts)
}

// MINPROOFSPREPAID is a free data retrieval call binding the contract method 0x54a21db2.
//
// Solidity: function MIN_PROOFS_PREPAID() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) MINPROOFSPREPAID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "MIN_PROOFS_PREPAID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINPROOFSPREPAID is a free data retrieval call binding the contract method 0x54a21db2.
//
// Solidity: function MIN_PROOFS_PREPAID() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) MINPROOFSPREPAID() (*big.Int, error) {
	return _StakeRootCompendium.Contract.MINPROOFSPREPAID(&_StakeRootCompendium.CallOpts)
}

// MINPROOFSPREPAID is a free data retrieval call binding the contract method 0x54a21db2.
//
// Solidity: function MIN_PROOFS_PREPAID() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) MINPROOFSPREPAID() (*big.Int, error) {
	return _StakeRootCompendium.Contract.MINPROOFSPREPAID(&_StakeRootCompendium.CallOpts)
}

// REMOVEDINDEX is a free data retrieval call binding the contract method 0x0d6098d6.
//
// Solidity: function REMOVED_INDEX() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumCaller) REMOVEDINDEX(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "REMOVED_INDEX")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// REMOVEDINDEX is a free data retrieval call binding the contract method 0x0d6098d6.
//
// Solidity: function REMOVED_INDEX() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumSession) REMOVEDINDEX() (uint32, error) {
	return _StakeRootCompendium.Contract.REMOVEDINDEX(&_StakeRootCompendium.CallOpts)
}

// REMOVEDINDEX is a free data retrieval call binding the contract method 0x0d6098d6.
//
// Solidity: function REMOVED_INDEX() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) REMOVEDINDEX() (uint32, error) {
	return _StakeRootCompendium.Contract.REMOVEDINDEX(&_StakeRootCompendium.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCaller) AllocationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "allocationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumSession) AllocationManager() (common.Address, error) {
	return _StakeRootCompendium.Contract.AllocationManager(&_StakeRootCompendium.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) AllocationManager() (common.Address, error) {
	return _StakeRootCompendium.Contract.AllocationManager(&_StakeRootCompendium.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumSession) AvsDirectory() (common.Address, error) {
	return _StakeRootCompendium.Contract.AvsDirectory(&_StakeRootCompendium.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) AvsDirectory() (common.Address, error) {
	return _StakeRootCompendium.Contract.AvsDirectory(&_StakeRootCompendium.CallOpts)
}

// CanWithdrawDepositBalance is a free data retrieval call binding the contract method 0x71616631.
//
// Solidity: function canWithdrawDepositBalance((address,uint32) operatorSet) view returns(bool)
func (_StakeRootCompendium *StakeRootCompendiumCaller) CanWithdrawDepositBalance(opts *bind.CallOpts, operatorSet OperatorSet) (bool, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "canWithdrawDepositBalance", operatorSet)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanWithdrawDepositBalance is a free data retrieval call binding the contract method 0x71616631.
//
// Solidity: function canWithdrawDepositBalance((address,uint32) operatorSet) view returns(bool)
func (_StakeRootCompendium *StakeRootCompendiumSession) CanWithdrawDepositBalance(operatorSet OperatorSet) (bool, error) {
	return _StakeRootCompendium.Contract.CanWithdrawDepositBalance(&_StakeRootCompendium.CallOpts, operatorSet)
}

// CanWithdrawDepositBalance is a free data retrieval call binding the contract method 0x71616631.
//
// Solidity: function canWithdrawDepositBalance((address,uint32) operatorSet) view returns(bool)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) CanWithdrawDepositBalance(operatorSet OperatorSet) (bool, error) {
	return _StakeRootCompendium.Contract.CanWithdrawDepositBalance(&_StakeRootCompendium.CallOpts, operatorSet)
}

// ChargePerOperatorSet is a free data retrieval call binding the contract method 0x2e930d26.
//
// Solidity: function chargePerOperatorSet() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCaller) ChargePerOperatorSet(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "chargePerOperatorSet")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChargePerOperatorSet is a free data retrieval call binding the contract method 0x2e930d26.
//
// Solidity: function chargePerOperatorSet() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumSession) ChargePerOperatorSet() (*big.Int, error) {
	return _StakeRootCompendium.Contract.ChargePerOperatorSet(&_StakeRootCompendium.CallOpts)
}

// ChargePerOperatorSet is a free data retrieval call binding the contract method 0x2e930d26.
//
// Solidity: function chargePerOperatorSet() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) ChargePerOperatorSet() (*big.Int, error) {
	return _StakeRootCompendium.Contract.ChargePerOperatorSet(&_StakeRootCompendium.CallOpts)
}

// ChargePerStrategy is a free data retrieval call binding the contract method 0x08c76694.
//
// Solidity: function chargePerStrategy() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCaller) ChargePerStrategy(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "chargePerStrategy")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChargePerStrategy is a free data retrieval call binding the contract method 0x08c76694.
//
// Solidity: function chargePerStrategy() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumSession) ChargePerStrategy() (*big.Int, error) {
	return _StakeRootCompendium.Contract.ChargePerStrategy(&_StakeRootCompendium.CallOpts)
}

// ChargePerStrategy is a free data retrieval call binding the contract method 0x08c76694.
//
// Solidity: function chargePerStrategy() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) ChargePerStrategy() (*big.Int, error) {
	return _StakeRootCompendium.Contract.ChargePerStrategy(&_StakeRootCompendium.CallOpts)
}

// DelegationManager is a free data retrieval call binding the contract method 0xea4d3c9b.
//
// Solidity: function delegationManager() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCaller) DelegationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "delegationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DelegationManager is a free data retrieval call binding the contract method 0xea4d3c9b.
//
// Solidity: function delegationManager() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumSession) DelegationManager() (common.Address, error) {
	return _StakeRootCompendium.Contract.DelegationManager(&_StakeRootCompendium.CallOpts)
}

// DelegationManager is a free data retrieval call binding the contract method 0xea4d3c9b.
//
// Solidity: function delegationManager() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) DelegationManager() (common.Address, error) {
	return _StakeRootCompendium.Contract.DelegationManager(&_StakeRootCompendium.CallOpts)
}

// DepositInfos is a free data retrieval call binding the contract method 0xbb1bb891.
//
// Solidity: function depositInfos(address , uint32 ) view returns(uint96 balance, uint32 lastDemandIncreaseTimestamp, uint96 totalChargePerOperatorSetLastPaid, uint96 totalChargePerStrategyLastPaid)
func (_StakeRootCompendium *StakeRootCompendiumCaller) DepositInfos(opts *bind.CallOpts, arg0 common.Address, arg1 uint32) (struct {
	Balance                           *big.Int
	LastDemandIncreaseTimestamp       uint32
	TotalChargePerOperatorSetLastPaid *big.Int
	TotalChargePerStrategyLastPaid    *big.Int
}, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "depositInfos", arg0, arg1)

	outstruct := new(struct {
		Balance                           *big.Int
		LastDemandIncreaseTimestamp       uint32
		TotalChargePerOperatorSetLastPaid *big.Int
		TotalChargePerStrategyLastPaid    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LastDemandIncreaseTimestamp = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.TotalChargePerOperatorSetLastPaid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.TotalChargePerStrategyLastPaid = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// DepositInfos is a free data retrieval call binding the contract method 0xbb1bb891.
//
// Solidity: function depositInfos(address , uint32 ) view returns(uint96 balance, uint32 lastDemandIncreaseTimestamp, uint96 totalChargePerOperatorSetLastPaid, uint96 totalChargePerStrategyLastPaid)
func (_StakeRootCompendium *StakeRootCompendiumSession) DepositInfos(arg0 common.Address, arg1 uint32) (struct {
	Balance                           *big.Int
	LastDemandIncreaseTimestamp       uint32
	TotalChargePerOperatorSetLastPaid *big.Int
	TotalChargePerStrategyLastPaid    *big.Int
}, error) {
	return _StakeRootCompendium.Contract.DepositInfos(&_StakeRootCompendium.CallOpts, arg0, arg1)
}

// DepositInfos is a free data retrieval call binding the contract method 0xbb1bb891.
//
// Solidity: function depositInfos(address , uint32 ) view returns(uint96 balance, uint32 lastDemandIncreaseTimestamp, uint96 totalChargePerOperatorSetLastPaid, uint96 totalChargePerStrategyLastPaid)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) DepositInfos(arg0 common.Address, arg1 uint32) (struct {
	Balance                           *big.Int
	LastDemandIncreaseTimestamp       uint32
	TotalChargePerOperatorSetLastPaid *big.Int
	TotalChargePerStrategyLastPaid    *big.Int
}, error) {
	return _StakeRootCompendium.Contract.DepositInfos(&_StakeRootCompendium.CallOpts, arg0, arg1)
}

// GetDepositBalance is a free data retrieval call binding the contract method 0x2156171a.
//
// Solidity: function getDepositBalance((address,uint32) operatorSet) view returns(uint256 balance)
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetDepositBalance(opts *bind.CallOpts, operatorSet OperatorSet) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getDepositBalance", operatorSet)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositBalance is a free data retrieval call binding the contract method 0x2156171a.
//
// Solidity: function getDepositBalance((address,uint32) operatorSet) view returns(uint256 balance)
func (_StakeRootCompendium *StakeRootCompendiumSession) GetDepositBalance(operatorSet OperatorSet) (*big.Int, error) {
	return _StakeRootCompendium.Contract.GetDepositBalance(&_StakeRootCompendium.CallOpts, operatorSet)
}

// GetDepositBalance is a free data retrieval call binding the contract method 0x2156171a.
//
// Solidity: function getDepositBalance((address,uint32) operatorSet) view returns(uint256 balance)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetDepositBalance(operatorSet OperatorSet) (*big.Int, error) {
	return _StakeRootCompendium.Contract.GetDepositBalance(&_StakeRootCompendium.CallOpts, operatorSet)
}

// GetNumOperatorSets is a free data retrieval call binding the contract method 0x11bea0d1.
//
// Solidity: function getNumOperatorSets() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetNumOperatorSets(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getNumOperatorSets")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumOperatorSets is a free data retrieval call binding the contract method 0x11bea0d1.
//
// Solidity: function getNumOperatorSets() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) GetNumOperatorSets() (*big.Int, error) {
	return _StakeRootCompendium.Contract.GetNumOperatorSets(&_StakeRootCompendium.CallOpts)
}

// GetNumOperatorSets is a free data retrieval call binding the contract method 0x11bea0d1.
//
// Solidity: function getNumOperatorSets() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetNumOperatorSets() (*big.Int, error) {
	return _StakeRootCompendium.Contract.GetNumOperatorSets(&_StakeRootCompendium.CallOpts)
}

// GetNumStakeRootSubmissions is a free data retrieval call binding the contract method 0xd985c7b3.
//
// Solidity: function getNumStakeRootSubmissions() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetNumStakeRootSubmissions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getNumStakeRootSubmissions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumStakeRootSubmissions is a free data retrieval call binding the contract method 0xd985c7b3.
//
// Solidity: function getNumStakeRootSubmissions() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) GetNumStakeRootSubmissions() (*big.Int, error) {
	return _StakeRootCompendium.Contract.GetNumStakeRootSubmissions(&_StakeRootCompendium.CallOpts)
}

// GetNumStakeRootSubmissions is a free data retrieval call binding the contract method 0xd985c7b3.
//
// Solidity: function getNumStakeRootSubmissions() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetNumStakeRootSubmissions() (*big.Int, error) {
	return _StakeRootCompendium.Contract.GetNumStakeRootSubmissions(&_StakeRootCompendium.CallOpts)
}

// GetOperatorSetLeaves is a free data retrieval call binding the contract method 0x732d7398.
//
// Solidity: function getOperatorSetLeaves(uint256 operatorSetIndex, uint256 startOperatorIndex, uint256 numOperators) view returns((address,uint32), address[], (uint256,uint256,bytes32)[])
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetOperatorSetLeaves(opts *bind.CallOpts, operatorSetIndex *big.Int, startOperatorIndex *big.Int, numOperators *big.Int) (OperatorSet, []common.Address, []IStakeRootCompendiumOperatorLeaf, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getOperatorSetLeaves", operatorSetIndex, startOperatorIndex, numOperators)

	if err != nil {
		return *new(OperatorSet), *new([]common.Address), *new([]IStakeRootCompendiumOperatorLeaf), err
	}

	out0 := *abi.ConvertType(out[0], new(OperatorSet)).(*OperatorSet)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	out2 := *abi.ConvertType(out[2], new([]IStakeRootCompendiumOperatorLeaf)).(*[]IStakeRootCompendiumOperatorLeaf)

	return out0, out1, out2, err

}

// GetOperatorSetLeaves is a free data retrieval call binding the contract method 0x732d7398.
//
// Solidity: function getOperatorSetLeaves(uint256 operatorSetIndex, uint256 startOperatorIndex, uint256 numOperators) view returns((address,uint32), address[], (uint256,uint256,bytes32)[])
func (_StakeRootCompendium *StakeRootCompendiumSession) GetOperatorSetLeaves(operatorSetIndex *big.Int, startOperatorIndex *big.Int, numOperators *big.Int) (OperatorSet, []common.Address, []IStakeRootCompendiumOperatorLeaf, error) {
	return _StakeRootCompendium.Contract.GetOperatorSetLeaves(&_StakeRootCompendium.CallOpts, operatorSetIndex, startOperatorIndex, numOperators)
}

// GetOperatorSetLeaves is a free data retrieval call binding the contract method 0x732d7398.
//
// Solidity: function getOperatorSetLeaves(uint256 operatorSetIndex, uint256 startOperatorIndex, uint256 numOperators) view returns((address,uint32), address[], (uint256,uint256,bytes32)[])
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetOperatorSetLeaves(operatorSetIndex *big.Int, startOperatorIndex *big.Int, numOperators *big.Int) (OperatorSet, []common.Address, []IStakeRootCompendiumOperatorLeaf, error) {
	return _StakeRootCompendium.Contract.GetOperatorSetLeaves(&_StakeRootCompendium.CallOpts, operatorSetIndex, startOperatorIndex, numOperators)
}

// GetOperatorSetRoot is a free data retrieval call binding the contract method 0x117def3a.
//
// Solidity: function getOperatorSetRoot((address,uint32) operatorSet, address[] operators, (uint256,uint256,bytes32)[] operatorLeaves) view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetOperatorSetRoot(opts *bind.CallOpts, operatorSet OperatorSet, operators []common.Address, operatorLeaves []IStakeRootCompendiumOperatorLeaf) ([32]byte, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getOperatorSetRoot", operatorSet, operators, operatorLeaves)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetOperatorSetRoot is a free data retrieval call binding the contract method 0x117def3a.
//
// Solidity: function getOperatorSetRoot((address,uint32) operatorSet, address[] operators, (uint256,uint256,bytes32)[] operatorLeaves) view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumSession) GetOperatorSetRoot(operatorSet OperatorSet, operators []common.Address, operatorLeaves []IStakeRootCompendiumOperatorLeaf) ([32]byte, error) {
	return _StakeRootCompendium.Contract.GetOperatorSetRoot(&_StakeRootCompendium.CallOpts, operatorSet, operators, operatorLeaves)
}

// GetOperatorSetRoot is a free data retrieval call binding the contract method 0x117def3a.
//
// Solidity: function getOperatorSetRoot((address,uint32) operatorSet, address[] operators, (uint256,uint256,bytes32)[] operatorLeaves) view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetOperatorSetRoot(operatorSet OperatorSet, operators []common.Address, operatorLeaves []IStakeRootCompendiumOperatorLeaf) ([32]byte, error) {
	return _StakeRootCompendium.Contract.GetOperatorSetRoot(&_StakeRootCompendium.CallOpts, operatorSet, operators, operatorLeaves)
}

// GetStakeRoot is a free data retrieval call binding the contract method 0x3d5f0fd6.
//
// Solidity: function getStakeRoot((address,uint32)[] operatorSetsInStakeTree, bytes32[] operatorSetRoots) view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetStakeRoot(opts *bind.CallOpts, operatorSetsInStakeTree []OperatorSet, operatorSetRoots [][32]byte) ([32]byte, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getStakeRoot", operatorSetsInStakeTree, operatorSetRoots)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetStakeRoot is a free data retrieval call binding the contract method 0x3d5f0fd6.
//
// Solidity: function getStakeRoot((address,uint32)[] operatorSetsInStakeTree, bytes32[] operatorSetRoots) view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumSession) GetStakeRoot(operatorSetsInStakeTree []OperatorSet, operatorSetRoots [][32]byte) ([32]byte, error) {
	return _StakeRootCompendium.Contract.GetStakeRoot(&_StakeRootCompendium.CallOpts, operatorSetsInStakeTree, operatorSetRoots)
}

// GetStakeRoot is a free data retrieval call binding the contract method 0x3d5f0fd6.
//
// Solidity: function getStakeRoot((address,uint32)[] operatorSetsInStakeTree, bytes32[] operatorSetRoots) view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetStakeRoot(operatorSetsInStakeTree []OperatorSet, operatorSetRoots [][32]byte) ([32]byte, error) {
	return _StakeRootCompendium.Contract.GetStakeRoot(&_StakeRootCompendium.CallOpts, operatorSetsInStakeTree, operatorSetRoots)
}

// GetStakeRootSubmission is a free data retrieval call binding the contract method 0x901ad96e.
//
// Solidity: function getStakeRootSubmission(uint32 index) view returns((bytes32,uint32,bool))
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetStakeRootSubmission(opts *bind.CallOpts, index uint32) (IStakeRootCompendiumStakeRootSubmission, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getStakeRootSubmission", index)

	if err != nil {
		return *new(IStakeRootCompendiumStakeRootSubmission), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRootCompendiumStakeRootSubmission)).(*IStakeRootCompendiumStakeRootSubmission)

	return out0, err

}

// GetStakeRootSubmission is a free data retrieval call binding the contract method 0x901ad96e.
//
// Solidity: function getStakeRootSubmission(uint32 index) view returns((bytes32,uint32,bool))
func (_StakeRootCompendium *StakeRootCompendiumSession) GetStakeRootSubmission(index uint32) (IStakeRootCompendiumStakeRootSubmission, error) {
	return _StakeRootCompendium.Contract.GetStakeRootSubmission(&_StakeRootCompendium.CallOpts, index)
}

// GetStakeRootSubmission is a free data retrieval call binding the contract method 0x901ad96e.
//
// Solidity: function getStakeRootSubmission(uint32 index) view returns((bytes32,uint32,bool))
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetStakeRootSubmission(index uint32) (IStakeRootCompendiumStakeRootSubmission, error) {
	return _StakeRootCompendium.Contract.GetStakeRootSubmission(&_StakeRootCompendium.CallOpts, index)
}

// GetStakes is a free data retrieval call binding the contract method 0xdb5a5711.
//
// Solidity: function getStakes((address,uint32) operatorSet, address operator) view returns(uint256 delegatedStake, uint256 slashableStake)
func (_StakeRootCompendium *StakeRootCompendiumCaller) GetStakes(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (struct {
	DelegatedStake *big.Int
	SlashableStake *big.Int
}, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "getStakes", operatorSet, operator)

	outstruct := new(struct {
		DelegatedStake *big.Int
		SlashableStake *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DelegatedStake = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.SlashableStake = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetStakes is a free data retrieval call binding the contract method 0xdb5a5711.
//
// Solidity: function getStakes((address,uint32) operatorSet, address operator) view returns(uint256 delegatedStake, uint256 slashableStake)
func (_StakeRootCompendium *StakeRootCompendiumSession) GetStakes(operatorSet OperatorSet, operator common.Address) (struct {
	DelegatedStake *big.Int
	SlashableStake *big.Int
}, error) {
	return _StakeRootCompendium.Contract.GetStakes(&_StakeRootCompendium.CallOpts, operatorSet, operator)
}

// GetStakes is a free data retrieval call binding the contract method 0xdb5a5711.
//
// Solidity: function getStakes((address,uint32) operatorSet, address operator) view returns(uint256 delegatedStake, uint256 slashableStake)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) GetStakes(operatorSet OperatorSet, operator common.Address) (struct {
	DelegatedStake *big.Int
	SlashableStake *big.Int
}, error) {
	return _StakeRootCompendium.Contract.GetStakes(&_StakeRootCompendium.CallOpts, operatorSet, operator)
}

// ImageId is a free data retrieval call binding the contract method 0xef3f7dd5.
//
// Solidity: function imageId() view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumCaller) ImageId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "imageId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ImageId is a free data retrieval call binding the contract method 0xef3f7dd5.
//
// Solidity: function imageId() view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumSession) ImageId() ([32]byte, error) {
	return _StakeRootCompendium.Contract.ImageId(&_StakeRootCompendium.CallOpts)
}

// ImageId is a free data retrieval call binding the contract method 0xef3f7dd5.
//
// Solidity: function imageId() view returns(bytes32)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) ImageId() ([32]byte, error) {
	return _StakeRootCompendium.Contract.ImageId(&_StakeRootCompendium.CallOpts)
}

// MinDepositBalance is a free data retrieval call binding the contract method 0xca7bfc9d.
//
// Solidity: function minDepositBalance(uint256 numStrategies) view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) MinDepositBalance(opts *bind.CallOpts, numStrategies *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "minDepositBalance", numStrategies)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinDepositBalance is a free data retrieval call binding the contract method 0xca7bfc9d.
//
// Solidity: function minDepositBalance(uint256 numStrategies) view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) MinDepositBalance(numStrategies *big.Int) (*big.Int, error) {
	return _StakeRootCompendium.Contract.MinDepositBalance(&_StakeRootCompendium.CallOpts, numStrategies)
}

// MinDepositBalance is a free data retrieval call binding the contract method 0xca7bfc9d.
//
// Solidity: function minDepositBalance(uint256 numStrategies) view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) MinDepositBalance(numStrategies *big.Int) (*big.Int, error) {
	return _StakeRootCompendium.Contract.MinDepositBalance(&_StakeRootCompendium.CallOpts, numStrategies)
}

// OperatorSets is a free data retrieval call binding the contract method 0xc45d3389.
//
// Solidity: function operatorSets(uint256 ) view returns(address avs, uint32 operatorSetId)
func (_StakeRootCompendium *StakeRootCompendiumCaller) OperatorSets(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Avs           common.Address
	OperatorSetId uint32
}, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "operatorSets", arg0)

	outstruct := new(struct {
		Avs           common.Address
		OperatorSetId uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Avs = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.OperatorSetId = *abi.ConvertType(out[1], new(uint32)).(*uint32)

	return *outstruct, err

}

// OperatorSets is a free data retrieval call binding the contract method 0xc45d3389.
//
// Solidity: function operatorSets(uint256 ) view returns(address avs, uint32 operatorSetId)
func (_StakeRootCompendium *StakeRootCompendiumSession) OperatorSets(arg0 *big.Int) (struct {
	Avs           common.Address
	OperatorSetId uint32
}, error) {
	return _StakeRootCompendium.Contract.OperatorSets(&_StakeRootCompendium.CallOpts, arg0)
}

// OperatorSets is a free data retrieval call binding the contract method 0xc45d3389.
//
// Solidity: function operatorSets(uint256 ) view returns(address avs, uint32 operatorSetId)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) OperatorSets(arg0 *big.Int) (struct {
	Avs           common.Address
	OperatorSetId uint32
}, error) {
	return _StakeRootCompendium.Contract.OperatorSets(&_StakeRootCompendium.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumSession) Owner() (common.Address, error) {
	return _StakeRootCompendium.Contract.Owner(&_StakeRootCompendium.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) Owner() (common.Address, error) {
	return _StakeRootCompendium.Contract.Owner(&_StakeRootCompendium.CallOpts)
}

// ProofIntervalSeconds is a free data retrieval call binding the contract method 0xa992c74a.
//
// Solidity: function proofIntervalSeconds() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumCaller) ProofIntervalSeconds(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "proofIntervalSeconds")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ProofIntervalSeconds is a free data retrieval call binding the contract method 0xa992c74a.
//
// Solidity: function proofIntervalSeconds() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumSession) ProofIntervalSeconds() (uint32, error) {
	return _StakeRootCompendium.Contract.ProofIntervalSeconds(&_StakeRootCompendium.CallOpts)
}

// ProofIntervalSeconds is a free data retrieval call binding the contract method 0xa992c74a.
//
// Solidity: function proofIntervalSeconds() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) ProofIntervalSeconds() (uint32, error) {
	return _StakeRootCompendium.Contract.ProofIntervalSeconds(&_StakeRootCompendium.CallOpts)
}

// RootConfirmer is a free data retrieval call binding the contract method 0x3716f5f9.
//
// Solidity: function rootConfirmer() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCaller) RootConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "rootConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RootConfirmer is a free data retrieval call binding the contract method 0x3716f5f9.
//
// Solidity: function rootConfirmer() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumSession) RootConfirmer() (common.Address, error) {
	return _StakeRootCompendium.Contract.RootConfirmer(&_StakeRootCompendium.CallOpts)
}

// RootConfirmer is a free data retrieval call binding the contract method 0x3716f5f9.
//
// Solidity: function rootConfirmer() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) RootConfirmer() (common.Address, error) {
	return _StakeRootCompendium.Contract.RootConfirmer(&_StakeRootCompendium.CallOpts)
}

// StakeRootSubmissions is a free data retrieval call binding the contract method 0xfe225d8b.
//
// Solidity: function stakeRootSubmissions(uint256 ) view returns(bytes32 stakeRoot, uint32 calculationTimestamp, bool confirmed)
func (_StakeRootCompendium *StakeRootCompendiumCaller) StakeRootSubmissions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	StakeRoot            [32]byte
	CalculationTimestamp uint32
	Confirmed            bool
}, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "stakeRootSubmissions", arg0)

	outstruct := new(struct {
		StakeRoot            [32]byte
		CalculationTimestamp uint32
		Confirmed            bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StakeRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.CalculationTimestamp = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.Confirmed = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// StakeRootSubmissions is a free data retrieval call binding the contract method 0xfe225d8b.
//
// Solidity: function stakeRootSubmissions(uint256 ) view returns(bytes32 stakeRoot, uint32 calculationTimestamp, bool confirmed)
func (_StakeRootCompendium *StakeRootCompendiumSession) StakeRootSubmissions(arg0 *big.Int) (struct {
	StakeRoot            [32]byte
	CalculationTimestamp uint32
	Confirmed            bool
}, error) {
	return _StakeRootCompendium.Contract.StakeRootSubmissions(&_StakeRootCompendium.CallOpts, arg0)
}

// StakeRootSubmissions is a free data retrieval call binding the contract method 0xfe225d8b.
//
// Solidity: function stakeRootSubmissions(uint256 ) view returns(bytes32 stakeRoot, uint32 calculationTimestamp, bool confirmed)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) StakeRootSubmissions(arg0 *big.Int) (struct {
	StakeRoot            [32]byte
	CalculationTimestamp uint32
	Confirmed            bool
}, error) {
	return _StakeRootCompendium.Contract.StakeRootSubmissions(&_StakeRootCompendium.CallOpts, arg0)
}

// TotalChargeLastUpdatedTimestamp is a free data retrieval call binding the contract method 0xcca56019.
//
// Solidity: function totalChargeLastUpdatedTimestamp() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumCaller) TotalChargeLastUpdatedTimestamp(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "totalChargeLastUpdatedTimestamp")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalChargeLastUpdatedTimestamp is a free data retrieval call binding the contract method 0xcca56019.
//
// Solidity: function totalChargeLastUpdatedTimestamp() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumSession) TotalChargeLastUpdatedTimestamp() (uint32, error) {
	return _StakeRootCompendium.Contract.TotalChargeLastUpdatedTimestamp(&_StakeRootCompendium.CallOpts)
}

// TotalChargeLastUpdatedTimestamp is a free data retrieval call binding the contract method 0xcca56019.
//
// Solidity: function totalChargeLastUpdatedTimestamp() view returns(uint32)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) TotalChargeLastUpdatedTimestamp() (uint32, error) {
	return _StakeRootCompendium.Contract.TotalChargeLastUpdatedTimestamp(&_StakeRootCompendium.CallOpts)
}

// TotalChargePerOperatorSetLastUpdate is a free data retrieval call binding the contract method 0x5d466205.
//
// Solidity: function totalChargePerOperatorSetLastUpdate() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCaller) TotalChargePerOperatorSetLastUpdate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "totalChargePerOperatorSetLastUpdate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalChargePerOperatorSetLastUpdate is a free data retrieval call binding the contract method 0x5d466205.
//
// Solidity: function totalChargePerOperatorSetLastUpdate() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumSession) TotalChargePerOperatorSetLastUpdate() (*big.Int, error) {
	return _StakeRootCompendium.Contract.TotalChargePerOperatorSetLastUpdate(&_StakeRootCompendium.CallOpts)
}

// TotalChargePerOperatorSetLastUpdate is a free data retrieval call binding the contract method 0x5d466205.
//
// Solidity: function totalChargePerOperatorSetLastUpdate() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) TotalChargePerOperatorSetLastUpdate() (*big.Int, error) {
	return _StakeRootCompendium.Contract.TotalChargePerOperatorSetLastUpdate(&_StakeRootCompendium.CallOpts)
}

// TotalChargePerStrategyLastUpdate is a free data retrieval call binding the contract method 0x016769e0.
//
// Solidity: function totalChargePerStrategyLastUpdate() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCaller) TotalChargePerStrategyLastUpdate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "totalChargePerStrategyLastUpdate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalChargePerStrategyLastUpdate is a free data retrieval call binding the contract method 0x016769e0.
//
// Solidity: function totalChargePerStrategyLastUpdate() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumSession) TotalChargePerStrategyLastUpdate() (*big.Int, error) {
	return _StakeRootCompendium.Contract.TotalChargePerStrategyLastUpdate(&_StakeRootCompendium.CallOpts)
}

// TotalChargePerStrategyLastUpdate is a free data retrieval call binding the contract method 0x016769e0.
//
// Solidity: function totalChargePerStrategyLastUpdate() view returns(uint96)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) TotalChargePerStrategyLastUpdate() (*big.Int, error) {
	return _StakeRootCompendium.Contract.TotalChargePerStrategyLastUpdate(&_StakeRootCompendium.CallOpts)
}

// TotalStrategies is a free data retrieval call binding the contract method 0xf96d7b80.
//
// Solidity: function totalStrategies() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCaller) TotalStrategies(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "totalStrategies")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalStrategies is a free data retrieval call binding the contract method 0xf96d7b80.
//
// Solidity: function totalStrategies() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) TotalStrategies() (*big.Int, error) {
	return _StakeRootCompendium.Contract.TotalStrategies(&_StakeRootCompendium.CallOpts)
}

// TotalStrategies is a free data retrieval call binding the contract method 0xf96d7b80.
//
// Solidity: function totalStrategies() view returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) TotalStrategies() (*big.Int, error) {
	return _StakeRootCompendium.Contract.TotalStrategies(&_StakeRootCompendium.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeRootCompendium.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumSession) Verifier() (common.Address, error) {
	return _StakeRootCompendium.Contract.Verifier(&_StakeRootCompendium.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_StakeRootCompendium *StakeRootCompendiumCallerSession) Verifier() (common.Address, error) {
	return _StakeRootCompendium.Contract.Verifier(&_StakeRootCompendium.CallOpts)
}

// AddOrModifyStrategiesAndMultipliers is a paid mutator transaction binding the contract method 0xd1ee8b08.
//
// Solidity: function addOrModifyStrategiesAndMultipliers(uint32 operatorSetId, (address,uint96)[] strategiesAndMultipliers) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) AddOrModifyStrategiesAndMultipliers(opts *bind.TransactOpts, operatorSetId uint32, strategiesAndMultipliers []IStakeRootCompendiumStrategyAndMultiplier) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "addOrModifyStrategiesAndMultipliers", operatorSetId, strategiesAndMultipliers)
}

// AddOrModifyStrategiesAndMultipliers is a paid mutator transaction binding the contract method 0xd1ee8b08.
//
// Solidity: function addOrModifyStrategiesAndMultipliers(uint32 operatorSetId, (address,uint96)[] strategiesAndMultipliers) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) AddOrModifyStrategiesAndMultipliers(operatorSetId uint32, strategiesAndMultipliers []IStakeRootCompendiumStrategyAndMultiplier) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.AddOrModifyStrategiesAndMultipliers(&_StakeRootCompendium.TransactOpts, operatorSetId, strategiesAndMultipliers)
}

// AddOrModifyStrategiesAndMultipliers is a paid mutator transaction binding the contract method 0xd1ee8b08.
//
// Solidity: function addOrModifyStrategiesAndMultipliers(uint32 operatorSetId, (address,uint96)[] strategiesAndMultipliers) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) AddOrModifyStrategiesAndMultipliers(operatorSetId uint32, strategiesAndMultipliers []IStakeRootCompendiumStrategyAndMultiplier) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.AddOrModifyStrategiesAndMultipliers(&_StakeRootCompendium.TransactOpts, operatorSetId, strategiesAndMultipliers)
}

// ConfirmStakeRoot is a paid mutator transaction binding the contract method 0xbf855cc8.
//
// Solidity: function confirmStakeRoot(uint32 index, bytes32 stakeRoot) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) ConfirmStakeRoot(opts *bind.TransactOpts, index uint32, stakeRoot [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "confirmStakeRoot", index, stakeRoot)
}

// ConfirmStakeRoot is a paid mutator transaction binding the contract method 0xbf855cc8.
//
// Solidity: function confirmStakeRoot(uint32 index, bytes32 stakeRoot) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) ConfirmStakeRoot(index uint32, stakeRoot [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.ConfirmStakeRoot(&_StakeRootCompendium.TransactOpts, index, stakeRoot)
}

// ConfirmStakeRoot is a paid mutator transaction binding the contract method 0xbf855cc8.
//
// Solidity: function confirmStakeRoot(uint32 index, bytes32 stakeRoot) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) ConfirmStakeRoot(index uint32, stakeRoot [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.ConfirmStakeRoot(&_StakeRootCompendium.TransactOpts, index, stakeRoot)
}

// Deposit is a paid mutator transaction binding the contract method 0xe6291b5b.
//
// Solidity: function deposit((address,uint32) operatorSet) payable returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) Deposit(opts *bind.TransactOpts, operatorSet OperatorSet) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "deposit", operatorSet)
}

// Deposit is a paid mutator transaction binding the contract method 0xe6291b5b.
//
// Solidity: function deposit((address,uint32) operatorSet) payable returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) Deposit(operatorSet OperatorSet) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Deposit(&_StakeRootCompendium.TransactOpts, operatorSet)
}

// Deposit is a paid mutator transaction binding the contract method 0xe6291b5b.
//
// Solidity: function deposit((address,uint32) operatorSet) payable returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) Deposit(operatorSet OperatorSet) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Deposit(&_StakeRootCompendium.TransactOpts, operatorSet)
}

// Initialize is a paid mutator transaction binding the contract method 0x42b7197a.
//
// Solidity: function initialize(address _owner, address _rootConfirmer, uint32 _proofIntervalSeconds, uint96 _chargePerStrategy, uint96 _chargePerOperatorSet) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address, _rootConfirmer common.Address, _proofIntervalSeconds uint32, _chargePerStrategy *big.Int, _chargePerOperatorSet *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "initialize", _owner, _rootConfirmer, _proofIntervalSeconds, _chargePerStrategy, _chargePerOperatorSet)
}

// Initialize is a paid mutator transaction binding the contract method 0x42b7197a.
//
// Solidity: function initialize(address _owner, address _rootConfirmer, uint32 _proofIntervalSeconds, uint96 _chargePerStrategy, uint96 _chargePerOperatorSet) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) Initialize(_owner common.Address, _rootConfirmer common.Address, _proofIntervalSeconds uint32, _chargePerStrategy *big.Int, _chargePerOperatorSet *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Initialize(&_StakeRootCompendium.TransactOpts, _owner, _rootConfirmer, _proofIntervalSeconds, _chargePerStrategy, _chargePerOperatorSet)
}

// Initialize is a paid mutator transaction binding the contract method 0x42b7197a.
//
// Solidity: function initialize(address _owner, address _rootConfirmer, uint32 _proofIntervalSeconds, uint96 _chargePerStrategy, uint96 _chargePerOperatorSet) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) Initialize(_owner common.Address, _rootConfirmer common.Address, _proofIntervalSeconds uint32, _chargePerStrategy *big.Int, _chargePerOperatorSet *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Initialize(&_StakeRootCompendium.TransactOpts, _owner, _rootConfirmer, _proofIntervalSeconds, _chargePerStrategy, _chargePerOperatorSet)
}

// RemoveOperatorSetsFromStakeTree is a paid mutator transaction binding the contract method 0x7e09a4fd.
//
// Solidity: function removeOperatorSetsFromStakeTree((address,uint32)[] operatorSetsToRemove) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) RemoveOperatorSetsFromStakeTree(opts *bind.TransactOpts, operatorSetsToRemove []OperatorSet) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "removeOperatorSetsFromStakeTree", operatorSetsToRemove)
}

// RemoveOperatorSetsFromStakeTree is a paid mutator transaction binding the contract method 0x7e09a4fd.
//
// Solidity: function removeOperatorSetsFromStakeTree((address,uint32)[] operatorSetsToRemove) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) RemoveOperatorSetsFromStakeTree(operatorSetsToRemove []OperatorSet) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.RemoveOperatorSetsFromStakeTree(&_StakeRootCompendium.TransactOpts, operatorSetsToRemove)
}

// RemoveOperatorSetsFromStakeTree is a paid mutator transaction binding the contract method 0x7e09a4fd.
//
// Solidity: function removeOperatorSetsFromStakeTree((address,uint32)[] operatorSetsToRemove) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) RemoveOperatorSetsFromStakeTree(operatorSetsToRemove []OperatorSet) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.RemoveOperatorSetsFromStakeTree(&_StakeRootCompendium.TransactOpts, operatorSetsToRemove)
}

// RemoveStrategiesAndMultipliers is a paid mutator transaction binding the contract method 0x75cff0a5.
//
// Solidity: function removeStrategiesAndMultipliers(uint32 operatorSetId, address[] strategies) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) RemoveStrategiesAndMultipliers(opts *bind.TransactOpts, operatorSetId uint32, strategies []common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "removeStrategiesAndMultipliers", operatorSetId, strategies)
}

// RemoveStrategiesAndMultipliers is a paid mutator transaction binding the contract method 0x75cff0a5.
//
// Solidity: function removeStrategiesAndMultipliers(uint32 operatorSetId, address[] strategies) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) RemoveStrategiesAndMultipliers(operatorSetId uint32, strategies []common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.RemoveStrategiesAndMultipliers(&_StakeRootCompendium.TransactOpts, operatorSetId, strategies)
}

// RemoveStrategiesAndMultipliers is a paid mutator transaction binding the contract method 0x75cff0a5.
//
// Solidity: function removeStrategiesAndMultipliers(uint32 operatorSetId, address[] strategies) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) RemoveStrategiesAndMultipliers(operatorSetId uint32, strategies []common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.RemoveStrategiesAndMultipliers(&_StakeRootCompendium.TransactOpts, operatorSetId, strategies)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.RenounceOwnership(&_StakeRootCompendium.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.RenounceOwnership(&_StakeRootCompendium.TransactOpts)
}

// SetChargePerProof is a paid mutator transaction binding the contract method 0x1016d85b.
//
// Solidity: function setChargePerProof(uint96 _chargePerStrategy, uint96 _chargePerOperatorSet) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) SetChargePerProof(opts *bind.TransactOpts, _chargePerStrategy *big.Int, _chargePerOperatorSet *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "setChargePerProof", _chargePerStrategy, _chargePerOperatorSet)
}

// SetChargePerProof is a paid mutator transaction binding the contract method 0x1016d85b.
//
// Solidity: function setChargePerProof(uint96 _chargePerStrategy, uint96 _chargePerOperatorSet) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) SetChargePerProof(_chargePerStrategy *big.Int, _chargePerOperatorSet *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetChargePerProof(&_StakeRootCompendium.TransactOpts, _chargePerStrategy, _chargePerOperatorSet)
}

// SetChargePerProof is a paid mutator transaction binding the contract method 0x1016d85b.
//
// Solidity: function setChargePerProof(uint96 _chargePerStrategy, uint96 _chargePerOperatorSet) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) SetChargePerProof(_chargePerStrategy *big.Int, _chargePerOperatorSet *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetChargePerProof(&_StakeRootCompendium.TransactOpts, _chargePerStrategy, _chargePerOperatorSet)
}

// SetOperatorExtraData is a paid mutator transaction binding the contract method 0xab384788.
//
// Solidity: function setOperatorExtraData(uint32 operatorSetId, address operator, bytes32 extraData) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) SetOperatorExtraData(opts *bind.TransactOpts, operatorSetId uint32, operator common.Address, extraData [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "setOperatorExtraData", operatorSetId, operator, extraData)
}

// SetOperatorExtraData is a paid mutator transaction binding the contract method 0xab384788.
//
// Solidity: function setOperatorExtraData(uint32 operatorSetId, address operator, bytes32 extraData) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) SetOperatorExtraData(operatorSetId uint32, operator common.Address, extraData [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetOperatorExtraData(&_StakeRootCompendium.TransactOpts, operatorSetId, operator, extraData)
}

// SetOperatorExtraData is a paid mutator transaction binding the contract method 0xab384788.
//
// Solidity: function setOperatorExtraData(uint32 operatorSetId, address operator, bytes32 extraData) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) SetOperatorExtraData(operatorSetId uint32, operator common.Address, extraData [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetOperatorExtraData(&_StakeRootCompendium.TransactOpts, operatorSetId, operator, extraData)
}

// SetOperatorSetExtraData is a paid mutator transaction binding the contract method 0x1e7bba0d.
//
// Solidity: function setOperatorSetExtraData(uint32 operatorSetId, bytes32 extraData) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) SetOperatorSetExtraData(opts *bind.TransactOpts, operatorSetId uint32, extraData [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "setOperatorSetExtraData", operatorSetId, extraData)
}

// SetOperatorSetExtraData is a paid mutator transaction binding the contract method 0x1e7bba0d.
//
// Solidity: function setOperatorSetExtraData(uint32 operatorSetId, bytes32 extraData) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) SetOperatorSetExtraData(operatorSetId uint32, extraData [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetOperatorSetExtraData(&_StakeRootCompendium.TransactOpts, operatorSetId, extraData)
}

// SetOperatorSetExtraData is a paid mutator transaction binding the contract method 0x1e7bba0d.
//
// Solidity: function setOperatorSetExtraData(uint32 operatorSetId, bytes32 extraData) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) SetOperatorSetExtraData(operatorSetId uint32, extraData [32]byte) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetOperatorSetExtraData(&_StakeRootCompendium.TransactOpts, operatorSetId, extraData)
}

// SetProofIntervalSeconds is a paid mutator transaction binding the contract method 0xafc6c70b.
//
// Solidity: function setProofIntervalSeconds(uint32 proofIntervalSeconds) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) SetProofIntervalSeconds(opts *bind.TransactOpts, proofIntervalSeconds uint32) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "setProofIntervalSeconds", proofIntervalSeconds)
}

// SetProofIntervalSeconds is a paid mutator transaction binding the contract method 0xafc6c70b.
//
// Solidity: function setProofIntervalSeconds(uint32 proofIntervalSeconds) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) SetProofIntervalSeconds(proofIntervalSeconds uint32) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetProofIntervalSeconds(&_StakeRootCompendium.TransactOpts, proofIntervalSeconds)
}

// SetProofIntervalSeconds is a paid mutator transaction binding the contract method 0xafc6c70b.
//
// Solidity: function setProofIntervalSeconds(uint32 proofIntervalSeconds) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) SetProofIntervalSeconds(proofIntervalSeconds uint32) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetProofIntervalSeconds(&_StakeRootCompendium.TransactOpts, proofIntervalSeconds)
}

// SetRootConfirmer is a paid mutator transaction binding the contract method 0x758e3bfb.
//
// Solidity: function setRootConfirmer(address _rootConfirmer) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) SetRootConfirmer(opts *bind.TransactOpts, _rootConfirmer common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "setRootConfirmer", _rootConfirmer)
}

// SetRootConfirmer is a paid mutator transaction binding the contract method 0x758e3bfb.
//
// Solidity: function setRootConfirmer(address _rootConfirmer) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) SetRootConfirmer(_rootConfirmer common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetRootConfirmer(&_StakeRootCompendium.TransactOpts, _rootConfirmer)
}

// SetRootConfirmer is a paid mutator transaction binding the contract method 0x758e3bfb.
//
// Solidity: function setRootConfirmer(address _rootConfirmer) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) SetRootConfirmer(_rootConfirmer common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.SetRootConfirmer(&_StakeRootCompendium.TransactOpts, _rootConfirmer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.TransferOwnership(&_StakeRootCompendium.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.TransferOwnership(&_StakeRootCompendium.TransactOpts, newOwner)
}

// VerifyStakeRoot is a paid mutator transaction binding the contract method 0x308e813e.
//
// Solidity: function verifyStakeRoot(uint256 calculationTimestamp, bytes32 stakeRoot, address chargeRecipient, uint256 indexChargePerProof, (uint32) _proof) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) VerifyStakeRoot(opts *bind.TransactOpts, calculationTimestamp *big.Int, stakeRoot [32]byte, chargeRecipient common.Address, indexChargePerProof *big.Int, _proof IStakeRootCompendiumProof) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "verifyStakeRoot", calculationTimestamp, stakeRoot, chargeRecipient, indexChargePerProof, _proof)
}

// VerifyStakeRoot is a paid mutator transaction binding the contract method 0x308e813e.
//
// Solidity: function verifyStakeRoot(uint256 calculationTimestamp, bytes32 stakeRoot, address chargeRecipient, uint256 indexChargePerProof, (uint32) _proof) returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) VerifyStakeRoot(calculationTimestamp *big.Int, stakeRoot [32]byte, chargeRecipient common.Address, indexChargePerProof *big.Int, _proof IStakeRootCompendiumProof) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.VerifyStakeRoot(&_StakeRootCompendium.TransactOpts, calculationTimestamp, stakeRoot, chargeRecipient, indexChargePerProof, _proof)
}

// VerifyStakeRoot is a paid mutator transaction binding the contract method 0x308e813e.
//
// Solidity: function verifyStakeRoot(uint256 calculationTimestamp, bytes32 stakeRoot, address chargeRecipient, uint256 indexChargePerProof, (uint32) _proof) returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) VerifyStakeRoot(calculationTimestamp *big.Int, stakeRoot [32]byte, chargeRecipient common.Address, indexChargePerProof *big.Int, _proof IStakeRootCompendiumProof) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.VerifyStakeRoot(&_StakeRootCompendium.TransactOpts, calculationTimestamp, stakeRoot, chargeRecipient, indexChargePerProof, _proof)
}

// Withdraw is a paid mutator transaction binding the contract method 0x0e19dc3a.
//
// Solidity: function withdraw(uint32 operatorSetId, uint256 amount) payable returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumTransactor) Withdraw(opts *bind.TransactOpts, operatorSetId uint32, amount *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.Transact(opts, "withdraw", operatorSetId, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x0e19dc3a.
//
// Solidity: function withdraw(uint32 operatorSetId, uint256 amount) payable returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumSession) Withdraw(operatorSetId uint32, amount *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Withdraw(&_StakeRootCompendium.TransactOpts, operatorSetId, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x0e19dc3a.
//
// Solidity: function withdraw(uint32 operatorSetId, uint256 amount) payable returns(uint256)
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) Withdraw(operatorSetId uint32, amount *big.Int) (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Withdraw(&_StakeRootCompendium.TransactOpts, operatorSetId, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeRootCompendium.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeRootCompendium *StakeRootCompendiumSession) Receive() (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Receive(&_StakeRootCompendium.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakeRootCompendium *StakeRootCompendiumTransactorSession) Receive() (*types.Transaction, error) {
	return _StakeRootCompendium.Contract.Receive(&_StakeRootCompendium.TransactOpts)
}

// StakeRootCompendiumImageIdSetIterator is returned from FilterImageIdSet and is used to iterate over the raw logs and unpacked data for ImageIdSet events raised by the StakeRootCompendium contract.
type StakeRootCompendiumImageIdSetIterator struct {
	Event *StakeRootCompendiumImageIdSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeRootCompendiumImageIdSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeRootCompendiumImageIdSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeRootCompendiumImageIdSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeRootCompendiumImageIdSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeRootCompendiumImageIdSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeRootCompendiumImageIdSet represents a ImageIdSet event raised by the StakeRootCompendium contract.
type StakeRootCompendiumImageIdSet struct {
	NewImageId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterImageIdSet is a free log retrieval operation binding the contract event 0xf1c38b162bdd25c4ac89067b5e68db75e712c6617f39e3b9b58e399d9463dad8.
//
// Solidity: event ImageIdSet(bytes32 newImageId)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) FilterImageIdSet(opts *bind.FilterOpts) (*StakeRootCompendiumImageIdSetIterator, error) {

	logs, sub, err := _StakeRootCompendium.contract.FilterLogs(opts, "ImageIdSet")
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumImageIdSetIterator{contract: _StakeRootCompendium.contract, event: "ImageIdSet", logs: logs, sub: sub}, nil
}

// WatchImageIdSet is a free log subscription operation binding the contract event 0xf1c38b162bdd25c4ac89067b5e68db75e712c6617f39e3b9b58e399d9463dad8.
//
// Solidity: event ImageIdSet(bytes32 newImageId)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) WatchImageIdSet(opts *bind.WatchOpts, sink chan<- *StakeRootCompendiumImageIdSet) (event.Subscription, error) {

	logs, sub, err := _StakeRootCompendium.contract.WatchLogs(opts, "ImageIdSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeRootCompendiumImageIdSet)
				if err := _StakeRootCompendium.contract.UnpackLog(event, "ImageIdSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseImageIdSet is a log parse operation binding the contract event 0xf1c38b162bdd25c4ac89067b5e68db75e712c6617f39e3b9b58e399d9463dad8.
//
// Solidity: event ImageIdSet(bytes32 newImageId)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) ParseImageIdSet(log types.Log) (*StakeRootCompendiumImageIdSet, error) {
	event := new(StakeRootCompendiumImageIdSet)
	if err := _StakeRootCompendium.contract.UnpackLog(event, "ImageIdSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeRootCompendiumInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StakeRootCompendium contract.
type StakeRootCompendiumInitializedIterator struct {
	Event *StakeRootCompendiumInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeRootCompendiumInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeRootCompendiumInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeRootCompendiumInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeRootCompendiumInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeRootCompendiumInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeRootCompendiumInitialized represents a Initialized event raised by the StakeRootCompendium contract.
type StakeRootCompendiumInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakeRootCompendiumInitializedIterator, error) {

	logs, sub, err := _StakeRootCompendium.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumInitializedIterator{contract: _StakeRootCompendium.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakeRootCompendiumInitialized) (event.Subscription, error) {

	logs, sub, err := _StakeRootCompendium.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeRootCompendiumInitialized)
				if err := _StakeRootCompendium.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) ParseInitialized(log types.Log) (*StakeRootCompendiumInitialized, error) {
	event := new(StakeRootCompendiumInitialized)
	if err := _StakeRootCompendium.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeRootCompendiumOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StakeRootCompendium contract.
type StakeRootCompendiumOwnershipTransferredIterator struct {
	Event *StakeRootCompendiumOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeRootCompendiumOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeRootCompendiumOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeRootCompendiumOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeRootCompendiumOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeRootCompendiumOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeRootCompendiumOwnershipTransferred represents a OwnershipTransferred event raised by the StakeRootCompendium contract.
type StakeRootCompendiumOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakeRootCompendiumOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakeRootCompendium.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumOwnershipTransferredIterator{contract: _StakeRootCompendium.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakeRootCompendiumOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakeRootCompendium.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeRootCompendiumOwnershipTransferred)
				if err := _StakeRootCompendium.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) ParseOwnershipTransferred(log types.Log) (*StakeRootCompendiumOwnershipTransferred, error) {
	event := new(StakeRootCompendiumOwnershipTransferred)
	if err := _StakeRootCompendium.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeRootCompendiumSnarkProofVerifiedIterator is returned from FilterSnarkProofVerified and is used to iterate over the raw logs and unpacked data for SnarkProofVerified events raised by the StakeRootCompendium contract.
type StakeRootCompendiumSnarkProofVerifiedIterator struct {
	Event *StakeRootCompendiumSnarkProofVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeRootCompendiumSnarkProofVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeRootCompendiumSnarkProofVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeRootCompendiumSnarkProofVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeRootCompendiumSnarkProofVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeRootCompendiumSnarkProofVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeRootCompendiumSnarkProofVerified represents a SnarkProofVerified event raised by the StakeRootCompendium contract.
type StakeRootCompendiumSnarkProofVerified struct {
	Journal []byte
	Seal    []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSnarkProofVerified is a free log retrieval operation binding the contract event 0x423df40688ec6e8fc991c66c91422a63c8f423d0643ff565a9ec648a399e8fff.
//
// Solidity: event SnarkProofVerified(bytes journal, bytes seal)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) FilterSnarkProofVerified(opts *bind.FilterOpts) (*StakeRootCompendiumSnarkProofVerifiedIterator, error) {

	logs, sub, err := _StakeRootCompendium.contract.FilterLogs(opts, "SnarkProofVerified")
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumSnarkProofVerifiedIterator{contract: _StakeRootCompendium.contract, event: "SnarkProofVerified", logs: logs, sub: sub}, nil
}

// WatchSnarkProofVerified is a free log subscription operation binding the contract event 0x423df40688ec6e8fc991c66c91422a63c8f423d0643ff565a9ec648a399e8fff.
//
// Solidity: event SnarkProofVerified(bytes journal, bytes seal)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) WatchSnarkProofVerified(opts *bind.WatchOpts, sink chan<- *StakeRootCompendiumSnarkProofVerified) (event.Subscription, error) {

	logs, sub, err := _StakeRootCompendium.contract.WatchLogs(opts, "SnarkProofVerified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeRootCompendiumSnarkProofVerified)
				if err := _StakeRootCompendium.contract.UnpackLog(event, "SnarkProofVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnarkProofVerified is a log parse operation binding the contract event 0x423df40688ec6e8fc991c66c91422a63c8f423d0643ff565a9ec648a399e8fff.
//
// Solidity: event SnarkProofVerified(bytes journal, bytes seal)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) ParseSnarkProofVerified(log types.Log) (*StakeRootCompendiumSnarkProofVerified, error) {
	event := new(StakeRootCompendiumSnarkProofVerified)
	if err := _StakeRootCompendium.contract.UnpackLog(event, "SnarkProofVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeRootCompendiumVerifierSetIterator is returned from FilterVerifierSet and is used to iterate over the raw logs and unpacked data for VerifierSet events raised by the StakeRootCompendium contract.
type StakeRootCompendiumVerifierSetIterator struct {
	Event *StakeRootCompendiumVerifierSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeRootCompendiumVerifierSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeRootCompendiumVerifierSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeRootCompendiumVerifierSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeRootCompendiumVerifierSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeRootCompendiumVerifierSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeRootCompendiumVerifierSet represents a VerifierSet event raised by the StakeRootCompendium contract.
type StakeRootCompendiumVerifierSet struct {
	NewVerifier common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterVerifierSet is a free log retrieval operation binding the contract event 0x480b37e3d134e44cb444c9703493c7db564c707cb8a18cecea165f340431da1f.
//
// Solidity: event VerifierSet(address newVerifier)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) FilterVerifierSet(opts *bind.FilterOpts) (*StakeRootCompendiumVerifierSetIterator, error) {

	logs, sub, err := _StakeRootCompendium.contract.FilterLogs(opts, "VerifierSet")
	if err != nil {
		return nil, err
	}
	return &StakeRootCompendiumVerifierSetIterator{contract: _StakeRootCompendium.contract, event: "VerifierSet", logs: logs, sub: sub}, nil
}

// WatchVerifierSet is a free log subscription operation binding the contract event 0x480b37e3d134e44cb444c9703493c7db564c707cb8a18cecea165f340431da1f.
//
// Solidity: event VerifierSet(address newVerifier)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) WatchVerifierSet(opts *bind.WatchOpts, sink chan<- *StakeRootCompendiumVerifierSet) (event.Subscription, error) {

	logs, sub, err := _StakeRootCompendium.contract.WatchLogs(opts, "VerifierSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeRootCompendiumVerifierSet)
				if err := _StakeRootCompendium.contract.UnpackLog(event, "VerifierSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifierSet is a log parse operation binding the contract event 0x480b37e3d134e44cb444c9703493c7db564c707cb8a18cecea165f340431da1f.
//
// Solidity: event VerifierSet(address newVerifier)
func (_StakeRootCompendium *StakeRootCompendiumFilterer) ParseVerifierSet(log types.Log) (*StakeRootCompendiumVerifierSet, error) {
	event := new(StakeRootCompendiumVerifierSet)
	if err := _StakeRootCompendium.contract.UnpackLog(event, "VerifierSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
