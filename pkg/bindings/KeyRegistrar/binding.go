// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package KeyRegistrar

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// OperatorSet is an auto generated low-level Go binding around an user-defined struct.
type OperatorSet struct {
	Avs common.Address
	Id  uint32
}

// KeyRegistrarMetaData contains all meta data concerning the KeyRegistrar contract.
var KeyRegistrarMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_permissionController\",\"type\":\"address\",\"internalType\":\"contractIPermissionController\"},{\"name\":\"_allocationManager\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"},{\"name\":\"_version\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BN254_KEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ECDSA_KEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_verifyBN254Signature\",\"inputs\":[{\"name\":\"messagePoint\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkeyG1\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"pubkeyG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allocationManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkKey\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"configureOperatorSet\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBN254Key\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"g1Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"g2Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBN254KeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAAddress\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAKey\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAKeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getKeyHash\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSetCurveType\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isKeyGloballyRegistered\",\"inputs\":[{\"name\":\"keyHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isRegistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permissionController\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPermissionController\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AggregateBN254KeyUpdated\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"newAggregateKey\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyDeregistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyRegistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorSetConfigured\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ConfigurationAlreadySet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECAddFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECMulFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECPairingFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpModFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidCurveType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidKeyFormat\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidKeypair\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPermissions\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"KeyAlreadyRegistered\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"KeyNotFound\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OperatorSetNotConfigured\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SignatureExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroPubkey\",\"inputs\":[]}]",
	Bin: "0x60e060405234801561000f575f5ffd5b50604051612f66380380612f6683398101604081905261002e916100cb565b6001600160a01b03808316608052831660a052808061004c8161005a565b60c052506101fc9350505050565b5f5f829050601f8151111561008d578260405163305a27a960e01b815260040161008491906101a1565b60405180910390fd5b8051610098826101d6565b179392505050565b6001600160a01b03811681146100b4575f5ffd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f606084860312156100dd575f5ffd5b83516100e8816100a0565b60208501519093506100f9816100a0565b60408501519092506001600160401b03811115610114575f5ffd5b8401601f81018613610124575f5ffd5b80516001600160401b0381111561013d5761013d6100b7565b604051601f8201601f19908116603f011681016001600160401b038111828210171561016b5761016b6100b7565b604052818152828201602001881015610182575f5ffd5b8160208401602083015e5f602083830101528093505050509250925092565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156101f6575f198160200360031b1b821691505b50919050565b60805160a05160c051612d2b61023b5f395f81816104b60152611ccc01525f81816101b801526117b001525f81816102bd01526105d00152612d2b5ff3fe608060405234801561000f575f5ffd5b5060043610610127575f3560e01c8063aa165c30116100a9578063d9f12db21161006e578063d9f12db2146102f2578063dab42d7e14610305578063ea0d814914610327578063ea194e2e1461033a578063f698da251461034d575f5ffd5b8063aa165c301461026b578063b05c8f6d1461027e578063bd30a0b9146102a5578063ca8aa7c7146102b8578063d40cda16146102df575f5ffd5b80637690e395116100ef5780637690e395146101ef5780637cffe48c1461020257806387ab86f4146102225780639a43e3fb146102375780639eb1725114610258575f5ffd5b80630a6ac2641461012b578063166aa127146101535780633b32a7bd146101885780634657e26a146101b357806354fd4d50146101da575b5f5ffd5b61013e6101393660046123e8565b610355565b60405190151581526020015b60405180910390f35b61017a7f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f8181565b60405190815260200161014a565b61019b6101963660046123e8565b610491565b6040516001600160a01b03909116815260200161014a565b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b6101e26104af565b60405161014a919061244c565b61017a6101fd36600461249c565b6104df565b6102156102103660046124fc565b610587565b60405161014a919061254a565b610235610230366004612558565b6105ad565b005b61024a6102453660046123e8565b610871565b60405161014a9291906125ae565b61023561026636600461269c565b610a5b565b6101e26102793660046123e8565b610bf5565b61017a7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d8181565b61013e6102b33660046123e8565b610d32565b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b6102356102ed366004612765565b610d6f565b61017a6103003660046127f8565b610ef9565b61013e61031336600461283f565b5f9081526002602052604090205460ff1690565b610235610335366004612856565b610f92565b61017a6103483660046123e8565b6110d5565b61017a6111fd565b5f5f60015f610363866112b6565b815260208101919091526040015f9081205460ff16915081600281111561038c5761038c612516565b036103aa57604051635cd3106d60e11b815260040160405180910390fd5b5f5f5f6103b6876112b6565b815260208082019290925260409081015f9081206001600160a01b038816825283528190208151808301909252805460ff1615158252600181018054929391929184019161040390612884565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90612884565b801561047a5780601f106104515761010080835404028352916020019161047a565b820191905f5260205f20905b81548152906001019060200180831161045d57829003601f168201915b505050919092525050905193505050505b92915050565b5f61049c8383610bf5565b6104a5906128bc565b60601c9392505050565b60606104da7f0000000000000000000000000000000000000000000000000000000000000000611314565b905090565b5f5f7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d8186865f01518760200151878760405161051c929190612900565b6040805191829003822060208301969096526001600160a01b039485169082015292909116606083015263ffffffff16608082015260a081019190915260c00160405160208183030381529060405280519060200120905061057d81611351565b9695505050505050565b5f60015f610594846112b6565b815260208101919091526040015f205460ff1692915050565b805160405163304c10cd60e01b81526001600160a01b03918216600482015233917f0000000000000000000000000000000000000000000000000000000000000000169063304c10cd90602401602060405180830381865afa158015610615573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610639919061290f565b6001600160a01b0316146106605760405163932d94f760e01b815260040160405180910390fd5b5f60015f61066d846112b6565b815260208101919091526040015f9081205460ff16915081600281111561069657610696612516565b036106b457604051635cd3106d60e11b815260040160405180910390fd5b5f5f5f6106c0856112b6565b815260208082019290925260409081015f9081206001600160a01b038816825283528190208151808301909252805460ff1615158252600181018054929391929184019161070d90612884565b80601f016020809104026020016040519081016040528092919081815260200182805461073990612884565b80156107845780601f1061075b57610100808354040283529160200191610784565b820191905f5260205f20905b81548152906001019060200180831161076757829003601f168201915b5050505050815250509050805f0151838590916107de57604051632e40e18760e01b815282516001600160a01b03908116600483015260209093015163ffffffff1660248201529116604482015260640160405180910390fd5b50505f5f6107eb856112b6565b815260208082019290925260409081015f9081206001600160a01b03881682529092528120805460ff191681559061082660018301826121f2565b5050836001600160a01b03167f28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442848460405161086392919061292a565b60405180910390a250505050565b604080518082019091525f808252602082015261088c61222c565b5f60015f610899876112b6565b815260208101919091526040015f205460ff16905060028160028111156108c2576108c2612516565b146108e05760405163fdea7c0960e01b815260040160405180910390fd5b5f5f5f6108ec886112b6565b815260208082019290925260409081015f9081206001600160a01b038916825283528190208151808301909252805460ff1615158252600181018054929391929184019161093990612884565b80601f016020809104026020016040519081016040528092919081815260200182805461096590612884565b80156109b05780601f10610987576101008083540402835291602001916109b0565b820191905f5260205f20905b81548152906001019060200180831161099357829003601f168201915b5050505050815250509050805f0151610a055750506040805180820182525f80825260208083018290528351808501855282815280820192909252835180850190945282845283019190915292509050610a54565b5f5f5f5f8460200151806020019051810190610a21919061299c565b60408051808201825294855260208086019490945280518082019091529182529181019190915290985096505050505050505b9250929050565b604080518082019091525f80825260208201525f5f85806020019051810190610a8491906129d7565b6040805180820190915282815260208082018390528851898201518951805190840151938b01518051959a505f99507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019850929491939092909190600160200201518e5f01518f60200151604051602001610b489a99989796959493929190998a5260208a019890985260408901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400190565b604051602081830303815290604052805190602001205f1c610b6a9190612a0d565b9050610bd0610b83610b7c8684611397565b8490611407565b610b8b61147b565b610bca610bc385610bbd6040805180820182525f80825260209182015281518083019092526001825260029082015290565b90611397565b8a90611407565b8661153b565b610bed57604051638baa579f60e01b815260040160405180910390fd5b505050505050565b60605f60015f610c04866112b6565b815260208101919091526040015f205460ff1690506001816002811115610c2d57610c2d612516565b14610c4b5760405163fdea7c0960e01b815260040160405180910390fd5b5f5f5f610c57876112b6565b815260208082019290925260409081015f9081206001600160a01b038816825283528190208151808301909252805460ff16151582526001810180549293919291840191610ca490612884565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd090612884565b8015610d1b5780601f10610cf257610100808354040283529160200191610d1b565b820191905f5260205f20905b815481529060010190602001808311610cfe57829003601f168201915b505050919092525050506020015195945050505050565b5f5f5f610d3e856112b6565b815260208082019290925260409081015f9081206001600160a01b038616825290925290205460ff16905092915050565b85610d7981611772565b610d965760405163932d94f760e01b815260040160405180910390fd5b5f60015f610da3896112b6565b815260208101919091526040015f9081205460ff169150816002811115610dcc57610dcc612516565b03610dea57604051635cd3106d60e11b815260040160405180910390fd5b5f5f610df5896112b6565b815260208082019290925260409081015f9081206001600160a01b038c16825290925290205460ff1615610e3c57604051630c7bc20160e11b815260040160405180910390fd5b6001816002811115610e5057610e50612516565b03610e6857610e6387898888888861181c565b610ea8565b6002816002811115610e7c57610e7c612516565b03610e8f57610e63878988888888611a00565b60405163fdea7c0960e01b815260040160405180910390fd5b876001600160a01b03167f1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd88838989604051610ee79493929190612a2c565b60405180910390a25050505050505050565b81516020808401516040515f938493610f66937f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f81938a93928991019485526001600160a01b039384166020860152918316604085015263ffffffff16606084015216608082015260a00190565b604051602081830303815290604052805190602001209050610f8781611351565b9150505b9392505050565b8151610f9d81611772565b610fba5760405163932d94f760e01b815260040160405180910390fd5b6001826002811115610fce57610fce612516565b1480610feb57506002826002811115610fe957610fe9612516565b145b6110085760405163fdea7c0960e01b815260040160405180910390fd5b5f60015f611015866112b6565b815260208101919091526040015f9081205460ff16915081600281111561103e5761103e612516565b1461105b576040516281f09f60e01b815260040160405180910390fd5b8260015f611068876112b6565b815260208101919091526040015f20805460ff1916600183600281111561109157611091612516565b02179055507fb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e784846040516110c792919061292a565b60405180910390a150505050565b5f5f5f5f6110e2866112b6565b815260208082019290925260409081015f9081206001600160a01b038716825283528190208151808301909252805460ff1615158252600181018054929391929184019161112f90612884565b80601f016020809104026020016040519081016040528092919081815260200182805461115b90612884565b80156111a65780601f1061117d576101008083540402835291602001916111a6565b820191905f5260205f20905b81548152906001019060200180831161118957829003601f168201915b50505050508152505090505f60015f6111be876112b6565b815260208101919091526040015f2054825160ff90911691506111e657505f915061048b9050565b6111f4826020015182611c43565b95945050505050565b60408051808201909152600a81526922b4b3b2b72630bcb2b960b11b6020909101525f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f71b625cfad44bac63b13dba07f2e1d6084ee04b6f8752101ece6126d584ee6ea61126a611cc4565b805160209182012060408051928301949094529281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f815f0151826020015163ffffffff166040516020016112fc92919060609290921b6001600160601b031916825260a01b6001600160a01b031916601482015260200190565b60405160208183030381529060405261048b90612a89565b60605f61132083611d39565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f61135a6111fd565b60405161190160f01b6020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050919050565b604080518082019091525f80825260208201526113b2612251565b835181526020808501519082015260408082018490525f908360608460076107d05a03fa905080806113e057fe5b50806113ff57604051632319df1960e11b815260040160405180910390fd5b505092915050565b604080518082019091525f808252602082015261142261226f565b835181526020808501518183015283516040808401919091529084015160608301525f908360808460066107d05a03fa9050808061145c57fe5b50806113ff5760405163d4b68fd760e01b815260040160405180910390fd5b61148361222c565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820182528581526020808201859052825180840190935285835282018390525f9161156961228d565b5f5b6002811015611720575f611580826006612ac0565b9050848260028110611594576115946129f9565b602002015151836115a5835f612ad7565b600c81106115b5576115b56129f9565b60200201528482600281106115cc576115cc6129f9565b602002015160200151838260016115e39190612ad7565b600c81106115f3576115f36129f9565b602002015283826002811061160a5761160a6129f9565b602002015151518361161d836002612ad7565b600c811061162d5761162d6129f9565b6020020152838260028110611644576116446129f9565b602002015151600160200201518361165d836003612ad7565b600c811061166d5761166d6129f9565b6020020152838260028110611684576116846129f9565b6020020151602001515f6002811061169e5761169e6129f9565b6020020151836116af836004612ad7565b600c81106116bf576116bf6129f9565b60200201528382600281106116d6576116d66129f9565b6020020151602001516001600281106116f1576116f16129f9565b602002015183611702836005612ad7565b600c8110611712576117126129f9565b60200201525060010161156b565b506117296122ac565b5f6020826101808560086107d05a03fa9050808061174357fe5b5080611762576040516324ccc79360e21b815260040160405180910390fd5b5051151598975050505050505050565b604051631beb2b9760e31b81526001600160a01b0382811660048301523360248301523060448301525f80356001600160e01b0319166064840152917f00000000000000000000000000000000000000000000000000000000000000009091169063df595cb8906084016020604051808303815f875af11580156117f8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061048b9190612aea565b6014831461183d5760405163d109118160e01b815260040160405180910390fd5b5f6118488486612b09565b60601c90508061186b57604051634935505f60e01b815260040160405180910390fd5b5f6118ad86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525060019250611c43915050565b5f8181526002602052604090205490915060ff16156118df57604051630c7bc20160e11b815260040160405180910390fd5b87516020808a01516040515f9361194b937f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f81938d9390918991019485526001600160a01b039384166020860152918316604085015263ffffffff16606084015216608082015260a00190565b6040516020818303038152906040528051906020012090505f61196d82611351565b90506119b2848288888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505f199250611d60915050565b6119f48a8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250899250611db8915050565b50505050505050505050565b604080518082019091525f8082526020820152611a1b61222c565b5f808080611a2b898b018b612b47565b93509350935093506040518060400160405280858152602001848152509550835f148015611a57575082155b15611a7557604051634935505f60e01b815260040160405180910390fd5b6040518060400160405280838152602001828152509450505050505f7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d81888a5f01518b602001518a8a604051611acc929190612900565b6040805191829003822060208301969096526001600160a01b039485169082015292909116606083015263ffffffff16608082015260a081019190915260c0016040516020818303038152906040528051906020012090505f611b2e82611351565b90505f611b3a82611e3c565b9050611b7f8188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508a9250899150610a5b9050565b5f611bc18a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525060029250611c43915050565b5f8181526002602052604090205490915060ff1615611bf357604051630c7bc20160e11b815260040160405180910390fd5b611c358c8c8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250879250611db8915050565b505050505050505050505050565b5f6001826002811115611c5857611c58612516565b03611c6a57508151602083012061048b565b6002826002811115611c7e57611c7e612516565b03610e8f575f5f84806020019051810190611c99919061299c565b505060408051808201825283815260209081019283525f93845291519091529020925061048b915050565b60605f611cf07f0000000000000000000000000000000000000000000000000000000000000000611314565b9050805f81518110611d0457611d046129f9565b016020908101516040516001600160f81b03199091169181019190915260210160405160208183030381529060405291505090565b5f60ff8216601f81111561048b57604051632cd44ac360e21b815260040160405180910390fd5b42811015611d8157604051630819bdcd60e01b815260040160405180910390fd5b611d956001600160a01b0385168484611ec6565b611db257604051638baa579f60e01b815260040160405180910390fd5b50505050565b6040805180820190915260018152602081018390525f80611dd8876112b6565b815260208082019290925260409081015f9081206001600160a01b03881682528352208251815460ff1916901515178155908201516001820190611e1c9082612bcd565b5050505f908152600260205260409020805460ff19166001179055505050565b604080518082019091525f80825260208201525f8080611e695f516020612cd65f395f51905f5286612a0d565b90505b611e7581611f1a565b90935091505f516020612cd65f395f51905f528283098303611ead576040805180820190915290815260208101919091529392505050565b5f516020612cd65f395f51905f52600182089050611e6c565b5f5f5f611ed38585611f96565b90925090505f816004811115611eeb57611eeb612516565b148015611f095750856001600160a01b0316826001600160a01b0316145b8061057d575061057d868686611fd5565b5f80805f516020612cd65f395f51905f5260035f516020612cd65f395f51905f52865f516020612cd65f395f51905f52888909090890505f611f8a827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f525f516020612cd65f395f51905f526120bc565b91959194509092505050565b5f5f8251604103611fca576020830151604084015160608501515f1a611fbe87828585612135565b94509450505050610a54565b505f90506002610a54565b5f5f5f856001600160a01b0316631626ba7e60e01b8686604051602401611ffd929190612c88565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161203b9190612ca8565b5f60405180830381855afa9150503d805f8114612073576040519150601f19603f3d011682016040523d82523d5f602084013e612078565b606091505b509150915081801561208c57506020815110155b801561057d57508051630b135d3f60e11b906120b19083016020908101908401612cbe565b149695505050505050565b5f5f6120c66122ac565b6120ce6122ca565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa9250828061210b57fe5b508261212a5760405163d51edae360e01b815260040160405180910390fd5b505195945050505050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561216a57505f905060036121e9565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156121bb573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b0381166121e3575f600192509250506121e9565b91505f90505b94509492505050565b5080546121fe90612884565b5f825580601f1061220d575050565b601f0160209004905f5260205f209081019061222991906122e8565b50565b604051806040016040528061223f612300565b815260200161224c612300565b905290565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b5b808211156122fc575f81556001016122e9565b5090565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff811182821017156123555761235561231e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156123845761238461231e565b604052919050565b6001600160a01b0381168114612229575f5ffd5b5f604082840312156123b0575f5ffd5b6123b8612332565b905081356123c58161238c565b8152602082013563ffffffff811681146123dd575f5ffd5b602082015292915050565b5f5f606083850312156123f9575f5ffd5b61240384846123a0565b915060408301356124138161238c565b809150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610f8b602083018461241e565b5f5f83601f84011261246e575f5ffd5b50813567ffffffffffffffff811115612485575f5ffd5b602083019150836020828501011115610a54575f5ffd5b5f5f5f5f608085870312156124af575f5ffd5b84356124ba8161238c565b93506124c986602087016123a0565b9250606085013567ffffffffffffffff8111156124e4575f5ffd5b6124f08782880161245e565b95989497509550505050565b5f6040828403121561250c575f5ffd5b610f8b83836123a0565b634e487b7160e01b5f52602160045260245ffd5b6003811061254657634e487b7160e01b5f52602160045260245ffd5b9052565b6020810161048b828461252a565b5f5f60608385031215612569575f5ffd5b82356125748161238c565b915061258384602085016123a0565b90509250929050565b805f5b6002811015611db257815184526020938401939091019060010161258f565b5f60c08201905083518252602084015160208301526125d160408301845161258c565b60208301516125e3608084018261258c565b509392505050565b5f604082840312156125fb575f5ffd5b612603612332565b823581526020928301359281019290925250919050565b5f82601f830112612629575f5ffd5b612633604061235b565b806040840185811115612644575f5ffd5b845b8181101561265e578035845260209384019301612646565b509095945050505050565b5f60808284031215612679575f5ffd5b612681612332565b905061268d838361261a565b81526123dd836040840161261a565b5f5f5f5f61012085870312156126b0575f5ffd5b6126ba86866125eb565b9350604085013567ffffffffffffffff8111156126d5575f5ffd5b8501601f810187136126e5575f5ffd5b803567ffffffffffffffff8111156126ff576126ff61231e565b612712601f8201601f191660200161235b565b818152886020838501011115612726575f5ffd5b816020840160208301375f6020838301015280955050505061274b86606087016125eb565b915061275a8660a08701612669565b905092959194509250565b5f5f5f5f5f5f60a0878903121561277a575f5ffd5b86356127858161238c565b955061279488602089016123a0565b9450606087013567ffffffffffffffff8111156127af575f5ffd5b6127bb89828a0161245e565b909550935050608087013567ffffffffffffffff8111156127da575f5ffd5b6127e689828a0161245e565b979a9699509497509295939492505050565b5f5f5f6080848603121561280a575f5ffd5b83356128158161238c565b925061282485602086016123a0565b915060608401356128348161238c565b809150509250925092565b5f6020828403121561284f575f5ffd5b5035919050565b5f5f60608385031215612867575f5ffd5b61287184846123a0565b9150604083013560038110612413575f5ffd5b600181811c9082168061289857607f821691505b6020821081036128b657634e487b7160e01b5f52602260045260245ffd5b50919050565b805160208201516001600160601b03198116919060148210156128f9576001600160601b03196001600160601b03198360140360031b1b82161692505b5050919050565b818382375f9101908152919050565b5f6020828403121561291f575f5ffd5b8151610f8b8161238c565b82516001600160a01b0316815260208084015163ffffffff169082015260608101610f8b604083018461252a565b5f82601f830112612967575f5ffd5b612971604061235b565b806040840185811115612982575f5ffd5b845b8181101561265e578051845260209384019301612984565b5f5f5f5f60c085870312156129af575f5ffd5b8451602086015190945092506129c88660408701612958565b915061275a8660808701612958565b5f5f604083850312156129e8575f5ffd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b5f82612a2757634e487b7160e01b5f52601260045260245ffd5b500690565b84516001600160a01b0316815260208086015163ffffffff1690820152612a56604082018561252a565b60806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f191601019392505050565b805160208083015191908110156128b6575f1960209190910360031b1b16919050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761048b5761048b612aac565b8082018082111561048b5761048b612aac565b5f60208284031215612afa575f5ffd5b81518015158114610f8b575f5ffd5b80356001600160601b03198116906014841015612b40576001600160601b03196001600160601b03198560140360031b1b82161691505b5092915050565b5f5f5f5f60c08587031215612b5a575f5ffd5b8435935060208501359250612b72866040870161261a565b915061275a866080870161261a565b601f821115612bc857805f5260205f20601f840160051c81016020851015612ba65750805b601f840160051c820191505b81811015612bc5575f8155600101612bb2565b50505b505050565b815167ffffffffffffffff811115612be757612be761231e565b612bfb81612bf58454612884565b84612b81565b6020601f821160018114612c2d575f8315612c165750848201515b5f19600385901b1c1916600184901b178455612bc5565b5f84815260208120601f198516915b82811015612c5c5787850151825560209485019460019092019101612c3c565b5084821015612c7957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b828152604060208201525f612ca0604083018461241e565b949350505050565b5f82518060208501845e5f920191825250919050565b5f60208284031215612cce575f5ffd5b505191905056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220c6d45bcb983a5cf79a1c528ffe62dca064d9652aa976e3cb9b4b5a880ffa899064736f6c634300081b0033",
}

// KeyRegistrarABI is the input ABI used to generate the binding from.
// Deprecated: Use KeyRegistrarMetaData.ABI instead.
var KeyRegistrarABI = KeyRegistrarMetaData.ABI

// KeyRegistrarBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KeyRegistrarMetaData.Bin instead.
var KeyRegistrarBin = KeyRegistrarMetaData.Bin

// DeployKeyRegistrar deploys a new Ethereum contract, binding an instance of KeyRegistrar to it.
func DeployKeyRegistrar(auth *bind.TransactOpts, backend bind.ContractBackend, _permissionController common.Address, _allocationManager common.Address, _version string) (common.Address, *types.Transaction, *KeyRegistrar, error) {
	parsed, err := KeyRegistrarMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KeyRegistrarBin), backend, _permissionController, _allocationManager, _version)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KeyRegistrar{KeyRegistrarCaller: KeyRegistrarCaller{contract: contract}, KeyRegistrarTransactor: KeyRegistrarTransactor{contract: contract}, KeyRegistrarFilterer: KeyRegistrarFilterer{contract: contract}}, nil
}

// KeyRegistrar is an auto generated Go binding around an Ethereum contract.
type KeyRegistrar struct {
	KeyRegistrarCaller     // Read-only binding to the contract
	KeyRegistrarTransactor // Write-only binding to the contract
	KeyRegistrarFilterer   // Log filterer for contract events
}

// KeyRegistrarCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeyRegistrarCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeyRegistrarTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeyRegistrarFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeyRegistrarSession struct {
	Contract     *KeyRegistrar     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeyRegistrarCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeyRegistrarCallerSession struct {
	Contract *KeyRegistrarCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// KeyRegistrarTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeyRegistrarTransactorSession struct {
	Contract     *KeyRegistrarTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// KeyRegistrarRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeyRegistrarRaw struct {
	Contract *KeyRegistrar // Generic contract binding to access the raw methods on
}

// KeyRegistrarCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeyRegistrarCallerRaw struct {
	Contract *KeyRegistrarCaller // Generic read-only contract binding to access the raw methods on
}

// KeyRegistrarTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeyRegistrarTransactorRaw struct {
	Contract *KeyRegistrarTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeyRegistrar creates a new instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrar(address common.Address, backend bind.ContractBackend) (*KeyRegistrar, error) {
	contract, err := bindKeyRegistrar(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrar{KeyRegistrarCaller: KeyRegistrarCaller{contract: contract}, KeyRegistrarTransactor: KeyRegistrarTransactor{contract: contract}, KeyRegistrarFilterer: KeyRegistrarFilterer{contract: contract}}, nil
}

// NewKeyRegistrarCaller creates a new read-only instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarCaller(address common.Address, caller bind.ContractCaller) (*KeyRegistrarCaller, error) {
	contract, err := bindKeyRegistrar(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarCaller{contract: contract}, nil
}

// NewKeyRegistrarTransactor creates a new write-only instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarTransactor(address common.Address, transactor bind.ContractTransactor) (*KeyRegistrarTransactor, error) {
	contract, err := bindKeyRegistrar(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarTransactor{contract: contract}, nil
}

// NewKeyRegistrarFilterer creates a new log filterer instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarFilterer(address common.Address, filterer bind.ContractFilterer) (*KeyRegistrarFilterer, error) {
	contract, err := bindKeyRegistrar(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarFilterer{contract: contract}, nil
}

// bindKeyRegistrar binds a generic wrapper to an already deployed contract.
func bindKeyRegistrar(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KeyRegistrarMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyRegistrar *KeyRegistrarRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyRegistrar.Contract.KeyRegistrarCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyRegistrar *KeyRegistrarRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.KeyRegistrarTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyRegistrar *KeyRegistrarRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.KeyRegistrarTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyRegistrar *KeyRegistrarCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyRegistrar.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyRegistrar *KeyRegistrarTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyRegistrar *KeyRegistrarTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.contract.Transact(opts, method, params...)
}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) BN254KEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "BN254_KEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) BN254KEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.BN254KEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) BN254KEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.BN254KEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) ECDSAKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "ECDSA_KEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) ECDSAKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.ECDSAKEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) ECDSAKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.ECDSAKEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// VerifyBN254Signature is a free data retrieval call binding the contract method 0x9eb17251.
//
// Solidity: function _verifyBN254Signature((uint256,uint256) messagePoint, bytes signature, (uint256,uint256) pubkeyG1, (uint256[2],uint256[2]) pubkeyG2) view returns()
func (_KeyRegistrar *KeyRegistrarCaller) VerifyBN254Signature(opts *bind.CallOpts, messagePoint BN254G1Point, signature []byte, pubkeyG1 BN254G1Point, pubkeyG2 BN254G2Point) error {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "_verifyBN254Signature", messagePoint, signature, pubkeyG1, pubkeyG2)

	if err != nil {
		return err
	}

	return err

}

// VerifyBN254Signature is a free data retrieval call binding the contract method 0x9eb17251.
//
// Solidity: function _verifyBN254Signature((uint256,uint256) messagePoint, bytes signature, (uint256,uint256) pubkeyG1, (uint256[2],uint256[2]) pubkeyG2) view returns()
func (_KeyRegistrar *KeyRegistrarSession) VerifyBN254Signature(messagePoint BN254G1Point, signature []byte, pubkeyG1 BN254G1Point, pubkeyG2 BN254G2Point) error {
	return _KeyRegistrar.Contract.VerifyBN254Signature(&_KeyRegistrar.CallOpts, messagePoint, signature, pubkeyG1, pubkeyG2)
}

// VerifyBN254Signature is a free data retrieval call binding the contract method 0x9eb17251.
//
// Solidity: function _verifyBN254Signature((uint256,uint256) messagePoint, bytes signature, (uint256,uint256) pubkeyG1, (uint256[2],uint256[2]) pubkeyG2) view returns()
func (_KeyRegistrar *KeyRegistrarCallerSession) VerifyBN254Signature(messagePoint BN254G1Point, signature []byte, pubkeyG1 BN254G1Point, pubkeyG2 BN254G2Point) error {
	return _KeyRegistrar.Contract.VerifyBN254Signature(&_KeyRegistrar.CallOpts, messagePoint, signature, pubkeyG1, pubkeyG2)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) AllocationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "allocationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) AllocationManager() (common.Address, error) {
	return _KeyRegistrar.Contract.AllocationManager(&_KeyRegistrar.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) AllocationManager() (common.Address, error) {
	return _KeyRegistrar.Contract.AllocationManager(&_KeyRegistrar.CallOpts)
}

// CheckKey is a free data retrieval call binding the contract method 0x0a6ac264.
//
// Solidity: function checkKey((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) CheckKey(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "checkKey", operatorSet, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckKey is a free data retrieval call binding the contract method 0x0a6ac264.
//
// Solidity: function checkKey((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) CheckKey(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.CheckKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// CheckKey is a free data retrieval call binding the contract method 0x0a6ac264.
//
// Solidity: function checkKey((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) CheckKey(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.CheckKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) DomainSeparator() ([32]byte, error) {
	return _KeyRegistrar.Contract.DomainSeparator(&_KeyRegistrar.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) DomainSeparator() ([32]byte, error) {
	return _KeyRegistrar.Contract.DomainSeparator(&_KeyRegistrar.CallOpts)
}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarCaller) GetBN254Key(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getBN254Key", operatorSet, operator)

	outstruct := new(struct {
		G1Point BN254G1Point
		G2Point BN254G2Point
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.G1Point = *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)
	outstruct.G2Point = *abi.ConvertType(out[1], new(BN254G2Point)).(*BN254G2Point)

	return *outstruct, err

}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarSession) GetBN254Key(operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	return _KeyRegistrar.Contract.GetBN254Key(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetBN254Key(operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	return _KeyRegistrar.Contract.GetBN254Key(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetBN254KeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getBN254KeyRegistrationMessageHash", operator, operatorSet, keyData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetBN254KeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetBN254KeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyData)
}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetBN254KeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetBN254KeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyData)
}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAAddress(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAAddress", operatorSet, operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAAddress(operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	return _KeyRegistrar.Contract.GetECDSAAddress(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAAddress(operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	return _KeyRegistrar.Contract.GetECDSAAddress(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAKey(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAKey", operatorSet, operator)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAKey(operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAKey(operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAKeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAKeyRegistrationMessageHash", operator, operatorSet, keyAddress)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAKeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyAddress)
}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAKeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyAddress)
}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetKeyHash(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getKeyHash", operatorSet, operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetKeyHash(operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetKeyHash(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetKeyHash(operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetKeyHash(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarCaller) GetOperatorSetCurveType(opts *bind.CallOpts, operatorSet OperatorSet) (uint8, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getOperatorSetCurveType", operatorSet)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarSession) GetOperatorSetCurveType(operatorSet OperatorSet) (uint8, error) {
	return _KeyRegistrar.Contract.GetOperatorSetCurveType(&_KeyRegistrar.CallOpts, operatorSet)
}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetOperatorSetCurveType(operatorSet OperatorSet) (uint8, error) {
	return _KeyRegistrar.Contract.GetOperatorSetCurveType(&_KeyRegistrar.CallOpts, operatorSet)
}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) IsKeyGloballyRegistered(opts *bind.CallOpts, keyHash [32]byte) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "isKeyGloballyRegistered", keyHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) IsKeyGloballyRegistered(keyHash [32]byte) (bool, error) {
	return _KeyRegistrar.Contract.IsKeyGloballyRegistered(&_KeyRegistrar.CallOpts, keyHash)
}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) IsKeyGloballyRegistered(keyHash [32]byte) (bool, error) {
	return _KeyRegistrar.Contract.IsKeyGloballyRegistered(&_KeyRegistrar.CallOpts, keyHash)
}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) IsRegistered(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "isRegistered", operatorSet, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) IsRegistered(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.IsRegistered(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) IsRegistered(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.IsRegistered(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) PermissionController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "permissionController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) PermissionController() (common.Address, error) {
	return _KeyRegistrar.Contract.PermissionController(&_KeyRegistrar.CallOpts)
}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) PermissionController() (common.Address, error) {
	return _KeyRegistrar.Contract.PermissionController(&_KeyRegistrar.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarSession) Version() (string, error) {
	return _KeyRegistrar.Contract.Version(&_KeyRegistrar.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarCallerSession) Version() (string, error) {
	return _KeyRegistrar.Contract.Version(&_KeyRegistrar.CallOpts)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) ConfigureOperatorSet(opts *bind.TransactOpts, operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "configureOperatorSet", operatorSet, curveType)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarSession) ConfigureOperatorSet(operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSet(&_KeyRegistrar.TransactOpts, operatorSet, curveType)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) ConfigureOperatorSet(operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSet(&_KeyRegistrar.TransactOpts, operatorSet, curveType)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) DeregisterKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "deregisterKey", operator, operatorSet)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarSession) DeregisterKey(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.DeregisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) DeregisterKey(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.DeregisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) RegisterKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "registerKey", operator, operatorSet, keyData, signature)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarSession) RegisterKey(operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RegisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, keyData, signature)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) RegisterKey(operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RegisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, keyData, signature)
}

// KeyRegistrarAggregateBN254KeyUpdatedIterator is returned from FilterAggregateBN254KeyUpdated and is used to iterate over the raw logs and unpacked data for AggregateBN254KeyUpdated events raised by the KeyRegistrar contract.
type KeyRegistrarAggregateBN254KeyUpdatedIterator struct {
	Event *KeyRegistrarAggregateBN254KeyUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarAggregateBN254KeyUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarAggregateBN254KeyUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarAggregateBN254KeyUpdated represents a AggregateBN254KeyUpdated event raised by the KeyRegistrar contract.
type KeyRegistrarAggregateBN254KeyUpdated struct {
	OperatorSet     OperatorSet
	NewAggregateKey BN254G1Point
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAggregateBN254KeyUpdated is a free log retrieval operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterAggregateBN254KeyUpdated(opts *bind.FilterOpts) (*KeyRegistrarAggregateBN254KeyUpdatedIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "AggregateBN254KeyUpdated")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarAggregateBN254KeyUpdatedIterator{contract: _KeyRegistrar.contract, event: "AggregateBN254KeyUpdated", logs: logs, sub: sub}, nil
}

// WatchAggregateBN254KeyUpdated is a free log subscription operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchAggregateBN254KeyUpdated(opts *bind.WatchOpts, sink chan<- *KeyRegistrarAggregateBN254KeyUpdated) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "AggregateBN254KeyUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarAggregateBN254KeyUpdated)
				if err := _KeyRegistrar.contract.UnpackLog(event, "AggregateBN254KeyUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAggregateBN254KeyUpdated is a log parse operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseAggregateBN254KeyUpdated(log types.Log) (*KeyRegistrarAggregateBN254KeyUpdated, error) {
	event := new(KeyRegistrarAggregateBN254KeyUpdated)
	if err := _KeyRegistrar.contract.UnpackLog(event, "AggregateBN254KeyUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyDeregisteredIterator is returned from FilterKeyDeregistered and is used to iterate over the raw logs and unpacked data for KeyDeregistered events raised by the KeyRegistrar contract.
type KeyRegistrarKeyDeregisteredIterator struct {
	Event *KeyRegistrarKeyDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyDeregistered represents a KeyDeregistered event raised by the KeyRegistrar contract.
type KeyRegistrarKeyDeregistered struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyDeregistered is a free log retrieval operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyDeregistered(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyDeregisteredIterator{contract: _KeyRegistrar.contract, event: "KeyDeregistered", logs: logs, sub: sub}, nil
}

// WatchKeyDeregistered is a free log subscription operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyDeregistered(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyDeregistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyDeregistered)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyDeregistered is a log parse operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyDeregistered(log types.Log) (*KeyRegistrarKeyDeregistered, error) {
	event := new(KeyRegistrarKeyDeregistered)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyRegisteredIterator is returned from FilterKeyRegistered and is used to iterate over the raw logs and unpacked data for KeyRegistered events raised by the KeyRegistrar contract.
type KeyRegistrarKeyRegisteredIterator struct {
	Event *KeyRegistrarKeyRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyRegistered represents a KeyRegistered event raised by the KeyRegistrar contract.
type KeyRegistrarKeyRegistered struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	Pubkey      []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyRegistered is a free log retrieval operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyRegistered(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyRegisteredIterator{contract: _KeyRegistrar.contract, event: "KeyRegistered", logs: logs, sub: sub}, nil
}

// WatchKeyRegistered is a free log subscription operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyRegistered(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyRegistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyRegistered)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRegistered is a log parse operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyRegistered(log types.Log) (*KeyRegistrarKeyRegistered, error) {
	event := new(KeyRegistrarKeyRegistered)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarOperatorSetConfiguredIterator is returned from FilterOperatorSetConfigured and is used to iterate over the raw logs and unpacked data for OperatorSetConfigured events raised by the KeyRegistrar contract.
type KeyRegistrarOperatorSetConfiguredIterator struct {
	Event *KeyRegistrarOperatorSetConfigured // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarOperatorSetConfigured)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarOperatorSetConfigured)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarOperatorSetConfigured represents a OperatorSetConfigured event raised by the KeyRegistrar contract.
type KeyRegistrarOperatorSetConfigured struct {
	OperatorSet OperatorSet
	CurveType   uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOperatorSetConfigured is a free log retrieval operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterOperatorSetConfigured(opts *bind.FilterOpts) (*KeyRegistrarOperatorSetConfiguredIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "OperatorSetConfigured")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarOperatorSetConfiguredIterator{contract: _KeyRegistrar.contract, event: "OperatorSetConfigured", logs: logs, sub: sub}, nil
}

// WatchOperatorSetConfigured is a free log subscription operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchOperatorSetConfigured(opts *bind.WatchOpts, sink chan<- *KeyRegistrarOperatorSetConfigured) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "OperatorSetConfigured")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarOperatorSetConfigured)
				if err := _KeyRegistrar.contract.UnpackLog(event, "OperatorSetConfigured", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSetConfigured is a log parse operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseOperatorSetConfigured(log types.Log) (*KeyRegistrarOperatorSetConfigured, error) {
	event := new(KeyRegistrarOperatorSetConfigured)
	if err := _KeyRegistrar.contract.UnpackLog(event, "OperatorSetConfigured", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
