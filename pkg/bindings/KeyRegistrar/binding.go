// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package KeyRegistrar

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// OperatorSet is an auto generated low-level Go binding around an user-defined struct.
type OperatorSet struct {
	Avs common.Address
	Id  uint32
}

// KeyRegistrarMetaData contains all meta data concerning the KeyRegistrar contract.
var KeyRegistrarMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_permissionController\",\"type\":\"address\",\"internalType\":\"contractIPermissionController\"},{\"name\":\"_allocationManager\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"},{\"name\":\"_version\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BN254_KEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ECDSA_KEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allocationManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"configureOperatorSet\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"configureOperatorSetWithMinDelay\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"},{\"name\":\"minDelaySeconds\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"encodeBN254KeyData\",\"inputs\":[{\"name\":\"g1Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"g2Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"finalizeScheduledRotation\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getBN254Key\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"g1Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"g2Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBN254KeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAAddress\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAKey\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAKeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getKeyHash\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorFromSigningKey\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSetCurveType\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isKeyGloballyRegistered\",\"inputs\":[{\"name\":\"keyHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isRegistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permissionController\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPermissionController\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"rotateKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"newPubkey\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinKeyRotationDelay\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"minDelaySeconds\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AggregateBN254KeyUpdated\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"newAggregateKey\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyDeregistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyRegistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyRotationScheduled\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"},{\"name\":\"oldPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"newPubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"activateAt\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinKeyRotationDelaySet\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"minDelay\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorSetConfigured\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ConfigurationAlreadySet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECAddFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECMulFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECPairingFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpModFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidCurveType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidKeyFormat\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidKeypair\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPermissions\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"KeyAlreadyRegistered\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"KeyNotFound\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OperatorAlreadyRegistered\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OperatorSetNotConfigured\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OperatorStillSlashable\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"PendingRotationExists\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RotationDisabled\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SignatureExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroPubkey\",\"inputs\":[]}]",
	Bin: "0x60e060405234801561000f575f5ffd5b50604051613c60380380613c6083398101604081905261002e916100cb565b6001600160a01b03808316608052831660a052808061004c8161005a565b60c052506101fc9350505050565b5f5f829050601f8151111561008d578260405163305a27a960e01b815260040161008491906101a1565b60405180910390fd5b8051610098826101d6565b179392505050565b6001600160a01b03811681146100b4575f5ffd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f606084860312156100dd575f5ffd5b83516100e8816100a0565b60208501519093506100f9816100a0565b60408501519092506001600160401b03811115610114575f5ffd5b8401601f81018613610124575f5ffd5b80516001600160401b0381111561013d5761013d6100b7565b604051601f8201601f19908116603f011681016001600160401b038111828210171561016b5761016b6100b7565b604052818152828201602001881015610182575f5ffd5b8160208401602083015e5f602083830101528093505050509250925092565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156101f6575f198160200360031b1b821691505b50919050565b60805160a05160c051613a2561023b5f395f81816104bb0152611d5601525f81816101f901526119f601525f81816103b301526108f00152613a255ff3fe608060405234801561000f575f5ffd5b5060043610610153575f3560e01c80639a43e3fb116100bf578063d40cda1611610079578063d40cda16146103d5578063d9f12db2146103e8578063dab42d7e146103fb578063ea0d81491461041d578063ea194e2e14610430578063f698da2514610443575f5ffd5b80639a43e3fb1461032d578063a2d701f61461034e578063aa165c3014610361578063b05c8f6d14610374578063bd30a0b91461039b578063ca8aa7c7146103ae575f5ffd5b806354fd4d501161011057806354fd4d501461029a5780637690e395146102a25780637cffe48c146102b557806381b2796c146102d55780638256909c146102e857806387ab86f41461031a575f5ffd5b80630934d59714610157578063110304021461017f578063166aa127146101945780633b32a7bd146101c95780634657e26a146101f457806350435add1461021b575b5f5ffd5b61016a610165366004612db2565b61044b565b60405190151581526020015b60405180910390f35b61019261018d366004612dfa565b61045f565b005b6101bb7f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f8181565b604051908152602001610176565b6101dc6101d7366004612e23565b610496565b6040516001600160a01b039091168152602001610176565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b61028d610229366004612e9b565b8151602080840151835180519083015185840151805190850151604080519687019790975295850193909352606084810192909252608084015260a083019190915260c082019290925260e001604051602081830303815290604052905092915050565b6040516101769190612f46565b61028d6104b4565b6101bb6102b0366004612f95565b6104e4565b6102c86102c3366004612ff2565b61058c565b6040516101769190613040565b6101926102e336600461304e565b6105b2565b6102fb6102f63660046130dd565b6107c4565b604080516001600160a01b039093168352901515602083015201610176565b610192610328366004612db2565b6108b2565b61034061033b366004612e23565b610c3b565b6040516101769291906131a3565b61019261035c3660046131ee565b610ed1565b61028d61036f366004612e23565b61101f565b6101bb7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d8181565b61016a6103a9366004612e23565b61121f565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6101926103e336600461304e565b61125c565b6101bb6103f636600461322f565b61147d565b61016a610409366004613267565b5f9081526002602052604090205460ff1690565b61019261042b36600461327e565b611516565b6101bb61043e366004612e23565b61166a565b6101bb611837565b5f61045682846118f0565b90505b92915050565b815161046a816119b8565b6104875760405163932d94f760e01b815260040160405180910390fd5b6104918383611a62565b505050565b5f6104a1838361101f565b6104aa906132a7565b60601c9392505050565b60606104df7f0000000000000000000000000000000000000000000000000000000000000000611adc565b905090565b5f5f7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d8186865f0151876020015187876040516105219291906132ff565b6040805191829003822060208301969096526001600160a01b039485169082015292909116606083015263ffffffff16608082015260a081019190915260c00160405160208183030381529060405280519060200120905061058281611b19565b9695505050505050565b5f60015f61059984611b5f565b815260208101919091526040015f205460ff1692915050565b856105bc816119b8565b6105d95760405163932d94f760e01b815260040160405180910390fd5b5f60015f6105e689611b5f565b815260208101919091526040015f9081205460ff16915081600281111561060f5761060f61300c565b0361062d57604051635cd3106d60e11b815260040160405180910390fd5b61063787896118f0565b505f5f5f6106448a611b5f565b815260208082019290925260409081015f9081206001600160a01b038d1682529092529020805490915088908a9060ff1661069d57604051632e40e18760e01b815260040161069492919061332c565b60405180910390fd5b505060038101546001600160401b0316156106cb5760405163a54aa36960e01b815260040160405180910390fd5b5f60045f6106d88b611b5f565b815260208101919091526040015f20546001600160401b0316905067fffffffffffffffe19810161071c576040516310297f8760e11b815260040160405180910390fd5b5f6107278242613366565b90506107388a8c8b8b8b8b8a611bbd565b5060028301610748898b83613415565b5060038301805467ffffffffffffffff19166001600160401b0383161790556040516001600160a01b038c16907f600c8ea5356df2fad359d32cf64544f00ad31ccf4133a70b4da8630b1e3658d1906107af908d90889060018901908f908f9089906134f1565b60405180910390a25050505050505050505050565b5f5f5f60015f6107d387611b5f565b815260208101919091526040015f9081205460ff16915060018260028111156107fe576107fe61300c565b03610810575083516020850120610881565b60028260028111156108245761082461300c565b03610868575f5f8680602001905181019061083f91906135b5565b60408051808201825283815260209081019283525f938452915190915290209250610881915050565b60405163fdea7c0960e01b815260040160405180910390fd5b5f818152600360205260409020546001600160a01b0316806108a3888261121f565b945094505050505b9250929050565b816108bc816119b8565b6108d95760405163932d94f760e01b815260040160405180910390fd5b6040516309a961f360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631352c3e69061092790869086906004016135d7565b602060405180830381865afa158015610942573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061096691906135f4565b158284909161098a57604051631070287960e01b815260040161069492919061332c565b50505f60015f61099985611b5f565b815260208101919091526040015f9081205460ff1691508160028111156109c2576109c261300c565b036109e057604051635cd3106d60e11b815260040160405180910390fd5b5f5f5f6109ec86611b5f565b815260208082019290925260409081015f9081206001600160a01b03891682528352819020815160808101909252805460ff16151582526001810180549293919291840191610a3a90613385565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6690613385565b8015610ab15780601f10610a8857610100808354040283529160200191610ab1565b820191905f5260205f20905b815481529060010190602001808311610a9457829003601f168201915b50505050508152602001600282018054610aca90613385565b80601f0160208091040260200160405190810160405280929190818152602001828054610af690613385565b8015610b415780601f10610b1857610100808354040283529160200191610b41565b820191905f5260205f20905b815481529060010190602001808311610b2457829003601f168201915b5050509183525050600391909101546001600160401b0316602090910152805190915084908690610b8757604051632e40e18760e01b815260040161069492919061332c565b50505f5f610b9486611b5f565b815260208082019290925260409081015f9081206001600160a01b03891682529092528120805460ff1916815590610bcf6001830182612bb9565b610bdc600283015f612bb9565b50600301805467ffffffffffffffff191690556040516001600160a01b038616907f28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb644290610c2c9087908690613613565b60405180910390a25050505050565b604080518082019091525f8082526020820152610c56612bf3565b5f60015f610c6387611b5f565b815260208101919091526040015f205460ff1690506002816002811115610c8c57610c8c61300c565b14610caa5760405163fdea7c0960e01b815260040160405180910390fd5b5f5f5f610cb688611b5f565b815260208082019290925260409081015f9081206001600160a01b03891682528352819020815160808101909252805460ff16151582526001810180549293919291840191610d0490613385565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3090613385565b8015610d7b5780601f10610d5257610100808354040283529160200191610d7b565b820191905f5260205f20905b815481529060010190602001808311610d5e57829003601f168201915b50505050508152602001600282018054610d9490613385565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc090613385565b8015610e0b5780601f10610de257610100808354040283529160200191610e0b565b820191905f5260205f20905b815481529060010190602001808311610dee57829003601f168201915b5050509183525050600391909101546001600160401b03166020909101528051909150610e745750506040805180820182525f808252602080830182905283518085018552828152808201929092528351808501909452828452830191909152925090506108ab565b5f610e7e82611c8e565b90505f5f5f5f84806020019051810190610e989190613672565b604080518082018252948552602080860194909452805180820190915291825291810191909152909c909b509950505050505050505050565b8251610edc816119b8565b610ef95760405163932d94f760e01b815260040160405180910390fd5b6001836002811115610f0d57610f0d61300c565b1480610f2a57506002836002811115610f2857610f2861300c565b145b610f475760405163fdea7c0960e01b815260040160405180910390fd5b5f60015f610f5487611b5f565b815260208101919091526040015f9081205460ff169150816002811115610f7d57610f7d61300c565b14610f9a576040516281f09f60e01b815260040160405180910390fd5b8360015f610fa788611b5f565b815260208101919091526040015f20805460ff19166001836002811115610fd057610fd061300c565b02179055507fb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e78585604051611006929190613613565b60405180910390a16110188584611a62565b5050505050565b60605f60015f61102e86611b5f565b815260208101919091526040015f205460ff16905060018160028111156110575761105761300c565b146110755760405163fdea7c0960e01b815260040160405180910390fd5b5f5f5f61108187611b5f565b815260208082019290925260409081015f9081206001600160a01b03881682528352819020815160808101909252805460ff161515825260018101805492939192918401916110cf90613385565b80601f01602080910402602001604051908101604052809291908181526020018280546110fb90613385565b80156111465780601f1061111d57610100808354040283529160200191611146565b820191905f5260205f20905b81548152906001019060200180831161112957829003601f168201915b5050505050815260200160028201805461115f90613385565b80601f016020809104026020016040519081016040528092919081815260200182805461118b90613385565b80156111d65780601f106111ad576101008083540402835291602001916111d6565b820191905f5260205f20905b8154815290600101906020018083116111b957829003601f168201915b5050509183525050600391909101546001600160401b031660209091015280519091506112155760405180602001604052805f81525092505050610459565b5f61058282611c8e565b5f5f5f61122b85611b5f565b815260208082019290925260409081015f9081206001600160a01b038616825290925290205460ff16905092915050565b85611266816119b8565b6112835760405163932d94f760e01b815260040160405180910390fd5b5f60015f61129089611b5f565b815260208101919091526040015f9081205460ff1691508160028111156112b9576112b961300c565b036112d757604051635cd3106d60e11b815260040160405180910390fd5b5f5f6112e289611b5f565b815260208082019290925260409081015f9081206001600160a01b038c16825290925290205460ff1615611329576040516342ee68b560e01b815260040160405180910390fd5b61133887898888888887611bbd565b50604051806080016040528060011515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920182905250938552505060408051602081810183528482528501529092018190529050806113a68a611b5f565b815260208082019290925260409081015f9081206001600160a01b038d1682528352208251815460ff19169015151781559082015160018201906113ea90826136b8565b50604082015160028201906113ff90826136b8565b50606091909101516003909101805467ffffffffffffffff19166001600160401b039092169190911790556040516001600160a01b038916907f1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd9061146b908a9085908b908b9061376d565b60405180910390a25050505050505050565b81516020808401516040515f9384936114ea937f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f81938a93928991019485526001600160a01b039384166020860152918316604085015263ffffffff16606084015216608082015260a00190565b60405160208183030381529060405280519060200120905061150b81611b19565b9150505b9392505050565b8151611521816119b8565b61153e5760405163932d94f760e01b815260040160405180910390fd5b60018260028111156115525761155261300c565b148061156f5750600282600281111561156d5761156d61300c565b145b61158c5760405163fdea7c0960e01b815260040160405180910390fd5b5f60015f61159986611b5f565b815260208101919091526040015f9081205460ff1691508160028111156115c2576115c261300c565b146115df576040516281f09f60e01b815260040160405180910390fd5b8260015f6115ec87611b5f565b815260208101919091526040015f20805460ff191660018360028111156116155761161561300c565b02179055507fb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7848460405161164b929190613613565b60405180910390a1611664846001600160401b03611a62565b50505050565b5f5f5f5f61167786611b5f565b815260208082019290925260409081015f9081206001600160a01b03871682528352819020815160808101909252805460ff161515825260018101805492939192918401916116c590613385565b80601f01602080910402602001604051908101604052809291908181526020018280546116f190613385565b801561173c5780601f106117135761010080835404028352916020019161173c565b820191905f5260205f20905b81548152906001019060200180831161171f57829003601f168201915b5050505050815260200160028201805461175590613385565b80601f016020809104026020016040519081016040528092919081815260200182805461178190613385565b80156117cc5780601f106117a3576101008083540402835291602001916117cc565b820191905f5260205f20905b8154815290600101906020018083116117af57829003601f168201915b5050509183525050600391909101546001600160401b031660209091015290505f6001816117f987611b5f565b815260208101919091526040015f2054825160ff909116915061182157505f91506104599050565b5f61182b83611c8e565b90506105828183611ccd565b60408051808201909152600a81526922b4b3b2b72630bcb2b960b11b6020909101525f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f71b625cfad44bac63b13dba07f2e1d6084ee04b6f8752101ece6126d584ee6ea6118a4611d4e565b805160209182012060408051928301949094529281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f5f5f5f6118fd86611b5f565b815260208082019290925260409081015f9081206001600160a01b03871682529092529020805490915060ff16611937575f915050610459565b60038101546001600160401b031615801590611960575060038101546001600160401b03164210155b156119af5760018101611976600283018261379a565b5060408051602081019091525f8152600282019061199490826136b8565b50600301805467ffffffffffffffff19169055506001610459565b505f9392505050565b604051631beb2b9760e31b81526001600160a01b0382811660048301523360248301523060448301525f80356001600160e01b0319166064840152917f00000000000000000000000000000000000000000000000000000000000000009091169063df595cb8906084016020604051808303815f875af1158015611a3e573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061045991906135f4565b8060045f611a6f85611b5f565b81526020019081526020015f205f6101000a8154816001600160401b0302191690836001600160401b031602179055507f22b2b63b5820f9d933565468845820b939bf5ad654ea6ab5bdd3728f19e4580f8282604051611ad092919061385a565b60405180910390a15050565b60605f611ae883611dc3565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f611b22611837565b60405161190160f01b6020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050919050565b5f815f0151826020015163ffffffff16604051602001611ba592919060609290921b6001600160601b031916825260a01b6001600160a01b031916601482015260200190565b6040516020818303038152906040526104599061387e565b5f806001836002811115611bd357611bd361300c565b03611bed57611be6898989898989611dea565b9050611c14565b6002836002811115611c0157611c0161300c565b0361086857611be6898989898989611edc565b5f8181526002602052604090205460ff1615611c4357604051630c7bc20160e11b815260040160405180910390fd5b5f818152600260209081526040808320805460ff191660011790556003909152902080546001600160a01b038a166001600160a01b031990911617905590505b979650505050505050565b6060818101516001600160401b031615801590611cb8575081606001516001600160401b03164210155b15611cc557506040015190565b506020015190565b5f6001826002811115611ce257611ce261300c565b03611cf4575081516020830120610459565b6002826002811115611d0857611d0861300c565b03610868575f5f84806020019051810190611d239190613672565b505060408051808201825283815260209081019283525f938452915190915290209250610459915050565b60605f611d7a7f0000000000000000000000000000000000000000000000000000000000000000611adc565b9050805f81518110611d8e57611d8e6132eb565b016020908101516040516001600160f81b03199091169181019190915260210160405160208183030381529060405291505090565b5f60ff8216601f81111561045957604051632cd44ac360e21b815260040160405180910390fd5b5f60148414611e0c5760405163d109118160e01b815260040160405180910390fd5b5f611e1785876138a1565b60601c905080611e3a57604051634935505f60e01b815260040160405180910390fd5b5f611e7c87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525060019250611ccd915050565b90505f611e8a898b8561147d565b9050611ecf838288888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505f199250612046915050565b5098975050505050505050565b5f60c08414611efe5760405163d109118160e01b815260040160405180910390fd5b60408214611f1f57604051638baa579f60e01b815260040160405180910390fd5b5f611f2c878988886104e4565b90505f80808080611f3f8a8c018c6138df565b9350935093509350835f148015611f54575082155b15611f7257604051634935505f60e01b815260040160405180910390fd5b5f80611f808a8c018c613919565b6040805180820182528381526020808201849052825180840184528b81528082018b90528351808501909452898452908301889052939550919350909190611fcc8b8484845f80612098565b9a508a9950611ff89850505050505050505057604051638baa579f60e01b815260040160405180910390fd5b61203987878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525060029250611ccd915050565b9998505050505050505050565b4281101561206757604051630819bdcd60e01b815260040160405180910390fd5b61207b6001600160a01b0385168484612160565b61166457604051638baa579f60e01b815260040160405180910390fd5b5f5f5f6120a4896121b4565b90505f6120b38a89898c61223e565b90505f6120ca6120c38a846122f2565b8b90612362565b90505f61210c612105846120ff6040805180820182525f80825260209182015281518083019092526001825260029082015290565b906122f2565b8590612362565b9050871561213157612128826121206123d6565b838c8b612496565b96509450612151565b6121448261213d6123d6565b838c6126aa565b9550851561215157600194505b50505050965096945050505050565b5f5f5f61216d85856128e1565b90925090505f8160048111156121855761218561300c565b1480156121a35750856001600160a01b0316826001600160a01b0316145b806105825750610582868686612920565b604080518082019091525f80825260208201525f80806121e15f5160206139d05f395f51905f5286613939565b90505b6121ed81612a07565b90935091505f5160206139d05f395f51905f528283098303612225576040805180820190915290815260208101919091529392505050565b5f5160206139d05f395f51905f526001820890506121e4565b8251602080850151845180519083015186840151805190850151875188870151604080519889018e90528801989098526060870195909552608086019390935260a085019190915260c084015260e08301526101008201526101208101919091525f907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019061014001604051602081830303815290604052805190602001205f1c6122e99190613939565b95945050505050565b604080518082019091525f808252602082015261230d612c18565b835181526020808501519082015260408082018490525f908360608460076107d05a03fa9050808061233b57fe5b508061235a57604051632319df1960e11b815260040160405180910390fd5b505092915050565b604080518082019091525f808252602082015261237d612c36565b835181526020808501518183015283516040808401919091529084015160608301525f908360808460066107d05a03fa905080806123b757fe5b508061235a5760405163d4b68fd760e01b815260040160405180910390fd5b6123de612bf3565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820182528681526020808201869052825180840190935286835282018490525f918291906124c7612c54565b5f5b600281101561267e575f6124de826006613958565b90508482600281106124f2576124f26132eb565b60200201515183612503835f61396f565b600c8110612513576125136132eb565b602002015284826002811061252a5761252a6132eb565b60200201516020015183826001612541919061396f565b600c8110612551576125516132eb565b6020020152838260028110612568576125686132eb565b602002015151518361257b83600261396f565b600c811061258b5761258b6132eb565b60200201528382600281106125a2576125a26132eb565b60200201515160016020020151836125bb83600361396f565b600c81106125cb576125cb6132eb565b60200201528382600281106125e2576125e26132eb565b6020020151602001515f600281106125fc576125fc6132eb565b60200201518361260d83600461396f565b600c811061261d5761261d6132eb565b6020020152838260028110612634576126346132eb565b60200201516020015160016002811061264f5761264f6132eb565b60200201518361266083600561396f565b600c8110612670576126706132eb565b6020020152506001016124c9565b50612687612c73565b5f6020826101808560088cfa9151919c9115159b50909950505050505050505050565b6040805180820182528581526020808201859052825180840190935285835282018390525f916126d8612c54565b5f5b600281101561288f575f6126ef826006613958565b9050848260028110612703576127036132eb565b60200201515183612714835f61396f565b600c8110612724576127246132eb565b602002015284826002811061273b5761273b6132eb565b60200201516020015183826001612752919061396f565b600c8110612762576127626132eb565b6020020152838260028110612779576127796132eb565b602002015151518361278c83600261396f565b600c811061279c5761279c6132eb565b60200201528382600281106127b3576127b36132eb565b60200201515160016020020151836127cc83600361396f565b600c81106127dc576127dc6132eb565b60200201528382600281106127f3576127f36132eb565b6020020151602001515f6002811061280d5761280d6132eb565b60200201518361281e83600461396f565b600c811061282e5761282e6132eb565b6020020152838260028110612845576128456132eb565b602002015160200151600160028110612860576128606132eb565b60200201518361287183600561396f565b600c8110612881576128816132eb565b6020020152506001016126da565b50612898612c73565b5f6020826101808560086107d05a03fa905080806128b257fe5b50806128d1576040516324ccc79360e21b815260040160405180910390fd5b5051151598975050505050505050565b5f5f8251604103612915576020830151604084015160608501515f1a61290987828585612a83565b945094505050506108ab565b505f905060026108ab565b5f5f5f856001600160a01b0316631626ba7e60e01b8686604051602401612948929190613982565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161298691906139a2565b5f60405180830381855afa9150503d805f81146129be576040519150601f19603f3d011682016040523d82523d5f602084013e6129c3565b606091505b50915091508180156129d757506020815110155b801561058257508051630b135d3f60e11b906129fc90830160209081019084016139b8565b149695505050505050565b5f80805f5160206139d05f395f51905f5260035f5160206139d05f395f51905f52865f5160206139d05f395f51905f52888909090890505f612a77827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f525f5160206139d05f395f51905f52612b40565b91959194509092505050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612ab857505f90506003612b37565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b09573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b038116612b31575f60019250925050612b37565b91505f90505b94509492505050565b5f5f612b4a612c73565b612b52612c91565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280612b8f57fe5b5082612bae5760405163d51edae360e01b815260040160405180910390fd5b505195945050505050565b508054612bc590613385565b5f825580601f10612bd4575050565b601f0160209004905f5260205f2090810190612bf09190612caf565b50565b6040518060400160405280612c06612cc7565b8152602001612c13612cc7565b905290565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b5b80821115612cc3575f8155600101612cb0565b5090565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b0381168114612cfb575f5ffd5b919050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b0381118282101715612d3657612d36612d00565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612d6457612d64612d00565b604052919050565b5f60408284031215612d7c575f5ffd5b612d84612d14565b9050612d8f82612ce5565b8152602082013563ffffffff81168114612da7575f5ffd5b602082015292915050565b5f5f60608385031215612dc3575f5ffd5b612dcc83612ce5565b9150612ddb8460208501612d6c565b90509250929050565b80356001600160401b0381168114612cfb575f5ffd5b5f5f60608385031215612e0b575f5ffd5b612e158484612d6c565b9150612ddb60408401612de4565b5f5f60608385031215612e34575f5ffd5b612e3e8484612d6c565b9150612ddb60408401612ce5565b5f82601f830112612e5b575f5ffd5b612e656040612d3c565b806040840185811115612e76575f5ffd5b845b81811015612e90578035845260209384019301612e78565b509095945050505050565b5f5f82840360c0811215612ead575f5ffd5b6040811215612eba575f5ffd5b612ec2612d14565b843581526020808601359082015292506080603f1982011215612ee3575f5ffd5b50612eec612d14565b612ef98560408601612e4c565b8152612f088560808601612e4c565b6020820152809150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6104566020830184612f18565b5f5f83601f840112612f68575f5ffd5b5081356001600160401b03811115612f7e575f5ffd5b6020830191508360208285010111156108ab575f5ffd5b5f5f5f5f60808587031215612fa8575f5ffd5b612fb185612ce5565b9350612fc08660208701612d6c565b925060608501356001600160401b03811115612fda575f5ffd5b612fe687828801612f58565b95989497509550505050565b5f60408284031215613002575f5ffd5b6104568383612d6c565b634e487b7160e01b5f52602160045260245ffd5b6003811061303c57634e487b7160e01b5f52602160045260245ffd5b9052565b602081016104598284613020565b5f5f5f5f5f5f60a08789031215613063575f5ffd5b61306c87612ce5565b955061307b8860208901612d6c565b945060608701356001600160401b03811115613095575f5ffd5b6130a189828a01612f58565b90955093505060808701356001600160401b038111156130bf575f5ffd5b6130cb89828a01612f58565b979a9699509497509295939492505050565b5f5f606083850312156130ee575f5ffd5b6130f88484612d6c565b915060408301356001600160401b03811115613112575f5ffd5b8301601f81018513613122575f5ffd5b80356001600160401b0381111561313b5761313b612d00565b61314e601f8201601f1916602001612d3c565b818152866020838501011115613162575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b805f5b6002811015611664578151845260209384019390910190600101613184565b5f60c08201905083518252602084015160208301526131c6604083018451613181565b60208301516131d86080840182613181565b509392505050565b803560038110612cfb575f5ffd5b5f5f5f60808486031215613200575f5ffd5b61320a8585612d6c565b9250613218604085016131e0565b915061322660608501612de4565b90509250925092565b5f5f5f60808486031215613241575f5ffd5b61324a84612ce5565b92506132598560208601612d6c565b915061322660608501612ce5565b5f60208284031215613277575f5ffd5b5035919050565b5f5f6060838503121561328f575f5ffd5b6132998484612d6c565b9150612ddb604084016131e0565b805160208201516001600160601b03198116919060148210156132e4576001600160601b03196001600160601b03198360140360031b1b82161692505b5050919050565b634e487b7160e01b5f52603260045260245ffd5b818382375f9101908152919050565b80516001600160a01b0316825260209081015163ffffffff16910152565b6060810161333a828561330e565b6001600160a01b039290921660409190910152919050565b634e487b7160e01b5f52601160045260245ffd5b6001600160401b03818116838216019081111561045957610459613352565b600181811c9082168061339957607f821691505b6020821081036133b757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561049157805f5260205f20601f840160051c810160208510156133e25750805b601f840160051c820191505b81811015611018575f81556001016133ee565b5f19600383901b1c191660019190911b1790565b6001600160401b0383111561342c5761342c612d00565b6134408361343a8354613385565b836133bd565b5f601f84116001811461346c575f851561345a5750838201355b6134648682613401565b845550611018565b5f83815260208120601f198716915b8281101561349b578685013582556020948501946001909201910161347b565b50868210156134b7575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b6134fb818861330e565b6135086040820187613020565b60c060608201525f5f865461351c81613385565b8060c0860152600182165f811461353a576001811461355657613587565b60ff19831660e087015260e082151560051b8701019350613587565b895f5260205f205f5b8381101561357e57815488820160e0015260019091019060200161355f565b870160e0019450505b505050828103608084015261359d8186886134c9565b915050611c8360a08301846001600160401b03169052565b5f5f604083850312156135c6575f5ffd5b505080516020909101519092909150565b6001600160a01b03831681526060810161150f602083018461330e565b5f60208284031215613604575f5ffd5b8151801515811461150f575f5ffd5b60608101613621828561330e565b61150f6040830184613020565b5f82601f83011261363d575f5ffd5b6136476040612d3c565b806040840185811115613658575f5ffd5b845b81811015612e9057805184526020938401930161365a565b5f5f5f5f60c08587031215613685575f5ffd5b84516020860151909450925061369e866040870161362e565b91506136ad866080870161362e565b905092959194509250565b81516001600160401b038111156136d1576136d1612d00565b6136e5816136df8454613385565b846133bd565b6020601f821160018114613712575f83156137005750848201515b61370a8482613401565b855550611018565b5f84815260208120601f198516915b828110156137415787850151825560209485019460019092019101613721565b508482101561375e57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b613777818661330e565b6137846040820185613020565b608060608201525f6105826080830184866134c9565b8181036137a5575050565b6137af8254613385565b6001600160401b038111156137c6576137c6612d00565b6137d4816136df8454613385565b5f601f8211600181146137f7575f831561370057508482015461370a8482613401565b5f8581526020808220868352908220601f198616925b8381101561382d578286015482556001958601959091019060200161380d565b508583101561384a57818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b60608101613868828561330e565b6001600160401b03831660408301529392505050565b805160208083015191908110156133b7575f1960209190910360031b1b16919050565b80356001600160601b031981169060148410156138d8576001600160601b03196001600160601b03198560140360031b1b82161691505b5092915050565b5f5f5f5f60c085870312156138f2575f5ffd5b843593506020850135925061390a8660408701612e4c565b91506136ad8660808701612e4c565b5f5f6040838503121561392a575f5ffd5b50508035926020909101359150565b5f8261395357634e487b7160e01b5f52601260045260245ffd5b500690565b808202811582820484141761045957610459613352565b8082018082111561045957610459613352565b828152604060208201525f61399a6040830184612f18565b949350505050565b5f82518060208501845e5f920191825250919050565b5f602082840312156139c8575f5ffd5b505191905056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220357848523f78ceee6e38ad02679b3c228680de66227e361e566eac5e71a72fd264736f6c634300081e0033",
}

// KeyRegistrarABI is the input ABI used to generate the binding from.
// Deprecated: Use KeyRegistrarMetaData.ABI instead.
var KeyRegistrarABI = KeyRegistrarMetaData.ABI

// KeyRegistrarBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KeyRegistrarMetaData.Bin instead.
var KeyRegistrarBin = KeyRegistrarMetaData.Bin

// DeployKeyRegistrar deploys a new Ethereum contract, binding an instance of KeyRegistrar to it.
func DeployKeyRegistrar(auth *bind.TransactOpts, backend bind.ContractBackend, _permissionController common.Address, _allocationManager common.Address, _version string) (common.Address, *types.Transaction, *KeyRegistrar, error) {
	parsed, err := KeyRegistrarMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KeyRegistrarBin), backend, _permissionController, _allocationManager, _version)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KeyRegistrar{KeyRegistrarCaller: KeyRegistrarCaller{contract: contract}, KeyRegistrarTransactor: KeyRegistrarTransactor{contract: contract}, KeyRegistrarFilterer: KeyRegistrarFilterer{contract: contract}}, nil
}

// KeyRegistrar is an auto generated Go binding around an Ethereum contract.
type KeyRegistrar struct {
	KeyRegistrarCaller     // Read-only binding to the contract
	KeyRegistrarTransactor // Write-only binding to the contract
	KeyRegistrarFilterer   // Log filterer for contract events
}

// KeyRegistrarCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeyRegistrarCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeyRegistrarTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeyRegistrarFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeyRegistrarSession struct {
	Contract     *KeyRegistrar     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeyRegistrarCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeyRegistrarCallerSession struct {
	Contract *KeyRegistrarCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// KeyRegistrarTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeyRegistrarTransactorSession struct {
	Contract     *KeyRegistrarTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// KeyRegistrarRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeyRegistrarRaw struct {
	Contract *KeyRegistrar // Generic contract binding to access the raw methods on
}

// KeyRegistrarCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeyRegistrarCallerRaw struct {
	Contract *KeyRegistrarCaller // Generic read-only contract binding to access the raw methods on
}

// KeyRegistrarTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeyRegistrarTransactorRaw struct {
	Contract *KeyRegistrarTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeyRegistrar creates a new instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrar(address common.Address, backend bind.ContractBackend) (*KeyRegistrar, error) {
	contract, err := bindKeyRegistrar(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrar{KeyRegistrarCaller: KeyRegistrarCaller{contract: contract}, KeyRegistrarTransactor: KeyRegistrarTransactor{contract: contract}, KeyRegistrarFilterer: KeyRegistrarFilterer{contract: contract}}, nil
}

// NewKeyRegistrarCaller creates a new read-only instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarCaller(address common.Address, caller bind.ContractCaller) (*KeyRegistrarCaller, error) {
	contract, err := bindKeyRegistrar(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarCaller{contract: contract}, nil
}

// NewKeyRegistrarTransactor creates a new write-only instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarTransactor(address common.Address, transactor bind.ContractTransactor) (*KeyRegistrarTransactor, error) {
	contract, err := bindKeyRegistrar(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarTransactor{contract: contract}, nil
}

// NewKeyRegistrarFilterer creates a new log filterer instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarFilterer(address common.Address, filterer bind.ContractFilterer) (*KeyRegistrarFilterer, error) {
	contract, err := bindKeyRegistrar(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarFilterer{contract: contract}, nil
}

// bindKeyRegistrar binds a generic wrapper to an already deployed contract.
func bindKeyRegistrar(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KeyRegistrarMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyRegistrar *KeyRegistrarRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyRegistrar.Contract.KeyRegistrarCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyRegistrar *KeyRegistrarRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.KeyRegistrarTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyRegistrar *KeyRegistrarRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.KeyRegistrarTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyRegistrar *KeyRegistrarCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyRegistrar.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyRegistrar *KeyRegistrarTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyRegistrar *KeyRegistrarTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.contract.Transact(opts, method, params...)
}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) BN254KEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "BN254_KEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) BN254KEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.BN254KEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) BN254KEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.BN254KEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) ECDSAKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "ECDSA_KEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) ECDSAKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.ECDSAKEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) ECDSAKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.ECDSAKEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) AllocationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "allocationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) AllocationManager() (common.Address, error) {
	return _KeyRegistrar.Contract.AllocationManager(&_KeyRegistrar.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) AllocationManager() (common.Address, error) {
	return _KeyRegistrar.Contract.AllocationManager(&_KeyRegistrar.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) DomainSeparator() ([32]byte, error) {
	return _KeyRegistrar.Contract.DomainSeparator(&_KeyRegistrar.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) DomainSeparator() ([32]byte, error) {
	return _KeyRegistrar.Contract.DomainSeparator(&_KeyRegistrar.CallOpts)
}

// EncodeBN254KeyData is a free data retrieval call binding the contract method 0x50435add.
//
// Solidity: function encodeBN254KeyData((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point) pure returns(bytes)
func (_KeyRegistrar *KeyRegistrarCaller) EncodeBN254KeyData(opts *bind.CallOpts, g1Point BN254G1Point, g2Point BN254G2Point) ([]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "encodeBN254KeyData", g1Point, g2Point)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeBN254KeyData is a free data retrieval call binding the contract method 0x50435add.
//
// Solidity: function encodeBN254KeyData((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point) pure returns(bytes)
func (_KeyRegistrar *KeyRegistrarSession) EncodeBN254KeyData(g1Point BN254G1Point, g2Point BN254G2Point) ([]byte, error) {
	return _KeyRegistrar.Contract.EncodeBN254KeyData(&_KeyRegistrar.CallOpts, g1Point, g2Point)
}

// EncodeBN254KeyData is a free data retrieval call binding the contract method 0x50435add.
//
// Solidity: function encodeBN254KeyData((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point) pure returns(bytes)
func (_KeyRegistrar *KeyRegistrarCallerSession) EncodeBN254KeyData(g1Point BN254G1Point, g2Point BN254G2Point) ([]byte, error) {
	return _KeyRegistrar.Contract.EncodeBN254KeyData(&_KeyRegistrar.CallOpts, g1Point, g2Point)
}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarCaller) GetBN254Key(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getBN254Key", operatorSet, operator)

	outstruct := new(struct {
		G1Point BN254G1Point
		G2Point BN254G2Point
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.G1Point = *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)
	outstruct.G2Point = *abi.ConvertType(out[1], new(BN254G2Point)).(*BN254G2Point)

	return *outstruct, err

}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarSession) GetBN254Key(operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	return _KeyRegistrar.Contract.GetBN254Key(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetBN254Key(operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	return _KeyRegistrar.Contract.GetBN254Key(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetBN254KeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getBN254KeyRegistrationMessageHash", operator, operatorSet, keyData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetBN254KeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetBN254KeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyData)
}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetBN254KeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetBN254KeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyData)
}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAAddress(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAAddress", operatorSet, operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAAddress(operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	return _KeyRegistrar.Contract.GetECDSAAddress(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAAddress(operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	return _KeyRegistrar.Contract.GetECDSAAddress(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAKey(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAKey", operatorSet, operator)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAKey(operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAKey(operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAKeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAKeyRegistrationMessageHash", operator, operatorSet, keyAddress)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAKeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyAddress)
}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAKeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyAddress)
}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetKeyHash(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getKeyHash", operatorSet, operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetKeyHash(operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetKeyHash(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetKeyHash(operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetKeyHash(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetOperatorFromSigningKey is a free data retrieval call binding the contract method 0x8256909c.
//
// Solidity: function getOperatorFromSigningKey((address,uint32) operatorSet, bytes keyData) view returns(address, bool)
func (_KeyRegistrar *KeyRegistrarCaller) GetOperatorFromSigningKey(opts *bind.CallOpts, operatorSet OperatorSet, keyData []byte) (common.Address, bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getOperatorFromSigningKey", operatorSet, keyData)

	if err != nil {
		return *new(common.Address), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetOperatorFromSigningKey is a free data retrieval call binding the contract method 0x8256909c.
//
// Solidity: function getOperatorFromSigningKey((address,uint32) operatorSet, bytes keyData) view returns(address, bool)
func (_KeyRegistrar *KeyRegistrarSession) GetOperatorFromSigningKey(operatorSet OperatorSet, keyData []byte) (common.Address, bool, error) {
	return _KeyRegistrar.Contract.GetOperatorFromSigningKey(&_KeyRegistrar.CallOpts, operatorSet, keyData)
}

// GetOperatorFromSigningKey is a free data retrieval call binding the contract method 0x8256909c.
//
// Solidity: function getOperatorFromSigningKey((address,uint32) operatorSet, bytes keyData) view returns(address, bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetOperatorFromSigningKey(operatorSet OperatorSet, keyData []byte) (common.Address, bool, error) {
	return _KeyRegistrar.Contract.GetOperatorFromSigningKey(&_KeyRegistrar.CallOpts, operatorSet, keyData)
}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarCaller) GetOperatorSetCurveType(opts *bind.CallOpts, operatorSet OperatorSet) (uint8, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getOperatorSetCurveType", operatorSet)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarSession) GetOperatorSetCurveType(operatorSet OperatorSet) (uint8, error) {
	return _KeyRegistrar.Contract.GetOperatorSetCurveType(&_KeyRegistrar.CallOpts, operatorSet)
}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetOperatorSetCurveType(operatorSet OperatorSet) (uint8, error) {
	return _KeyRegistrar.Contract.GetOperatorSetCurveType(&_KeyRegistrar.CallOpts, operatorSet)
}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) IsKeyGloballyRegistered(opts *bind.CallOpts, keyHash [32]byte) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "isKeyGloballyRegistered", keyHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) IsKeyGloballyRegistered(keyHash [32]byte) (bool, error) {
	return _KeyRegistrar.Contract.IsKeyGloballyRegistered(&_KeyRegistrar.CallOpts, keyHash)
}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) IsKeyGloballyRegistered(keyHash [32]byte) (bool, error) {
	return _KeyRegistrar.Contract.IsKeyGloballyRegistered(&_KeyRegistrar.CallOpts, keyHash)
}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) IsRegistered(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "isRegistered", operatorSet, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) IsRegistered(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.IsRegistered(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) IsRegistered(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.IsRegistered(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) PermissionController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "permissionController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) PermissionController() (common.Address, error) {
	return _KeyRegistrar.Contract.PermissionController(&_KeyRegistrar.CallOpts)
}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) PermissionController() (common.Address, error) {
	return _KeyRegistrar.Contract.PermissionController(&_KeyRegistrar.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarSession) Version() (string, error) {
	return _KeyRegistrar.Contract.Version(&_KeyRegistrar.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarCallerSession) Version() (string, error) {
	return _KeyRegistrar.Contract.Version(&_KeyRegistrar.CallOpts)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) ConfigureOperatorSet(opts *bind.TransactOpts, operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "configureOperatorSet", operatorSet, curveType)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarSession) ConfigureOperatorSet(operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSet(&_KeyRegistrar.TransactOpts, operatorSet, curveType)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) ConfigureOperatorSet(operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSet(&_KeyRegistrar.TransactOpts, operatorSet, curveType)
}

// ConfigureOperatorSetWithMinDelay is a paid mutator transaction binding the contract method 0xa2d701f6.
//
// Solidity: function configureOperatorSetWithMinDelay((address,uint32) operatorSet, uint8 curveType, uint64 minDelaySeconds) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) ConfigureOperatorSetWithMinDelay(opts *bind.TransactOpts, operatorSet OperatorSet, curveType uint8, minDelaySeconds uint64) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "configureOperatorSetWithMinDelay", operatorSet, curveType, minDelaySeconds)
}

// ConfigureOperatorSetWithMinDelay is a paid mutator transaction binding the contract method 0xa2d701f6.
//
// Solidity: function configureOperatorSetWithMinDelay((address,uint32) operatorSet, uint8 curveType, uint64 minDelaySeconds) returns()
func (_KeyRegistrar *KeyRegistrarSession) ConfigureOperatorSetWithMinDelay(operatorSet OperatorSet, curveType uint8, minDelaySeconds uint64) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSetWithMinDelay(&_KeyRegistrar.TransactOpts, operatorSet, curveType, minDelaySeconds)
}

// ConfigureOperatorSetWithMinDelay is a paid mutator transaction binding the contract method 0xa2d701f6.
//
// Solidity: function configureOperatorSetWithMinDelay((address,uint32) operatorSet, uint8 curveType, uint64 minDelaySeconds) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) ConfigureOperatorSetWithMinDelay(operatorSet OperatorSet, curveType uint8, minDelaySeconds uint64) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSetWithMinDelay(&_KeyRegistrar.TransactOpts, operatorSet, curveType, minDelaySeconds)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) DeregisterKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "deregisterKey", operator, operatorSet)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarSession) DeregisterKey(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.DeregisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) DeregisterKey(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.DeregisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// FinalizeScheduledRotation is a paid mutator transaction binding the contract method 0x0934d597.
//
// Solidity: function finalizeScheduledRotation(address operator, (address,uint32) operatorSet) returns(bool success)
func (_KeyRegistrar *KeyRegistrarTransactor) FinalizeScheduledRotation(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "finalizeScheduledRotation", operator, operatorSet)
}

// FinalizeScheduledRotation is a paid mutator transaction binding the contract method 0x0934d597.
//
// Solidity: function finalizeScheduledRotation(address operator, (address,uint32) operatorSet) returns(bool success)
func (_KeyRegistrar *KeyRegistrarSession) FinalizeScheduledRotation(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.FinalizeScheduledRotation(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// FinalizeScheduledRotation is a paid mutator transaction binding the contract method 0x0934d597.
//
// Solidity: function finalizeScheduledRotation(address operator, (address,uint32) operatorSet) returns(bool success)
func (_KeyRegistrar *KeyRegistrarTransactorSession) FinalizeScheduledRotation(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.FinalizeScheduledRotation(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) RegisterKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "registerKey", operator, operatorSet, keyData, signature)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarSession) RegisterKey(operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RegisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, keyData, signature)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) RegisterKey(operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RegisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, keyData, signature)
}

// RotateKey is a paid mutator transaction binding the contract method 0x81b2796c.
//
// Solidity: function rotateKey(address operator, (address,uint32) operatorSet, bytes newPubkey, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) RotateKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet, newPubkey []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "rotateKey", operator, operatorSet, newPubkey, signature)
}

// RotateKey is a paid mutator transaction binding the contract method 0x81b2796c.
//
// Solidity: function rotateKey(address operator, (address,uint32) operatorSet, bytes newPubkey, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarSession) RotateKey(operator common.Address, operatorSet OperatorSet, newPubkey []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RotateKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, newPubkey, signature)
}

// RotateKey is a paid mutator transaction binding the contract method 0x81b2796c.
//
// Solidity: function rotateKey(address operator, (address,uint32) operatorSet, bytes newPubkey, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) RotateKey(operator common.Address, operatorSet OperatorSet, newPubkey []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RotateKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, newPubkey, signature)
}

// SetMinKeyRotationDelay is a paid mutator transaction binding the contract method 0x11030402.
//
// Solidity: function setMinKeyRotationDelay((address,uint32) operatorSet, uint64 minDelaySeconds) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) SetMinKeyRotationDelay(opts *bind.TransactOpts, operatorSet OperatorSet, minDelaySeconds uint64) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "setMinKeyRotationDelay", operatorSet, minDelaySeconds)
}

// SetMinKeyRotationDelay is a paid mutator transaction binding the contract method 0x11030402.
//
// Solidity: function setMinKeyRotationDelay((address,uint32) operatorSet, uint64 minDelaySeconds) returns()
func (_KeyRegistrar *KeyRegistrarSession) SetMinKeyRotationDelay(operatorSet OperatorSet, minDelaySeconds uint64) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.SetMinKeyRotationDelay(&_KeyRegistrar.TransactOpts, operatorSet, minDelaySeconds)
}

// SetMinKeyRotationDelay is a paid mutator transaction binding the contract method 0x11030402.
//
// Solidity: function setMinKeyRotationDelay((address,uint32) operatorSet, uint64 minDelaySeconds) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) SetMinKeyRotationDelay(operatorSet OperatorSet, minDelaySeconds uint64) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.SetMinKeyRotationDelay(&_KeyRegistrar.TransactOpts, operatorSet, minDelaySeconds)
}

// KeyRegistrarAggregateBN254KeyUpdatedIterator is returned from FilterAggregateBN254KeyUpdated and is used to iterate over the raw logs and unpacked data for AggregateBN254KeyUpdated events raised by the KeyRegistrar contract.
type KeyRegistrarAggregateBN254KeyUpdatedIterator struct {
	Event *KeyRegistrarAggregateBN254KeyUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarAggregateBN254KeyUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarAggregateBN254KeyUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarAggregateBN254KeyUpdated represents a AggregateBN254KeyUpdated event raised by the KeyRegistrar contract.
type KeyRegistrarAggregateBN254KeyUpdated struct {
	OperatorSet     OperatorSet
	NewAggregateKey BN254G1Point
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAggregateBN254KeyUpdated is a free log retrieval operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterAggregateBN254KeyUpdated(opts *bind.FilterOpts) (*KeyRegistrarAggregateBN254KeyUpdatedIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "AggregateBN254KeyUpdated")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarAggregateBN254KeyUpdatedIterator{contract: _KeyRegistrar.contract, event: "AggregateBN254KeyUpdated", logs: logs, sub: sub}, nil
}

// WatchAggregateBN254KeyUpdated is a free log subscription operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchAggregateBN254KeyUpdated(opts *bind.WatchOpts, sink chan<- *KeyRegistrarAggregateBN254KeyUpdated) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "AggregateBN254KeyUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarAggregateBN254KeyUpdated)
				if err := _KeyRegistrar.contract.UnpackLog(event, "AggregateBN254KeyUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAggregateBN254KeyUpdated is a log parse operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseAggregateBN254KeyUpdated(log types.Log) (*KeyRegistrarAggregateBN254KeyUpdated, error) {
	event := new(KeyRegistrarAggregateBN254KeyUpdated)
	if err := _KeyRegistrar.contract.UnpackLog(event, "AggregateBN254KeyUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyDeregisteredIterator is returned from FilterKeyDeregistered and is used to iterate over the raw logs and unpacked data for KeyDeregistered events raised by the KeyRegistrar contract.
type KeyRegistrarKeyDeregisteredIterator struct {
	Event *KeyRegistrarKeyDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyDeregistered represents a KeyDeregistered event raised by the KeyRegistrar contract.
type KeyRegistrarKeyDeregistered struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyDeregistered is a free log retrieval operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyDeregistered(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyDeregisteredIterator{contract: _KeyRegistrar.contract, event: "KeyDeregistered", logs: logs, sub: sub}, nil
}

// WatchKeyDeregistered is a free log subscription operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyDeregistered(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyDeregistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyDeregistered)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyDeregistered is a log parse operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyDeregistered(log types.Log) (*KeyRegistrarKeyDeregistered, error) {
	event := new(KeyRegistrarKeyDeregistered)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyRegisteredIterator is returned from FilterKeyRegistered and is used to iterate over the raw logs and unpacked data for KeyRegistered events raised by the KeyRegistrar contract.
type KeyRegistrarKeyRegisteredIterator struct {
	Event *KeyRegistrarKeyRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyRegistered represents a KeyRegistered event raised by the KeyRegistrar contract.
type KeyRegistrarKeyRegistered struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	Pubkey      []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyRegistered is a free log retrieval operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyRegistered(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyRegisteredIterator{contract: _KeyRegistrar.contract, event: "KeyRegistered", logs: logs, sub: sub}, nil
}

// WatchKeyRegistered is a free log subscription operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyRegistered(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyRegistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyRegistered)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRegistered is a log parse operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyRegistered(log types.Log) (*KeyRegistrarKeyRegistered, error) {
	event := new(KeyRegistrarKeyRegistered)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyRotationScheduledIterator is returned from FilterKeyRotationScheduled and is used to iterate over the raw logs and unpacked data for KeyRotationScheduled events raised by the KeyRegistrar contract.
type KeyRegistrarKeyRotationScheduledIterator struct {
	Event *KeyRegistrarKeyRotationScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyRotationScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyRotationScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyRotationScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyRotationScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyRotationScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyRotationScheduled represents a KeyRotationScheduled event raised by the KeyRegistrar contract.
type KeyRegistrarKeyRotationScheduled struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	OldPubkey   []byte
	NewPubkey   []byte
	ActivateAt  uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyRotationScheduled is a free log retrieval operation binding the contract event 0x600c8ea5356df2fad359d32cf64544f00ad31ccf4133a70b4da8630b1e3658d1.
//
// Solidity: event KeyRotationScheduled((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes oldPubkey, bytes newPubkey, uint64 activateAt)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyRotationScheduled(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyRotationScheduledIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyRotationScheduled", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyRotationScheduledIterator{contract: _KeyRegistrar.contract, event: "KeyRotationScheduled", logs: logs, sub: sub}, nil
}

// WatchKeyRotationScheduled is a free log subscription operation binding the contract event 0x600c8ea5356df2fad359d32cf64544f00ad31ccf4133a70b4da8630b1e3658d1.
//
// Solidity: event KeyRotationScheduled((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes oldPubkey, bytes newPubkey, uint64 activateAt)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyRotationScheduled(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyRotationScheduled, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyRotationScheduled", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyRotationScheduled)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRotationScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRotationScheduled is a log parse operation binding the contract event 0x600c8ea5356df2fad359d32cf64544f00ad31ccf4133a70b4da8630b1e3658d1.
//
// Solidity: event KeyRotationScheduled((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes oldPubkey, bytes newPubkey, uint64 activateAt)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyRotationScheduled(log types.Log) (*KeyRegistrarKeyRotationScheduled, error) {
	event := new(KeyRegistrarKeyRotationScheduled)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRotationScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarMinKeyRotationDelaySetIterator is returned from FilterMinKeyRotationDelaySet and is used to iterate over the raw logs and unpacked data for MinKeyRotationDelaySet events raised by the KeyRegistrar contract.
type KeyRegistrarMinKeyRotationDelaySetIterator struct {
	Event *KeyRegistrarMinKeyRotationDelaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarMinKeyRotationDelaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarMinKeyRotationDelaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarMinKeyRotationDelaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarMinKeyRotationDelaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarMinKeyRotationDelaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarMinKeyRotationDelaySet represents a MinKeyRotationDelaySet event raised by the KeyRegistrar contract.
type KeyRegistrarMinKeyRotationDelaySet struct {
	OperatorSet OperatorSet
	MinDelay    uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMinKeyRotationDelaySet is a free log retrieval operation binding the contract event 0x22b2b63b5820f9d933565468845820b939bf5ad654ea6ab5bdd3728f19e4580f.
//
// Solidity: event MinKeyRotationDelaySet((address,uint32) operatorSet, uint64 minDelay)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterMinKeyRotationDelaySet(opts *bind.FilterOpts) (*KeyRegistrarMinKeyRotationDelaySetIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "MinKeyRotationDelaySet")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarMinKeyRotationDelaySetIterator{contract: _KeyRegistrar.contract, event: "MinKeyRotationDelaySet", logs: logs, sub: sub}, nil
}

// WatchMinKeyRotationDelaySet is a free log subscription operation binding the contract event 0x22b2b63b5820f9d933565468845820b939bf5ad654ea6ab5bdd3728f19e4580f.
//
// Solidity: event MinKeyRotationDelaySet((address,uint32) operatorSet, uint64 minDelay)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchMinKeyRotationDelaySet(opts *bind.WatchOpts, sink chan<- *KeyRegistrarMinKeyRotationDelaySet) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "MinKeyRotationDelaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarMinKeyRotationDelaySet)
				if err := _KeyRegistrar.contract.UnpackLog(event, "MinKeyRotationDelaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinKeyRotationDelaySet is a log parse operation binding the contract event 0x22b2b63b5820f9d933565468845820b939bf5ad654ea6ab5bdd3728f19e4580f.
//
// Solidity: event MinKeyRotationDelaySet((address,uint32) operatorSet, uint64 minDelay)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseMinKeyRotationDelaySet(log types.Log) (*KeyRegistrarMinKeyRotationDelaySet, error) {
	event := new(KeyRegistrarMinKeyRotationDelaySet)
	if err := _KeyRegistrar.contract.UnpackLog(event, "MinKeyRotationDelaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarOperatorSetConfiguredIterator is returned from FilterOperatorSetConfigured and is used to iterate over the raw logs and unpacked data for OperatorSetConfigured events raised by the KeyRegistrar contract.
type KeyRegistrarOperatorSetConfiguredIterator struct {
	Event *KeyRegistrarOperatorSetConfigured // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarOperatorSetConfigured)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarOperatorSetConfigured)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarOperatorSetConfigured represents a OperatorSetConfigured event raised by the KeyRegistrar contract.
type KeyRegistrarOperatorSetConfigured struct {
	OperatorSet OperatorSet
	CurveType   uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOperatorSetConfigured is a free log retrieval operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterOperatorSetConfigured(opts *bind.FilterOpts) (*KeyRegistrarOperatorSetConfiguredIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "OperatorSetConfigured")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarOperatorSetConfiguredIterator{contract: _KeyRegistrar.contract, event: "OperatorSetConfigured", logs: logs, sub: sub}, nil
}

// WatchOperatorSetConfigured is a free log subscription operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchOperatorSetConfigured(opts *bind.WatchOpts, sink chan<- *KeyRegistrarOperatorSetConfigured) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "OperatorSetConfigured")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarOperatorSetConfigured)
				if err := _KeyRegistrar.contract.UnpackLog(event, "OperatorSetConfigured", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSetConfigured is a log parse operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseOperatorSetConfigured(log types.Log) (*KeyRegistrarOperatorSetConfigured, error) {
	event := new(KeyRegistrarOperatorSetConfigured)
	if err := _KeyRegistrar.contract.UnpackLog(event, "OperatorSetConfigured", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
