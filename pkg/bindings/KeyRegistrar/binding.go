// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package KeyRegistrar

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// OperatorSet is an auto generated low-level Go binding around an user-defined struct.
type OperatorSet struct {
	Avs common.Address
	Id  uint32
}

// KeyRegistrarMetaData contains all meta data concerning the KeyRegistrar contract.
var KeyRegistrarMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_permissionController\",\"type\":\"address\",\"internalType\":\"contractIPermissionController\"},{\"name\":\"_allocationManager\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"},{\"name\":\"_version\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"BN254_KEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ECDSA_KEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allocationManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkKey\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"configureOperatorSet\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBN254Key\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"g1Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"g2Point\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBN254KeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAAddress\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAKey\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getECDSAKeyRegistrationMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getKeyHash\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSetCurveType\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isKeyGloballyRegistered\",\"inputs\":[{\"name\":\"keyHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isRegistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permissionController\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPermissionController\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"keyData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AggregateBN254KeyUpdated\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"newAggregateKey\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyDeregistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"KeyRegistered\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"},{\"name\":\"pubkey\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorSetConfigured\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"curveType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIKeyRegistrarTypes.CurveType\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ConfigurationAlreadySet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECAddFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECMulFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECPairingFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpModFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidCurveType\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidKeyFormat\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidKeypair\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPermissions\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"KeyAlreadyRegistered\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"KeyNotFound\",\"inputs\":[{\"name\":\"operatorSet\",\"type\":\"tuple\",\"internalType\":\"structOperatorSet\",\"components\":[{\"name\":\"avs\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"id\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OperatorSetNotConfigured\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SignatureExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroPubkey\",\"inputs\":[]}]",
	Bin: "0x60e060405234801561000f575f5ffd5b50604051612efe380380612efe83398101604081905261002e916100cb565b6001600160a01b03808316608052831660a052808061004c8161005a565b60c052506101fc9350505050565b5f5f829050601f8151111561008d578260405163305a27a960e01b815260040161008491906101a1565b60405180910390fd5b8051610098826101d6565b179392505050565b6001600160a01b03811681146100b4575f5ffd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f606084860312156100dd575f5ffd5b83516100e8816100a0565b60208501519093506100f9816100a0565b60408501519092506001600160401b03811115610114575f5ffd5b8401601f81018613610124575f5ffd5b80516001600160401b0381111561013d5761013d6100b7565b604051601f8201601f19908116603f011681016001600160401b038111828210171561016b5761016b6100b7565b604052818152828201602001881015610182575f5ffd5b8160208401602083015e5f602083830101528093505050509250925092565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156101f6575f198160200360031b1b821691505b50919050565b60805160a05160c051612cc361023b5f395f8181610498015261162c01525f81816101ad015261121d01525f818161029f01526105b20152612cc35ff3fe608060405234801561000f575f5ffd5b506004361061011c575f3560e01c8063aa165c30116100a9578063d9f12db21161006e578063d9f12db2146102d4578063dab42d7e146102e7578063ea0d814914610309578063ea194e2e1461031c578063f698da251461032f575f5ffd5b8063aa165c301461024d578063b05c8f6d14610260578063bd30a0b914610287578063ca8aa7c71461029a578063d40cda16146102c1575f5ffd5b806354fd4d50116100ef57806354fd4d50146101cf5780637690e395146101e45780637cffe48c146101f757806387ab86f4146102175780639a43e3fb1461022c575f5ffd5b80630a6ac26414610120578063166aa127146101485780633b32a7bd1461017d5780634657e26a146101a8575b5f5ffd5b61013361012e3660046124a2565b610337565b60405190151581526020015b60405180910390f35b61016f7f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f8181565b60405190815260200161013f565b61019061018b3660046124a2565b610473565b6040516001600160a01b03909116815260200161013f565b6101907f000000000000000000000000000000000000000000000000000000000000000081565b6101d7610491565b60405161013f9190612506565b61016f6101f2366004612556565b6104c1565b61020a6102053660046125b6565b610569565b60405161013f9190612604565b61022a610225366004612612565b61058f565b005b61023f61023a3660046124a2565b610853565b60405161013f929190612668565b6101d761025b3660046124a2565b610a3d565b61016f7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d8181565b6101336102953660046124a2565b610b7a565b6101907f000000000000000000000000000000000000000000000000000000000000000081565b61022a6102cf3660046126a5565b610bb7565b61016f6102e2366004612738565b610d41565b6101336102f536600461277f565b5f9081526002602052604090205460ff1690565b61022a610317366004612796565b610dda565b61016f61032a3660046124a2565b610f1d565b61016f611045565b5f5f60015f610345866110fe565b815260208101919091526040015f9081205460ff16915081600281111561036e5761036e6125d0565b0361038c57604051635cd3106d60e11b815260040160405180910390fd5b5f5f5f610398876110fe565b815260208082019290925260409081015f9081206001600160a01b038816825283528190208151808301909252805460ff161515825260018101805492939192918401916103e5906127c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610411906127c4565b801561045c5780601f106104335761010080835404028352916020019161045c565b820191905f5260205f20905b81548152906001019060200180831161043f57829003601f168201915b505050919092525050905193505050505b92915050565b5f61047e8383610a3d565b610487906127fc565b60601c9392505050565b60606104bc7f000000000000000000000000000000000000000000000000000000000000000061115c565b905090565b5f5f7fda86e76deaed01641f80ff5f72c372a038fa5182697aeb967e8b1f9819d58d8186865f0151876020015187876040516104fe929190612840565b6040805191829003822060208301969096526001600160a01b039485169082015292909116606083015263ffffffff16608082015260a081019190915260c00160405160208183030381529060405280519060200120905061055f81611199565b9695505050505050565b5f60015f610576846110fe565b815260208101919091526040015f205460ff1692915050565b805160405163304c10cd60e01b81526001600160a01b03918216600482015233917f0000000000000000000000000000000000000000000000000000000000000000169063304c10cd90602401602060405180830381865afa1580156105f7573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061b919061284f565b6001600160a01b0316146106425760405163932d94f760e01b815260040160405180910390fd5b5f60015f61064f846110fe565b815260208101919091526040015f9081205460ff169150816002811115610678576106786125d0565b0361069657604051635cd3106d60e11b815260040160405180910390fd5b5f5f5f6106a2856110fe565b815260208082019290925260409081015f9081206001600160a01b038816825283528190208151808301909252805460ff161515825260018101805492939192918401916106ef906127c4565b80601f016020809104026020016040519081016040528092919081815260200182805461071b906127c4565b80156107665780601f1061073d57610100808354040283529160200191610766565b820191905f5260205f20905b81548152906001019060200180831161074957829003601f168201915b5050505050815250509050805f0151838590916107c057604051632e40e18760e01b815282516001600160a01b03908116600483015260209093015163ffffffff1660248201529116604482015260640160405180910390fd5b50505f5f6107cd856110fe565b815260208082019290925260409081015f9081206001600160a01b03881682529092528120805460ff191681559061080860018301826122b4565b5050836001600160a01b03167f28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442848460405161084592919061286a565b60405180910390a250505050565b604080518082019091525f808252602082015261086e6122ee565b5f60015f61087b876110fe565b815260208101919091526040015f205460ff16905060028160028111156108a4576108a46125d0565b146108c25760405163fdea7c0960e01b815260040160405180910390fd5b5f5f5f6108ce886110fe565b815260208082019290925260409081015f9081206001600160a01b038916825283528190208151808301909252805460ff1615158252600181018054929391929184019161091b906127c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610947906127c4565b80156109925780601f1061096957610100808354040283529160200191610992565b820191905f5260205f20905b81548152906001019060200180831161097557829003601f168201915b5050505050815250509050805f01516109e75750506040805180820182525f80825260208083018290528351808501855282815280820192909252835180850190945282845283019190915292509050610a36565b5f5f5f5f8460200151806020019051810190610a0391906128e7565b60408051808201825294855260208086019490945280518082019091529182529181019190915290985096505050505050505b9250929050565b60605f60015f610a4c866110fe565b815260208101919091526040015f205460ff1690506001816002811115610a7557610a756125d0565b14610a935760405163fdea7c0960e01b815260040160405180910390fd5b5f5f5f610a9f876110fe565b815260208082019290925260409081015f9081206001600160a01b038816825283528190208151808301909252805460ff16151582526001810180549293919291840191610aec906127c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b18906127c4565b8015610b635780601f10610b3a57610100808354040283529160200191610b63565b820191905f5260205f20905b815481529060010190602001808311610b4657829003601f168201915b505050919092525050506020015195945050505050565b5f5f5f610b86856110fe565b815260208082019290925260409081015f9081206001600160a01b038616825290925290205460ff16905092915050565b85610bc1816111df565b610bde5760405163932d94f760e01b815260040160405180910390fd5b5f60015f610beb896110fe565b815260208101919091526040015f9081205460ff169150816002811115610c1457610c146125d0565b03610c3257604051635cd3106d60e11b815260040160405180910390fd5b5f5f610c3d896110fe565b815260208082019290925260409081015f9081206001600160a01b038c16825290925290205460ff1615610c8457604051630c7bc20160e11b815260040160405180910390fd5b6001816002811115610c9857610c986125d0565b03610cb057610cab878988888888611289565b610cf0565b6002816002811115610cc457610cc46125d0565b03610cd757610cab8789888888886113ea565b60405163fdea7c0960e01b815260040160405180910390fd5b876001600160a01b03167f1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd88838989604051610d2f949392919061292d565b60405180910390a25050505050505050565b81516020808401516040515f938493610dae937f991b0a3376ce87f8ecc5d70962279ac09cdce934e8b5b9683e73c8ff087c7f81938a93928991019485526001600160a01b039384166020860152918316604085015263ffffffff16606084015216608082015260a00190565b604051602081830303815290604052805190602001209050610dcf81611199565b9150505b9392505050565b8151610de5816111df565b610e025760405163932d94f760e01b815260040160405180910390fd5b6001826002811115610e1657610e166125d0565b1480610e3357506002826002811115610e3157610e316125d0565b145b610e505760405163fdea7c0960e01b815260040160405180910390fd5b5f60015f610e5d866110fe565b815260208101919091526040015f9081205460ff169150816002811115610e8657610e866125d0565b14610ea3576040516281f09f60e01b815260040160405180910390fd5b8260015f610eb0876110fe565b815260208101919091526040015f20805460ff19166001836002811115610ed957610ed96125d0565b02179055507fb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e78484604051610f0f92919061286a565b60405180910390a150505050565b5f5f5f5f610f2a866110fe565b815260208082019290925260409081015f9081206001600160a01b038716825283528190208151808301909252805460ff16151582526001810180549293919291840191610f77906127c4565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa3906127c4565b8015610fee5780601f10610fc557610100808354040283529160200191610fee565b820191905f5260205f20905b815481529060010190602001808311610fd157829003601f168201915b50505050508152505090505f60015f611006876110fe565b815260208101919091526040015f2054825160ff909116915061102e57505f915061046d9050565b61103c8260200151826115a3565b95945050505050565b60408051808201909152600a81526922b4b3b2b72630bcb2b960b11b6020909101525f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f71b625cfad44bac63b13dba07f2e1d6084ee04b6f8752101ece6126d584ee6ea6110b2611624565b805160209182012060408051928301949094529281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f815f0151826020015163ffffffff1660405160200161114492919060609290921b6001600160601b031916825260a01b6001600160a01b031916601482015260200190565b60405160208183030381529060405261046d9061298a565b60605f61116883611699565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f6111a2611045565b60405161190160f01b6020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050919050565b604051631beb2b9760e31b81526001600160a01b0382811660048301523360248301523060448301525f80356001600160e01b0319166064840152917f00000000000000000000000000000000000000000000000000000000000000009091169063df595cb8906084016020604051808303815f875af1158015611265573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061046d91906129ad565b601483146112aa5760405163d109118160e01b815260040160405180910390fd5b5f6112b584866129cc565b60601c9050806112d857604051634935505f60e01b815260040160405180910390fd5b5f61131a86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250600192506115a3915050565b5f8181526002602052604090205490915060ff161561134c57604051630c7bc20160e11b815260040160405180910390fd5b5f611358888a85610d41565b905061139d838287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505f1992506116c0915050565b6113df898989898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250889250611718915050565b505050505050505050565b604080518082019091525f80825260208201526114056122ee565b5f808080611415898b018b612a4e565b93509350935093506040518060400160405280858152602001848152509550835f148015611441575082155b1561145f57604051634935505f60e01b815260040160405180910390fd5b60408051808201909152918252602082015292505f91506114849050888a89896104c1565b90505f8061149486880188612a88565b604080518082019091528281526020810182905291935091505f6114bc85838989858061179c565b915050806114dd57604051638baa579f60e01b815260040160405180910390fd5b5f61151f8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250600292506115a3915050565b5f8181526002602052604090205490915060ff161561155157604051630c7bc20160e11b815260040160405180910390fd5b6115938e8e8e8e8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250879250611718915050565b5050505050505050505050505050565b5f60018260028111156115b8576115b86125d0565b036115ca57508151602083012061046d565b60028260028111156115de576115de6125d0565b03610cd7575f5f848060200190518101906115f991906128e7565b505060408051808201825283815260209081019283525f93845291519091529020925061046d915050565b60605f6116507f000000000000000000000000000000000000000000000000000000000000000061115c565b9050805f8151811061166457611664612aa8565b016020908101516040516001600160f81b03199091169181019190915260210160405160208183030381529060405291505090565b5f60ff8216601f81111561046d57604051632cd44ac360e21b815260040160405180910390fd5b428110156116e157604051630819bdcd60e01b815260040160405180910390fd5b6116f56001600160a01b0385168484611864565b61171257604051638baa579f60e01b815260040160405180910390fd5b50505050565b6040805180820190915260018152602081018390525f80611738876110fe565b815260208082019290925260409081015f9081206001600160a01b03881682528352208251815460ff191690151517815590820151600182019061177c9082612b08565b5050505f908152600260205260409020805460ff19166001179055505050565b5f5f5f6117a8896118b8565b90505f6117b78a89898c611942565b90505f6117ce6117c78a846119ed565b8b90611a5d565b90505f611810611809846118036040805180820182525f80825260209182015281518083019092526001825260029082015290565b906119ed565b8590611a5d565b905087156118355761182c82611824611ad1565b838c8b611b91565b96509450611855565b61184882611841611ad1565b838c611da5565b9550851561185557600194505b50505050965096945050505050565b5f5f5f6118718585611fdc565b90925090505f816004811115611889576118896125d0565b1480156118a75750856001600160a01b0316826001600160a01b0316145b8061055f575061055f86868661201b565b604080518082019091525f80825260208201525f80806118e55f516020612c6e5f395f51905f5286612bc3565b90505b6118f181612102565b90935091505f516020612c6e5f395f51905f528283098303611929576040805180820190915290815260208101919091529392505050565b5f516020612c6e5f395f51905f526001820890506118e8565b8251602080850151845180519083015186840151805190850151875188870151604080519889018e90528801989098526060870195909552608086019390935260a085019190915260c084015260e08301526101008201526101208101919091525f907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019061014001604051602081830303815290604052805190602001205f1c61103c9190612bc3565b604080518082019091525f8082526020820152611a08612313565b835181526020808501519082015260408082018490525f908360608460076107d05a03fa90508080611a3657fe5b5080611a5557604051632319df1960e11b815260040160405180910390fd5b505092915050565b604080518082019091525f8082526020820152611a78612331565b835181526020808501518183015283516040808401919091529084015160608301525f908360808460066107d05a03fa90508080611ab257fe5b5080611a555760405163d4b68fd760e01b815260040160405180910390fd5b611ad96122ee565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820182528681526020808201869052825180840190935286835282018490525f91829190611bc261234f565b5f5b6002811015611d79575f611bd9826006612bf6565b9050848260028110611bed57611bed612aa8565b60200201515183611bfe835f612c0d565b600c8110611c0e57611c0e612aa8565b6020020152848260028110611c2557611c25612aa8565b60200201516020015183826001611c3c9190612c0d565b600c8110611c4c57611c4c612aa8565b6020020152838260028110611c6357611c63612aa8565b6020020151515183611c76836002612c0d565b600c8110611c8657611c86612aa8565b6020020152838260028110611c9d57611c9d612aa8565b6020020151516001602002015183611cb6836003612c0d565b600c8110611cc657611cc6612aa8565b6020020152838260028110611cdd57611cdd612aa8565b6020020151602001515f60028110611cf757611cf7612aa8565b602002015183611d08836004612c0d565b600c8110611d1857611d18612aa8565b6020020152838260028110611d2f57611d2f612aa8565b602002015160200151600160028110611d4a57611d4a612aa8565b602002015183611d5b836005612c0d565b600c8110611d6b57611d6b612aa8565b602002015250600101611bc4565b50611d8261236e565b5f6020826101808560088cfa9151919c9115159b50909950505050505050505050565b6040805180820182528581526020808201859052825180840190935285835282018390525f91611dd361234f565b5f5b6002811015611f8a575f611dea826006612bf6565b9050848260028110611dfe57611dfe612aa8565b60200201515183611e0f835f612c0d565b600c8110611e1f57611e1f612aa8565b6020020152848260028110611e3657611e36612aa8565b60200201516020015183826001611e4d9190612c0d565b600c8110611e5d57611e5d612aa8565b6020020152838260028110611e7457611e74612aa8565b6020020151515183611e87836002612c0d565b600c8110611e9757611e97612aa8565b6020020152838260028110611eae57611eae612aa8565b6020020151516001602002015183611ec7836003612c0d565b600c8110611ed757611ed7612aa8565b6020020152838260028110611eee57611eee612aa8565b6020020151602001515f60028110611f0857611f08612aa8565b602002015183611f19836004612c0d565b600c8110611f2957611f29612aa8565b6020020152838260028110611f4057611f40612aa8565b602002015160200151600160028110611f5b57611f5b612aa8565b602002015183611f6c836005612c0d565b600c8110611f7c57611f7c612aa8565b602002015250600101611dd5565b50611f9361236e565b5f6020826101808560086107d05a03fa90508080611fad57fe5b5080611fcc576040516324ccc79360e21b815260040160405180910390fd5b5051151598975050505050505050565b5f5f8251604103612010576020830151604084015160608501515f1a6120048782858561217e565b94509450505050610a36565b505f90506002610a36565b5f5f5f856001600160a01b0316631626ba7e60e01b8686604051602401612043929190612c20565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516120819190612c40565b5f60405180830381855afa9150503d805f81146120b9576040519150601f19603f3d011682016040523d82523d5f602084013e6120be565b606091505b50915091508180156120d257506020815110155b801561055f57508051630b135d3f60e11b906120f79083016020908101908401612c56565b149695505050505050565b5f80805f516020612c6e5f395f51905f5260035f516020612c6e5f395f51905f52865f516020612c6e5f395f51905f52888909090890505f612172827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f525f516020612c6e5f395f51905f5261223b565b91959194509092505050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121b357505f90506003612232565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612204573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b03811661222c575f60019250925050612232565b91505f90505b94509492505050565b5f5f61224561236e565b61224d61238c565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa9250828061228a57fe5b50826122a95760405163d51edae360e01b815260040160405180910390fd5b505195945050505050565b5080546122c0906127c4565b5f825580601f106122cf575050565b601f0160209004905f5260205f20908101906122eb91906123aa565b50565b60405180604001604052806123016123c2565b815260200161230e6123c2565b905290565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b5b808211156123be575f81556001016123ab565b5090565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561241d5761241d6123e0565b604052919050565b6001600160a01b03811681146122eb575f5ffd5b5f60408284031215612449575f5ffd5b6040805190810167ffffffffffffffff8111828210171561246c5761246c6123e0565b604052905080823561247d81612425565b8152602083013563ffffffff81168114612495575f5ffd5b6020919091015292915050565b5f5f606083850312156124b3575f5ffd5b6124bd8484612439565b915060408301356124cd81612425565b809150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610dd360208301846124d8565b5f5f83601f840112612528575f5ffd5b50813567ffffffffffffffff81111561253f575f5ffd5b602083019150836020828501011115610a36575f5ffd5b5f5f5f5f60808587031215612569575f5ffd5b843561257481612425565b93506125838660208701612439565b9250606085013567ffffffffffffffff81111561259e575f5ffd5b6125aa87828801612518565b95989497509550505050565b5f604082840312156125c6575f5ffd5b610dd38383612439565b634e487b7160e01b5f52602160045260245ffd5b6003811061260057634e487b7160e01b5f52602160045260245ffd5b9052565b6020810161046d82846125e4565b5f5f60608385031215612623575f5ffd5b823561262e81612425565b915061263d8460208501612439565b90509250929050565b805f5b6002811015611712578151845260209384019390910190600101612649565b5f60c082019050835182526020840151602083015261268b604083018451612646565b602083015161269d6080840182612646565b509392505050565b5f5f5f5f5f5f60a087890312156126ba575f5ffd5b86356126c581612425565b95506126d48860208901612439565b9450606087013567ffffffffffffffff8111156126ef575f5ffd5b6126fb89828a01612518565b909550935050608087013567ffffffffffffffff81111561271a575f5ffd5b61272689828a01612518565b979a9699509497509295939492505050565b5f5f5f6080848603121561274a575f5ffd5b833561275581612425565b92506127648560208601612439565b9150606084013561277481612425565b809150509250925092565b5f6020828403121561278f575f5ffd5b5035919050565b5f5f606083850312156127a7575f5ffd5b6127b18484612439565b91506040830135600381106124cd575f5ffd5b600181811c908216806127d857607f821691505b6020821081036127f657634e487b7160e01b5f52602260045260245ffd5b50919050565b805160208201516001600160601b0319811691906014821015612839576001600160601b03196001600160601b03198360140360031b1b82161692505b5050919050565b818382375f9101908152919050565b5f6020828403121561285f575f5ffd5b8151610dd381612425565b82516001600160a01b0316815260208084015163ffffffff169082015260608101610dd360408301846125e4565b5f82601f8301126128a7575f5ffd5b6128b160406123f4565b8060408401858111156128c2575f5ffd5b845b818110156128dc5780518452602093840193016128c4565b509095945050505050565b5f5f5f5f60c085870312156128fa575f5ffd5b8451602086015190945092506129138660408701612898565b91506129228660808701612898565b905092959194509250565b84516001600160a01b0316815260208086015163ffffffff169082015261295760408201856125e4565b60806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f191601019392505050565b805160208083015191908110156127f6575f1960209190910360031b1b16919050565b5f602082840312156129bd575f5ffd5b81518015158114610dd3575f5ffd5b80356001600160601b03198116906014841015612a03576001600160601b03196001600160601b03198560140360031b1b82161691505b5092915050565b5f82601f830112612a19575f5ffd5b612a2360406123f4565b806040840185811115612a34575f5ffd5b845b818110156128dc578035845260209384019301612a36565b5f5f5f5f60c08587031215612a61575f5ffd5b8435935060208501359250612a798660408701612a0a565b91506129228660808701612a0a565b5f5f60408385031215612a99575f5ffd5b50508035926020909101359150565b634e487b7160e01b5f52603260045260245ffd5b601f821115612b0357805f5260205f20601f840160051c81016020851015612ae15750805b601f840160051c820191505b81811015612b00575f8155600101612aed565b50505b505050565b815167ffffffffffffffff811115612b2257612b226123e0565b612b3681612b3084546127c4565b84612abc565b6020601f821160018114612b68575f8315612b515750848201515b5f19600385901b1c1916600184901b178455612b00565b5f84815260208120601f198516915b82811015612b975787850151825560209485019460019092019101612b77565b5084821015612bb457868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f82612bdd57634e487b7160e01b5f52601260045260245ffd5b500690565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761046d5761046d612be2565b8082018082111561046d5761046d612be2565b828152604060208201525f612c3860408301846124d8565b949350505050565b5f82518060208501845e5f920191825250919050565b5f60208284031215612c66575f5ffd5b505191905056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122053a2c9c3f8ae738615e10a417777187e126e44c95fd5382d81085b8b8494fe8964736f6c634300081b0033",
}

// KeyRegistrarABI is the input ABI used to generate the binding from.
// Deprecated: Use KeyRegistrarMetaData.ABI instead.
var KeyRegistrarABI = KeyRegistrarMetaData.ABI

// KeyRegistrarBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KeyRegistrarMetaData.Bin instead.
var KeyRegistrarBin = KeyRegistrarMetaData.Bin

// DeployKeyRegistrar deploys a new Ethereum contract, binding an instance of KeyRegistrar to it.
func DeployKeyRegistrar(auth *bind.TransactOpts, backend bind.ContractBackend, _permissionController common.Address, _allocationManager common.Address, _version string) (common.Address, *types.Transaction, *KeyRegistrar, error) {
	parsed, err := KeyRegistrarMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KeyRegistrarBin), backend, _permissionController, _allocationManager, _version)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KeyRegistrar{KeyRegistrarCaller: KeyRegistrarCaller{contract: contract}, KeyRegistrarTransactor: KeyRegistrarTransactor{contract: contract}, KeyRegistrarFilterer: KeyRegistrarFilterer{contract: contract}}, nil
}

// KeyRegistrar is an auto generated Go binding around an Ethereum contract.
type KeyRegistrar struct {
	KeyRegistrarCaller     // Read-only binding to the contract
	KeyRegistrarTransactor // Write-only binding to the contract
	KeyRegistrarFilterer   // Log filterer for contract events
}

// KeyRegistrarCaller is an auto generated read-only Go binding around an Ethereum contract.
type KeyRegistrarCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KeyRegistrarTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KeyRegistrarFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KeyRegistrarSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KeyRegistrarSession struct {
	Contract     *KeyRegistrar     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KeyRegistrarCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KeyRegistrarCallerSession struct {
	Contract *KeyRegistrarCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// KeyRegistrarTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KeyRegistrarTransactorSession struct {
	Contract     *KeyRegistrarTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// KeyRegistrarRaw is an auto generated low-level Go binding around an Ethereum contract.
type KeyRegistrarRaw struct {
	Contract *KeyRegistrar // Generic contract binding to access the raw methods on
}

// KeyRegistrarCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KeyRegistrarCallerRaw struct {
	Contract *KeyRegistrarCaller // Generic read-only contract binding to access the raw methods on
}

// KeyRegistrarTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KeyRegistrarTransactorRaw struct {
	Contract *KeyRegistrarTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKeyRegistrar creates a new instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrar(address common.Address, backend bind.ContractBackend) (*KeyRegistrar, error) {
	contract, err := bindKeyRegistrar(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrar{KeyRegistrarCaller: KeyRegistrarCaller{contract: contract}, KeyRegistrarTransactor: KeyRegistrarTransactor{contract: contract}, KeyRegistrarFilterer: KeyRegistrarFilterer{contract: contract}}, nil
}

// NewKeyRegistrarCaller creates a new read-only instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarCaller(address common.Address, caller bind.ContractCaller) (*KeyRegistrarCaller, error) {
	contract, err := bindKeyRegistrar(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarCaller{contract: contract}, nil
}

// NewKeyRegistrarTransactor creates a new write-only instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarTransactor(address common.Address, transactor bind.ContractTransactor) (*KeyRegistrarTransactor, error) {
	contract, err := bindKeyRegistrar(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarTransactor{contract: contract}, nil
}

// NewKeyRegistrarFilterer creates a new log filterer instance of KeyRegistrar, bound to a specific deployed contract.
func NewKeyRegistrarFilterer(address common.Address, filterer bind.ContractFilterer) (*KeyRegistrarFilterer, error) {
	contract, err := bindKeyRegistrar(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarFilterer{contract: contract}, nil
}

// bindKeyRegistrar binds a generic wrapper to an already deployed contract.
func bindKeyRegistrar(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KeyRegistrarMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyRegistrar *KeyRegistrarRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyRegistrar.Contract.KeyRegistrarCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyRegistrar *KeyRegistrarRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.KeyRegistrarTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyRegistrar *KeyRegistrarRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.KeyRegistrarTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KeyRegistrar *KeyRegistrarCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KeyRegistrar.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KeyRegistrar *KeyRegistrarTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KeyRegistrar *KeyRegistrarTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.contract.Transact(opts, method, params...)
}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) BN254KEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "BN254_KEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) BN254KEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.BN254KEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// BN254KEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0xb05c8f6d.
//
// Solidity: function BN254_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) BN254KEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.BN254KEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) ECDSAKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "ECDSA_KEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) ECDSAKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.ECDSAKEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// ECDSAKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x166aa127.
//
// Solidity: function ECDSA_KEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) ECDSAKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _KeyRegistrar.Contract.ECDSAKEYREGISTRATIONTYPEHASH(&_KeyRegistrar.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) AllocationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "allocationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) AllocationManager() (common.Address, error) {
	return _KeyRegistrar.Contract.AllocationManager(&_KeyRegistrar.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) AllocationManager() (common.Address, error) {
	return _KeyRegistrar.Contract.AllocationManager(&_KeyRegistrar.CallOpts)
}

// CheckKey is a free data retrieval call binding the contract method 0x0a6ac264.
//
// Solidity: function checkKey((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) CheckKey(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "checkKey", operatorSet, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckKey is a free data retrieval call binding the contract method 0x0a6ac264.
//
// Solidity: function checkKey((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) CheckKey(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.CheckKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// CheckKey is a free data retrieval call binding the contract method 0x0a6ac264.
//
// Solidity: function checkKey((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) CheckKey(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.CheckKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) DomainSeparator() ([32]byte, error) {
	return _KeyRegistrar.Contract.DomainSeparator(&_KeyRegistrar.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) DomainSeparator() ([32]byte, error) {
	return _KeyRegistrar.Contract.DomainSeparator(&_KeyRegistrar.CallOpts)
}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarCaller) GetBN254Key(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getBN254Key", operatorSet, operator)

	outstruct := new(struct {
		G1Point BN254G1Point
		G2Point BN254G2Point
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.G1Point = *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)
	outstruct.G2Point = *abi.ConvertType(out[1], new(BN254G2Point)).(*BN254G2Point)

	return *outstruct, err

}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarSession) GetBN254Key(operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	return _KeyRegistrar.Contract.GetBN254Key(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetBN254Key is a free data retrieval call binding the contract method 0x9a43e3fb.
//
// Solidity: function getBN254Key((address,uint32) operatorSet, address operator) view returns((uint256,uint256) g1Point, (uint256[2],uint256[2]) g2Point)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetBN254Key(operatorSet OperatorSet, operator common.Address) (struct {
	G1Point BN254G1Point
	G2Point BN254G2Point
}, error) {
	return _KeyRegistrar.Contract.GetBN254Key(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetBN254KeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getBN254KeyRegistrationMessageHash", operator, operatorSet, keyData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetBN254KeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetBN254KeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyData)
}

// GetBN254KeyRegistrationMessageHash is a free data retrieval call binding the contract method 0x7690e395.
//
// Solidity: function getBN254KeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, bytes keyData) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetBN254KeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyData []byte) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetBN254KeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyData)
}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAAddress(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAAddress", operatorSet, operator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAAddress(operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	return _KeyRegistrar.Contract.GetECDSAAddress(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAAddress is a free data retrieval call binding the contract method 0x3b32a7bd.
//
// Solidity: function getECDSAAddress((address,uint32) operatorSet, address operator) view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAAddress(operatorSet OperatorSet, operator common.Address) (common.Address, error) {
	return _KeyRegistrar.Contract.GetECDSAAddress(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAKey(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAKey", operatorSet, operator)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAKey(operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKey is a free data retrieval call binding the contract method 0xaa165c30.
//
// Solidity: function getECDSAKey((address,uint32) operatorSet, address operator) view returns(bytes)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAKey(operatorSet OperatorSet, operator common.Address) ([]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKey(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetECDSAKeyRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getECDSAKeyRegistrationMessageHash", operator, operatorSet, keyAddress)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetECDSAKeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyAddress)
}

// GetECDSAKeyRegistrationMessageHash is a free data retrieval call binding the contract method 0xd9f12db2.
//
// Solidity: function getECDSAKeyRegistrationMessageHash(address operator, (address,uint32) operatorSet, address keyAddress) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetECDSAKeyRegistrationMessageHash(operator common.Address, operatorSet OperatorSet, keyAddress common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetECDSAKeyRegistrationMessageHash(&_KeyRegistrar.CallOpts, operator, operatorSet, keyAddress)
}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCaller) GetKeyHash(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getKeyHash", operatorSet, operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarSession) GetKeyHash(operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetKeyHash(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetKeyHash is a free data retrieval call binding the contract method 0xea194e2e.
//
// Solidity: function getKeyHash((address,uint32) operatorSet, address operator) view returns(bytes32)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetKeyHash(operatorSet OperatorSet, operator common.Address) ([32]byte, error) {
	return _KeyRegistrar.Contract.GetKeyHash(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarCaller) GetOperatorSetCurveType(opts *bind.CallOpts, operatorSet OperatorSet) (uint8, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "getOperatorSetCurveType", operatorSet)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarSession) GetOperatorSetCurveType(operatorSet OperatorSet) (uint8, error) {
	return _KeyRegistrar.Contract.GetOperatorSetCurveType(&_KeyRegistrar.CallOpts, operatorSet)
}

// GetOperatorSetCurveType is a free data retrieval call binding the contract method 0x7cffe48c.
//
// Solidity: function getOperatorSetCurveType((address,uint32) operatorSet) view returns(uint8)
func (_KeyRegistrar *KeyRegistrarCallerSession) GetOperatorSetCurveType(operatorSet OperatorSet) (uint8, error) {
	return _KeyRegistrar.Contract.GetOperatorSetCurveType(&_KeyRegistrar.CallOpts, operatorSet)
}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) IsKeyGloballyRegistered(opts *bind.CallOpts, keyHash [32]byte) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "isKeyGloballyRegistered", keyHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) IsKeyGloballyRegistered(keyHash [32]byte) (bool, error) {
	return _KeyRegistrar.Contract.IsKeyGloballyRegistered(&_KeyRegistrar.CallOpts, keyHash)
}

// IsKeyGloballyRegistered is a free data retrieval call binding the contract method 0xdab42d7e.
//
// Solidity: function isKeyGloballyRegistered(bytes32 keyHash) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) IsKeyGloballyRegistered(keyHash [32]byte) (bool, error) {
	return _KeyRegistrar.Contract.IsKeyGloballyRegistered(&_KeyRegistrar.CallOpts, keyHash)
}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCaller) IsRegistered(opts *bind.CallOpts, operatorSet OperatorSet, operator common.Address) (bool, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "isRegistered", operatorSet, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarSession) IsRegistered(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.IsRegistered(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// IsRegistered is a free data retrieval call binding the contract method 0xbd30a0b9.
//
// Solidity: function isRegistered((address,uint32) operatorSet, address operator) view returns(bool)
func (_KeyRegistrar *KeyRegistrarCallerSession) IsRegistered(operatorSet OperatorSet, operator common.Address) (bool, error) {
	return _KeyRegistrar.Contract.IsRegistered(&_KeyRegistrar.CallOpts, operatorSet, operator)
}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarCaller) PermissionController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "permissionController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarSession) PermissionController() (common.Address, error) {
	return _KeyRegistrar.Contract.PermissionController(&_KeyRegistrar.CallOpts)
}

// PermissionController is a free data retrieval call binding the contract method 0x4657e26a.
//
// Solidity: function permissionController() view returns(address)
func (_KeyRegistrar *KeyRegistrarCallerSession) PermissionController() (common.Address, error) {
	return _KeyRegistrar.Contract.PermissionController(&_KeyRegistrar.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _KeyRegistrar.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarSession) Version() (string, error) {
	return _KeyRegistrar.Contract.Version(&_KeyRegistrar.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_KeyRegistrar *KeyRegistrarCallerSession) Version() (string, error) {
	return _KeyRegistrar.Contract.Version(&_KeyRegistrar.CallOpts)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) ConfigureOperatorSet(opts *bind.TransactOpts, operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "configureOperatorSet", operatorSet, curveType)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarSession) ConfigureOperatorSet(operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSet(&_KeyRegistrar.TransactOpts, operatorSet, curveType)
}

// ConfigureOperatorSet is a paid mutator transaction binding the contract method 0xea0d8149.
//
// Solidity: function configureOperatorSet((address,uint32) operatorSet, uint8 curveType) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) ConfigureOperatorSet(operatorSet OperatorSet, curveType uint8) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.ConfigureOperatorSet(&_KeyRegistrar.TransactOpts, operatorSet, curveType)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) DeregisterKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "deregisterKey", operator, operatorSet)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarSession) DeregisterKey(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.DeregisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// DeregisterKey is a paid mutator transaction binding the contract method 0x87ab86f4.
//
// Solidity: function deregisterKey(address operator, (address,uint32) operatorSet) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) DeregisterKey(operator common.Address, operatorSet OperatorSet) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.DeregisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactor) RegisterKey(opts *bind.TransactOpts, operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.contract.Transact(opts, "registerKey", operator, operatorSet, keyData, signature)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarSession) RegisterKey(operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RegisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, keyData, signature)
}

// RegisterKey is a paid mutator transaction binding the contract method 0xd40cda16.
//
// Solidity: function registerKey(address operator, (address,uint32) operatorSet, bytes keyData, bytes signature) returns()
func (_KeyRegistrar *KeyRegistrarTransactorSession) RegisterKey(operator common.Address, operatorSet OperatorSet, keyData []byte, signature []byte) (*types.Transaction, error) {
	return _KeyRegistrar.Contract.RegisterKey(&_KeyRegistrar.TransactOpts, operator, operatorSet, keyData, signature)
}

// KeyRegistrarAggregateBN254KeyUpdatedIterator is returned from FilterAggregateBN254KeyUpdated and is used to iterate over the raw logs and unpacked data for AggregateBN254KeyUpdated events raised by the KeyRegistrar contract.
type KeyRegistrarAggregateBN254KeyUpdatedIterator struct {
	Event *KeyRegistrarAggregateBN254KeyUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarAggregateBN254KeyUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarAggregateBN254KeyUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarAggregateBN254KeyUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarAggregateBN254KeyUpdated represents a AggregateBN254KeyUpdated event raised by the KeyRegistrar contract.
type KeyRegistrarAggregateBN254KeyUpdated struct {
	OperatorSet     OperatorSet
	NewAggregateKey BN254G1Point
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAggregateBN254KeyUpdated is a free log retrieval operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterAggregateBN254KeyUpdated(opts *bind.FilterOpts) (*KeyRegistrarAggregateBN254KeyUpdatedIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "AggregateBN254KeyUpdated")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarAggregateBN254KeyUpdatedIterator{contract: _KeyRegistrar.contract, event: "AggregateBN254KeyUpdated", logs: logs, sub: sub}, nil
}

// WatchAggregateBN254KeyUpdated is a free log subscription operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchAggregateBN254KeyUpdated(opts *bind.WatchOpts, sink chan<- *KeyRegistrarAggregateBN254KeyUpdated) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "AggregateBN254KeyUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarAggregateBN254KeyUpdated)
				if err := _KeyRegistrar.contract.UnpackLog(event, "AggregateBN254KeyUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAggregateBN254KeyUpdated is a log parse operation binding the contract event 0xdfa2f59e55747ba641fbdff4eb78577de8789d605920d5be4a74ee3a6470d1d1.
//
// Solidity: event AggregateBN254KeyUpdated((address,uint32) operatorSet, (uint256,uint256) newAggregateKey)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseAggregateBN254KeyUpdated(log types.Log) (*KeyRegistrarAggregateBN254KeyUpdated, error) {
	event := new(KeyRegistrarAggregateBN254KeyUpdated)
	if err := _KeyRegistrar.contract.UnpackLog(event, "AggregateBN254KeyUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyDeregisteredIterator is returned from FilterKeyDeregistered and is used to iterate over the raw logs and unpacked data for KeyDeregistered events raised by the KeyRegistrar contract.
type KeyRegistrarKeyDeregisteredIterator struct {
	Event *KeyRegistrarKeyDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyDeregistered represents a KeyDeregistered event raised by the KeyRegistrar contract.
type KeyRegistrarKeyDeregistered struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyDeregistered is a free log retrieval operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyDeregistered(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyDeregisteredIterator{contract: _KeyRegistrar.contract, event: "KeyDeregistered", logs: logs, sub: sub}, nil
}

// WatchKeyDeregistered is a free log subscription operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyDeregistered(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyDeregistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyDeregistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyDeregistered)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyDeregistered is a log parse operation binding the contract event 0x28d3c3cee49478ec6fd219cfd685cd15cd01d95cabf69b4b7b57f9eaa3eb6442.
//
// Solidity: event KeyDeregistered((address,uint32) operatorSet, address indexed operator, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyDeregistered(log types.Log) (*KeyRegistrarKeyDeregistered, error) {
	event := new(KeyRegistrarKeyDeregistered)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarKeyRegisteredIterator is returned from FilterKeyRegistered and is used to iterate over the raw logs and unpacked data for KeyRegistered events raised by the KeyRegistrar contract.
type KeyRegistrarKeyRegisteredIterator struct {
	Event *KeyRegistrarKeyRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarKeyRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarKeyRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarKeyRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarKeyRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarKeyRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarKeyRegistered represents a KeyRegistered event raised by the KeyRegistrar contract.
type KeyRegistrarKeyRegistered struct {
	OperatorSet OperatorSet
	Operator    common.Address
	CurveType   uint8
	Pubkey      []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyRegistered is a free log retrieval operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterKeyRegistered(opts *bind.FilterOpts, operator []common.Address) (*KeyRegistrarKeyRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "KeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarKeyRegisteredIterator{contract: _KeyRegistrar.contract, event: "KeyRegistered", logs: logs, sub: sub}, nil
}

// WatchKeyRegistered is a free log subscription operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchKeyRegistered(opts *bind.WatchOpts, sink chan<- *KeyRegistrarKeyRegistered, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "KeyRegistered", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarKeyRegistered)
				if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyRegistered is a log parse operation binding the contract event 0x1201ce0c5e577111bce91e907fd99cb183da5edc1e3fb650ca40769e4e9176dd.
//
// Solidity: event KeyRegistered((address,uint32) operatorSet, address indexed operator, uint8 curveType, bytes pubkey)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseKeyRegistered(log types.Log) (*KeyRegistrarKeyRegistered, error) {
	event := new(KeyRegistrarKeyRegistered)
	if err := _KeyRegistrar.contract.UnpackLog(event, "KeyRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KeyRegistrarOperatorSetConfiguredIterator is returned from FilterOperatorSetConfigured and is used to iterate over the raw logs and unpacked data for OperatorSetConfigured events raised by the KeyRegistrar contract.
type KeyRegistrarOperatorSetConfiguredIterator struct {
	Event *KeyRegistrarOperatorSetConfigured // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KeyRegistrarOperatorSetConfigured)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KeyRegistrarOperatorSetConfigured)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KeyRegistrarOperatorSetConfiguredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KeyRegistrarOperatorSetConfigured represents a OperatorSetConfigured event raised by the KeyRegistrar contract.
type KeyRegistrarOperatorSetConfigured struct {
	OperatorSet OperatorSet
	CurveType   uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOperatorSetConfigured is a free log retrieval operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) FilterOperatorSetConfigured(opts *bind.FilterOpts) (*KeyRegistrarOperatorSetConfiguredIterator, error) {

	logs, sub, err := _KeyRegistrar.contract.FilterLogs(opts, "OperatorSetConfigured")
	if err != nil {
		return nil, err
	}
	return &KeyRegistrarOperatorSetConfiguredIterator{contract: _KeyRegistrar.contract, event: "OperatorSetConfigured", logs: logs, sub: sub}, nil
}

// WatchOperatorSetConfigured is a free log subscription operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) WatchOperatorSetConfigured(opts *bind.WatchOpts, sink chan<- *KeyRegistrarOperatorSetConfigured) (event.Subscription, error) {

	logs, sub, err := _KeyRegistrar.contract.WatchLogs(opts, "OperatorSetConfigured")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KeyRegistrarOperatorSetConfigured)
				if err := _KeyRegistrar.contract.UnpackLog(event, "OperatorSetConfigured", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSetConfigured is a log parse operation binding the contract event 0xb2266cb118e57095fcdbedb24dabd9fc9f5127e2dbedf62ce6ee71696fb8b6e7.
//
// Solidity: event OperatorSetConfigured((address,uint32) operatorSet, uint8 curveType)
func (_KeyRegistrar *KeyRegistrarFilterer) ParseOperatorSetConfigured(log types.Log) (*KeyRegistrarOperatorSetConfigured, error) {
	event := new(KeyRegistrarOperatorSetConfigured)
	if err := _KeyRegistrar.contract.UnpackLog(event, "OperatorSetConfigured", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
