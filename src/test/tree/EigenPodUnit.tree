# EigenPod Tree (*** denotes that integrationt tests are needed to validate path)
# when contract is deployed and initialized
## it should properly set storage
# when initialize called again
## it should revert


# Tests in integration
## Pausing Functionality
## verifyWithdrawalCredentials (external)
## verifyBalanceUpdates (external)
## verifyAndProcessWithdrawals(external)
## Withdraw restaked beacon chain ETH after withdrawing

# when stake is called
## given the caller is not the EigenPodManager
### it should revert
## given the value staked is not 32 ETH
### it should revert
## given that all of the above conditions are satisfied
### it should stake ETH in the beacon chain deposit contract

# EigenPod Owner Caller Tests
# when withdrawNonBeaconChainETHBalanceWei is called
## given that the caller is not the eigen pod owner
### it should revert
## given that the amount to withdraw is greater than the non-beacon chain eth balance
### it should revert
## given the above conditions pass
### it should send eth to the delayed withdrawal router
# when recoverTokens is called
## given that the caller is not the eigen pod owner
### it should revert
## given that the tokens and amount to withdraw lists are different lengths
### it should revert
## given that the above conditions pass
### it should transfer tokens to the recipient
# when activate restaking is called
## given that the eigenpods verify credentials is not paused ***
### it should revert
## given that the caller is not the eigen pod owner
### it should revert
## given that hasRestaked is true
### it should revert
## given that all the above conditions pass
### it should set hasRestaked to true and process a withdrawal of eth
# when withdrawBeforeRestaking is called
## given that the caller is not the eigen pod owner
### it should revert
## given that has restaked is true
### it should revert
## given that the above conditions pass
### it should process a withdrawal of eth to the delayed withdrawal router

# when verifyWithdrawalCredentials is called ***
## given that the caller is not the eigen pod Owner
### it should revert
## given that the verify credentials feature is paused
### it should revert
## given that the proof is not valid for the timestamp
### it should revert
## given that restaking is not enabled
### it should revert
## given that the validator indices and proofs are different lengths
### it should revert
## given that the withdrawal credential proof is stale
### it should revert
## given that the eigenPodManager

# when _verifyWithdrawalCredentials is called (internal function)
## given that the validators status is inactive
### it should revert
## given that validatorFields does not correspond to the pod withdrawal credentials
### it should revert
## given that the validator fields proof is not valid
### it should revert
## given that all the above conditions are satisfied
### given that the validator effective balance is greater than the max restaked balance
#### it should set the validator restaked balance to the max restaked balance
### given that the validator effective balance is less than or equal to the max restaked balance
#### it should set the validator restaked balance to the validator effective balance

# when _verifyBalanceUpdate is called (internal function)
## given that the most recent balance update timestamp is greater than or = to the oracle timestamp
### it should revert
## given that the validator status is not active 
### it should revert
## given that the validator withdrawble epoch is less than or equal to the epoch of the oracle timestamp
### given that the validator balance is equal to 0
#### it should revert
## given that the validator fields proof is not valid
### it should revert
## given that the validator balances proof is not valid
## given that the above conditions are satisfied
### given that the validator restaked balance is greater than the max restaked balance per validator
#### it should set the new restaked balance to the validator restaked balance
### given that the validator restaked balance is less than or equal to the max restaked balance per validator
#### it should set the new restaked balance to the validator restaked balance
### it should update the _validatorPubkeyHashToInfo mapping
### given that the new restaked balance is not equal to the validator restaked balance
#### it should emit a validator balance updated event and return a non-zero sharesDeltaGwei


# Withdrawal Flow Tests

# when _verifyAndProcessWithdrawal is called (internal function)
## given that the proof timestamp is stale
### it should revert
## given that the status of the validator is inactive
### it should revert
## given that the withdrawalTimestamp has already been proven
### it should revert
## given that the withdrawal proof is invalid - tested in beaconChain proofs tests
### it should revert
## given that the validator fields proof is invalid - tested in beaconChain proofs tests
### it should revert
## given that the above conditions are satisfied
### it should set the withdrawal timestamp as proven for the validator pubKey 
### given that the epoch of the proof is after the withdrawable epoch
#### it should process a full withdrawal
### given that the epcoh of the proof is before the withdrawable epoch
#### it should process a partial withdrawal

# when _processFullWithdrawal is called (internal function)
## given that the withdrawalAmount is greater than the max restaked balance per validator
### it should set the amount to queue to the max restaked balance per validator
## given that the withdrawalAmount is less than or equal to the max restaked balance per validator
### it should set the amount to queue to the withdrawal amount
## it should set the amount of ETH to withdraw via the delayed withdrawal router as the difference between the withdrawalAmount and amount to queue
## it should increment withdrawableRestakedExecutionLayerGwei by the amount to queue
## it should update the sharesDelta of the withdrawal as the difference between the amount to queue and the previous restaked balance 
## it should update the _validatorPubkeyHashToInfo mapping with a restaked balance of 0 and status as withdrawn 
## it should emit a FullWithdrawalRedeemed event and return the verified withdrawal struct

# when _processPartialWithdrawal is called (internal function)
## it should emit a PartialWithdrawalRedeemed event
## it should increment the sumOfPartialWithdrawalsClaimedGwei variable
## it should return the verified withdrawal struct 

# when withdrawRestakedBeaconChainETH is called - function only relevant when `withdrawableRestakedExecutionLayerGwei` is incremented after a full withdrawal
## given that the caller is not the EigenPodManager
### it should revert
## given that the amount to withdraw is not a whole Gwei amount
### it should revert
## given that the amount ot withdraw is greater than the withdrawable restaked execution layer amount
### it should revert
## given the above conditions are true
### it should send eth from the pod to the recipient