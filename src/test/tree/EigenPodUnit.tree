.
├── EigenPod Tree (*** denotes that integration tests are needed to validate path)
├── when the contract is deployed and initialized
│   └── it should properly set storage
├── when initialize called again
│   └── it should revert
├── // EigenPodManager Caller Tree
├── when stake is called
│   ├── given the caller is not the EigenPodManager
│   │   └── it should revert
│   ├── given the value staked is not 32 ETH
│   │   └── it should revert
│   └── given that all of the above conditions are satisfied
│       └── it should stake ETH in the beacon chain deposit contract
├── when withdrawRestakedBeaconChainETH is called - function only relevant when `withdrawableRestakedExecutionLayerGwei` is incremented after a full withdrawal
│   ├── given that the caller is not the EigenPodManager
│   │   └── it should revert
│   ├── given that the amount to withdraw is not a whole Gwei amount
│   │   └── it should revert
│   ├── given that the amount to withdraw is greater than the withdrawable restaked execution layer amount
│   │   └── it should revert
│   └── given the above conditions are satisfied
│       └── it should send eth from the pod to the recipient
├── // EigenPodOwner Caller Tree
├── when verifyWithdrawalCredentials is called ***
│   ├── given that the caller is not the eigen pod Owner
│   │   └── it should revert
│   ├── given that verify credentials is paused
│   │   └── it should revert
│   ├── given that the proof is not valid for the timestamp
│   │   └── it should revert
│   ├── given that restaking is not enabled
│   │   └── it should revert
│   ├── given that the validator indices, proofs, and validator fields are different lengths
│   │   └── it should revert
│   ├── given that the withdrawal credential proof is stale
│   │   └── it should revert
│   ├── given that the beacon state root proof is invalid
│   │   └── it should revert
│   ├── it should call _verifyWithdrawalCredentials for each validator
│   └── it should record a beaconChainETH balance update in the EPM
├── when _verifyWithdrawalCredentials is called (internal function)
│   ├── given that the validators status is not INACTIVE
│   │   └── it should revert
│   ├── given that the validator is currently in the process of fully exiting
│   │   └── it should revert
│   ├── given that validator's withdrawal credentials does not correspond to the pod withdrawal credentials
│   │   └── it should revert
│   ├── given that the validator fields proof is not valid
│   │   └── it should revert
│   └── given that all the above conditions are satisfied
│       ├── it should set the validator's restaked balance to their effective balance
│       ├── it should update the _validatorPubkeyHashToInfo mapping with an active validator, restaked balance in gwei, and lastCheckpointedAt timestamp
│       ├── it should emit ValidatorRestaked and ValidatorBalanceUpdated Events
│       └── it should return the validator's restakedBalance in wei
├── when recoverTokens is called
│   ├── given that the caller is not the eigen pod owner
│   │   └── it should revert
│   ├── given that non proof withdrawals are paused
│   │   └── it should revert
│   ├── given that the tokens and amounts to withdraw are different lengths
│   │   └── it should revert
│   └── given that the above conditions pass
│       └── it should transfer tokens to the recipient
├── // Checkpointing Tree
├── when startCheckpoint is called
│   ├── given that the caller is not the eigen pod owner
│   │   └── it should revert
│   ├── given that start checkpoints is not paused
│   │   └── it should revert
│   ├── it should call _startCheckpoint
│   └── given _startCheckpoint does not revert
│       └── given hasRestaked is false
│           └── it should set hasRestaked to true and emit RestakingActivated
├── when _startCheckpoint is called
│   ├── given a current checkpoint is in progress, currentCheckpointTimestamp != 0
│   │   └── it should revert
│   ├── given the last checkpoint occurred in the same block, lastCheckpointTimestamp == block.timestamp
│   │   └── it should revert
│   ├── given revertIfNoBalance is true and the pod has no increase balance in gwei
│   │   └── it should revert
│   └── given that the above conditions pass
│       ├── it should set the currentCheckpointTimestamp to the current block timestamp
│       ├── it should set the currentCheckpoint with the parentBlockRoot at block.timestamp and with the current activeValidatorCount
│       └── it should emit CheckpointCreated
├── when verifyCheckpointProofs is called
│   ├── given that verify checkpoint proofs is paused
│   │   └── it should revert
│   ├── given there is no currently active checkpoint, currentCheckpointTimestamp == 0
│   │   └── it should revert
│   ├── given the balanceContainerProof does not match with the current checkpoint beaconBlockRoot
│   │   └── it should revert
│   ├── for each balanceProof, it should process the respective validator accordingly
│   │   ├── given the validator is not active
│   │   │   └── it should continue to next validator proof
│   │   ├── given the validator last checkpointed timestamp is >= currentCheckpointTimestamp
│   │   │   └── it should continue to next validator proof
│   │   └── given _verifyCheckpointProof does not revert
│   │       └── it should decrement proofsRemaining, add to balanceDeltasGwei, add to exitedBalancesGwei
│   └── given that all above checkpoint proofs pass
│       └── it should update checkpointBalanceExitedGwei at the checkpoint timestamp and call _updateCheckpoint
├── when _verifyCheckpointProof is called
│   ├── given verifyValidatorBalance does not match with balanceContainerRoot
│   │   └── it should revert
│   └── it should return the balanceDeltaGwei and exitedBalanceGwei if the validator did a full exit
├── when _updateCheckpoint is called
│   ├── given there are still proofs remaining for the checkpoint
│   │   └── it should update the current checkpoint
│   └── given there are 0 proofs remaining for the checkpoint
│       ├── it should update the lastCheckpointTimestamp with currentCheckpointTimestamp
│       ├── it should delete currentCheckpointTimestamp resetting it to 0
│       ├── it should delete the currentCheckpoint
│       ├── it should recordBeaconChainBalanceUpdate on the EPM with the total delta of shares in wei
│       └── it should emit CheckpointFinalized
├── when _getParentBlockRoot is called
│   ├── given the provided timestamp is out of range, HISTORY_BUFFER_LENGTH * 12seconds
│   │   └── it should revert
│   └── given the slot at the provided timestamp was skipped
│       └── it should revert
└── when verifyStaleBalance is called
    ├── given that verify stale balance is paused
    │   └── it should revert
    ├── given that the validator last checkpointed timestamp is not stale enough (2 weeks)
    │   └── it should revert
    ├── given that the validator status is not ACTIVE
    │   └── it should revert
    ├── given that the validator has not been slashed
    │   └── it should revert
    ├── given that the beacon state root proof does not match the beaconBlockRoot at the given beaconTimestamp
    │   └── it should revert
    ├── given the validator container proof does not match the beacon state root
    │   └── it should revert
    └── given that all the above conditions pass
        └── it should call _startCheckpoint with revertIfNoBalance set to false