.
├── EigenPod Tree (*** denotes that integration tests are needed to validate path)
├── when the contract is deployed and initialized
│   └── it should properly set storage
├── when initialize called again
│   └── it should revert
├── // EigenPodManager Caller Tree
├── when stake is called
│   ├── given the caller is not the EigenPodManager
│   │   └── it should revert
│   ├── given the value staked is not 32 ETH
│   │   └── it should revert
│   └── given that all of the above conditions are satisfied
│       └── it should stake ETH in the beacon chain deposit contract
├── when withdrawRestakedBeaconChainETH is called - function only relevant when `withdrawableRestakedExecutionLayerGwei` is incremented after a full withdrawal
│   ├── given that the caller is not the EigenPodManager
│   │   └── it should revert
│   ├── given that the amount to withdraw is not a whole Gwei amount
│   │   └── it should revert
│   ├── given that the amount to withdraw is greater than the withdrawable restaked execution layer amount
│   │   └── it should revert
│   └── given the above conditions are satisfied
│       └── it should send eth from the pod to the recipient
├── // EigenPodOwner Caller Tree
├── when verifyWithdrawalCredentials is called ***
│   ├── given that the caller is not the eigen pod Owner
│   │   └── it should revert
│   ├── given that verify credentials is paused
│   │   └── it should revert
│   ├── given that the proof is not valid for the timestamp
│   │   └── it should revert
│   ├── given that restaking is not enabled
│   │   └── it should revert
│   ├── given that the validator indices, proofs, and validator fields are different lengths
│   │   └── it should revert
│   ├── given that the withdrawal credential proof is stale
│   │   └── it should revert
│   ├── given that the beacon state root proof is invalid
│   │   └── it should revert
│   ├── it should call _verifyWithdrawalCredentials for each validator
│   └── it should record a beaconChainETH balance update in the EPM
├── when _verifyWithdrawalCredentials is called (internal function)
│   ├── given that the validators status is inactive
│   │   └── it should revert
│   ├── given that the validator is currently in the process of fully exiting
│   │   └── it should revert
│   ├── given that validator's withdrawal credentials does not correspond to the pod withdrawal credentials
│   │   └── it should revert
│   ├── given that the validator fields proof is not valid
│   │   └── it should revert
│   └── given that all the above conditions are satisfied
│       ├── it should set the validator's restaked balance to their effective balance
│       ├── it should update the _validatorPubkeyHashToInfo mapping with an active validator, restaked balance in gwei, and lastCheckpointedAt timestamp
│       ├── it should emit ValidatorRestaked and ValidatorBalanceUpdated Events
│       └── it should return the validator's restakedBalance in wei
├── when recoverTokens is called
│   ├── given that the caller is not the eigen pod owner
│   │   └── it should revert
│   ├── given that non proof withdrawals are paused
│   │   └── it should revert
│   ├── given that the tokens and amounts to withdraw are different lengths
│   │   └── it should revert
│   └── given that the above conditions pass
│       └── it should transfer tokens to the recipient
├── when activate restaking is called
│   ├── given that the eigenpods verify credentials is not paused ***
│   │   └── it should revert
│   ├── given that the caller is not the eigen pod owner
│   │   └── it should revert
│   ├── given that hasRestaked is true
│   │   └── it should revert
│   └── given that all the above conditions pass
│       └── it should set hasRestaked to true, process a withdrawal of ETH to the delayed withdrawal router, and emit a RestakingActivated event
├── when withdrawBeforeRestaking is called
│   ├── given that the caller is not the eigen pod owner
│   │   └── it should revert
│   ├── given that has restaked is true
│   │   └── it should revert
│   └── given that the above conditions pass
│       └── it should process a withdrawal of eth to the delayed withdrawal router
├── // Checkpointing Tree
# startCheckpoint
# verifyCheckpointProofs
# verifyStaleBalance

// Tests in Integration
// Pausing Functionality
// verifyWithdrawalCredentials (external)
// verifyBalanceUpdates (external)
// verifyAndProcessWithdrawals(external)
// Withdraw restaked beacon chain ETH after withdrawing