// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.27;

import {TimelockController} from "@openzeppelin/contracts/governance/TimelockController.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

import "src/test/integration/IntegrationChecks.t.sol";

/**
 * Queue txns:
 * - DISTRO: https://etherscan.io/tx/0x8e6f1701abc942d468a5cea427ae16069b5ee6341407e2f3ac64e18e01e06756
 * - MOOCOW: https://etherscan.io/tx/0x6e219b1ad78aa0e988ba1cde6e0bfc415edc3d1d8733dc495c8c7e79f77414f8
 */

contract UpgradeTest is IntegrationCheckUtils {

    using Strings for *;
    using StdStyle for *;

    // Ops Multisig
    address opsMS = 0xBE1685C81aA44FF9FB319dD389addd9374383e90;
    // Protocol Council Multisig
    address pCMS = 0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F;
    // Executor Multisig
    address execMS = 0x369e6F597e22EaB55fFb173C6d9cD234BD699111;

    TimelockController tcl = TimelockController(payable(0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d));

    bytes calldataToExecutor_DISTRO = hex"6A76120200000000000000000000000040A2ACCBD92BCA938B02010E17A5B8929B49130D000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C800000000000000000000000000000000000000000000000000000000000000B048D80FF0A00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000AA2008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC400000000000000000000000039053D51B77DC0D36036FC1FCC8CB819DF8EF37A0000000000000000000000006EED6C2802DF347E05884857CDDB2D3E96D12F89008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC4000000000000000000000000948A420B8CC1D6BFD0B6087C2E7C344A2CD0BC39000000000000000000000000C97602648FA52F92B4EE2B0E5A54BD15B6CB0345008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC4000000000000000000000000858646372CC42E1A627FCE94AA7A7033E7CF075A00000000000000000000000046AEFD30415BE99E20169EE7046F65784B46D123008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC400000000000000000000000091E677B07F7AF907EC9A428AAFA9FC14A0D3A338000000000000000000000000E48D7CAEC1790B293667E4BB2DE1E00536F2BABD008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC4000000000000000000000000ACB55C530ACDB2849E6D4F36992CD8C9D50ED8F7000000000000000000000000530FDB7ADF7D489DF49C27E3D3512C0DD64886BE000ED6703C298D28AE0878D1B28E88CA87F9662FE9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000243659CFE6000000000000000000000000D4D1746142642DB4C1AB17B03B9C58BAAC913E5B008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC400000000000000000000000093C4B944D05DFE6DF7645A86CD2206016C51564D00000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC40000000000000000000000001BEE69B7DFFFA4E2D53C2A2DF135C388AD25DCD200000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC400000000000000000000000054945180DB7943C0ED0FEE7EDAB2BD24620256BC00000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC40000000000000000000000009D7ED45EE2E8FC5482FA2428F15C971E6369011D00000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC400000000000000000000000013760F50A9D7377E4F20CB8CF9E4C26586C658FF00000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC4000000000000000000000000A4C637E0F704745D182E4D38CAB7E7485321D05900000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC400000000000000000000000057BA429517C3473B6D34CA9ACD56C0E735B94C0200000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC40000000000000000000000000FE4F44BEE93503346A3AC9EE5A26B130A5796D600000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC40000000000000000000000007CA911E83DABF90C90DD3DE5411A10F1A611218400000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC40000000000000000000000008CA7A5D6F3ACD3A7A8BC468A8CD0FB14B6BD28B600000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC4000000000000000000000000AE60D8180437B5C34BB956822AC271097258447300000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0008B9566ADA63B64D1E1DCF1418B43FD1433B724440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004499A88EC4000000000000000000000000298AFB19A105D59E74658C4C334FF360BADE6DD200000000000000000000000062F7226FB9D615590EADB539713B250FB2FDF4E0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000000000000000000000000C06FD4F821EAC1FF1AE8067B36342899B57BAA2D00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    bytes calldataToExecutor_MOOCOW = hex

    // Timestamp of block where transaction was queued
    // (Fri, Jul 11 @ ~12.30 EST)
    uint queueTimestamp = 1752251303;
    // 10 Days
    uint queueDelay = 864000;

    function test_TEMP() public {
        cheats.createSelectFork(cheats.rpcUrl("mainnet"));
        // fork mainnet

        console.log("Using current block/time, reading mainnet state...".yellow().bold());

        _checkRoles();
        _checkIsPending();
        
        // Warp to Monday morning
        console.log("");
        console.log("Warping to timestamp: %d".yellow().bold(), queueTimestamp + queueDelay);
        cheats.warp(queueTimestamp + queueDelay);
        _checkIsPending();

        _tryCallFunctions();

        _executeUpgrade();

        _tryCallFunctions();


    }

    function _checkRoles() internal {
        console.log("");
        console.log("_checkRoles()...".dim());

        bytes32 PROPOSER_ROLE = tcl.PROPOSER_ROLE();
        bytes32 CANCELLER_ROLE = tcl.CANCELLER_ROLE();
        bytes32 EXECUTOR_ROLE = tcl.EXECUTOR_ROLE();
        
        // opsMS has PROPOSER/CANCELLER
        require(tcl.hasRole(PROPOSER_ROLE, opsMS), "opsMS should have proposer role");
        require(tcl.hasRole(CANCELLER_ROLE, opsMS), "opsMS should have canceller role");
        require(!tcl.hasRole(EXECUTOR_ROLE, opsMS), "opsMS should NOT have executor role");

        // protocolCouncilMS has CANCELLER/EXECUTOR
        require(tcl.hasRole(PROPOSER_ROLE, pCMS), "pCMS should have proposer role");
        require(!tcl.hasRole(CANCELLER_ROLE, pCMS), "pCMS should NOT have canceller role");
        require(tcl.hasRole(EXECUTOR_ROLE, pCMS), "pCMS should have executor role");

        console.log("_checkRoles success".green());
    }

    function _checkIsPending() internal {
        console.log("");
        console.log("_checkIsPending()...".dim());

        bytes32 DISTRO_OPERATION_ID = tcl.hashOperation({
            target: execMS,
            value: 0,
            data: calldataToExecutor_DISTRO,
            predecessor: bytes32(0),
            salt: bytes32(0)
        });

        bytes32 MOOCOW_OPERATION_ID = tcl.hashOperation({
            target: execMS,
            value: 0,
            data: calldataToExecutor_MOOCOW,
            predecessor: bytes32(0),
            salt: bytes32(0)
        });

        _logTruthy(" - DISTRO is pending", tcl.isOperationPending(DISTRO_OPERATION_ID));
        _logTruthy(" - MOOCOW is pending", tcl.isOperationPending(MOOCOW_OPERATION_ID));

        _logTruthy(" - DISTRO is ready", tcl.isOperationReady(DISTRO_OPERATION_ID));
        _logTruthy(" - MOOCOW is ready", tcl.isOperationReady(MOOCOW_OPERATION_ID));

        _logTruthy(" - DISTRO is done", tcl.isOperationDone(DISTRO_OPERATION_ID));
        _logTruthy(" - MOOCOW is done", tcl.isOperationDone(MOOCOW_OPERATION_ID));
    }

    function _logTruthy(string memory str, bool truthy) internal {
        if (truthy) {
            console.log("%s: %s", str.dim(), "TRUE".green());
        } else {
            console.log("%s: %s", str.dim(), "FALSE".red());
        }
    }
}